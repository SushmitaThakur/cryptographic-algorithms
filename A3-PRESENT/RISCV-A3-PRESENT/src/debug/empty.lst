
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/debug/empty.elf:     file format elf32-littleriscv
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/debug/empty.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20400000

Program Header:
    LOAD off    0x00001000 vaddr 0x20400000 paddr 0x20400000 align 2**12
         filesz 0x00000f50 memsz 0x00000f50 flags rwx
    LOAD off    0x00008000 vaddr 0x80000000 paddr 0x20406a38 align 2**12
         filesz 0x00000e58 memsz 0x00000e58 flags rw-
     TLS off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**2
         filesz 0x00000000 memsz 0x00000000 flags ---
    LOAD off    0x00000e58 vaddr 0x80000e58 paddr 0x80000e58 align 2**12
         filesz 0x00000000 memsz 0x00000ca8 flags rw-
    LOAD off    0x00000114 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---
    LOAD off    0x00001f80 vaddr 0x20400f80 paddr 0x20400f80 align 2**12
         filesz 0x00005ab6 memsz 0x00005ab6 flags r-x
    LOAD off    0x00000114 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .init             000002dc  20400000  20400000  00001000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .init_array       0000000c  204002e0  204002e0  000012e0  2**3  CONTENTS, ALLOC, LOAD, DATA
  2 .ctors            0000007a  204002ec  204002ec  000012ec  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata           00000be8  20400368  20400368  00001368  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .text             00005ab6  20400f80  20400f80  00001f80  2**7  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .data             00000e58  80000000  20406a38  00008000  2**3  CONTENTS, ALLOC, LOAD, DATA
  6 .bss              000000a4  80000e58  80000e58  00008e58  2**3  ALLOC
  7 .stack            00000400  80000f00  80000f00  00008e58  2**4  ALLOC
  8 .heap             00000800  80001300  80001300  00008e58  2**3  ALLOC
  9 .debug_info       0001ee48  00000000  00000000  00008e58  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev     00002a31  00000000  00000000  00027ca0  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges    00000b98  00000000  00000000  0002a6d8  2**3  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges     00000988  00000000  00000000  0002b270  2**3  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line       0000a93f  00000000  00000000  0002bbf8  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str        00004a1a  00000000  00000000  00036537  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .comment          00000030  00000000  00000000  0003af51  2**0  CONTENTS, READONLY
 16 .riscv.attributes 0000002f  00000000  00000000  0003af81  2**0  CONTENTS, READONLY
 17 .debug_frame      00002dd8  00000000  00000000  0003afb0  2**2  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
20400000 l    d  .init	00000000 .init
204002e0 l    d  .init_array	00000000 .init_array
204002ec l    d  .ctors	00000000 .ctors
20400368 l    d  .rodata	00000000 .rodata
20400f80 l    d  .text	00000000 .text
80000000 l    d  .data	00000000 .data
80000e58 l    d  .bss	00000000 .bss
80000f00 l    d  .stack	00000000 .stack
80001300 l    d  .heap	00000000 .heap
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 scrub.o
204000c0 l     F .init	00000000 __metal_memory_scrub
2040012e l       .init	00000000 skip_scrub
00000000 l    df *ABS*	00000000 synchronize_harts.c
00000000 l    df *ABS*	00000000 crt0.o
20400240 l       .init	00000000 _skip_init
204003dc l       .rodata	00000000 argv
204003e0 l       .rodata	00000000 envp
204003e4 l       .rodata	00000000 name
00000000 l    df *ABS*	00000000 tty.c
00000000 l    df *ABS*	00000000 sifive_fe310-g000_pll.c
20404f92 l     F .text	0000001a __metal_driver_sifive_fe310_g000_pll_pllsel0
20404fac l     F .text	0000001a __metal_driver_sifive_fe310_g000_pll_pllref
20404fc6 l     F .text	00000016 __metal_driver_sifive_fe310_g000_pll_divider_base
20404fdc l     F .text	00000014 __metal_driver_sifive_fe310_g000_pll_divider_offset
20404ff0 l     F .text	00000012 __metal_driver_sifive_fe310_g000_pll_config_base
20405002 l     F .text	00000010 __metal_driver_sifive_fe310_g000_pll_config_offset
20405012 l     F .text	00000016 __metal_driver_sifive_fe310_g000_pll_init_rate
20405028 l     F .text	00000012 __metal_driver_sifive_fe310_g000_prci_base
2040503a l     F .text	00000016 __metal_driver_sifive_fe310_g000_prci_vtable
204005e0 l     O .rodata	00000880 pll_configs
20405050 l     F .text	0000004e get_pll_config_freq
204052b2 l     F .text	000000ac find_closest_config
2040535e l     F .text	000001b0 configure_pll
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 findfp.c
204016f2 l     F .text	00000068 std
00000000 l    df *ABS*	00000000 riscv_clint0.c
204023c2 l     F .text	0000002a __metal_driver_sifive_clint0_control_base
204023ec l     F .text	00000028 __metal_driver_sifive_clint0_num_interrupts
20402414 l     F .text	0000003c __metal_driver_sifive_clint0_interrupt_parents
20402450 l     F .text	00000030 __metal_driver_sifive_clint0_interrupt_lines
204025b0 l     F .text	00000036 _get_cpu_intc
00000000 l    df *ABS*	00000000 riscv_cpu.c
20402aee l     F .text	00000024 __metal_driver_cpu_hartid
20402b12 l     F .text	0000002a __metal_driver_cpu_timebase
20402b3c l     F .text	0000002a __metal_driver_cpu_interrupt_controller
20402b66 l     F .text	00000024 __metal_driver_cpu_buserror
00000000 l    df *ABS*	00000000 riscv_plic0.c
204044ea l     F .text	0000002a __metal_driver_sifive_plic0_control_base
20404514 l     F .text	00000028 __metal_driver_sifive_plic0_num_interrupts
2040453c l     F .text	00000028 __metal_driver_sifive_plic0_max_priority
20404564 l     F .text	00000028 __metal_driver_sifive_plic0_interrupt_parents
2040458c l     F .text	00000022 __metal_driver_sifive_plic0_interrupt_lines
204045ae l     F .text	0000001e __metal_driver_sifive_plic0_context_ids
00000000 l    df *ABS*	00000000 sifive_gpio0.c
204056ec l     F .text	00000026 __metal_driver_sifive_gpio0_base
20405712 l     F .text	0000002a __metal_driver_sifive_gpio0_interrupt_parent
2040573c l     F .text	000001b4 __metal_driver_sifive_gpio0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_uart0.c
20406010 l     F .text	0000002a __metal_driver_sifive_uart0_control_base
2040603a l     F .text	0000002e __metal_driver_sifive_uart0_interrupt_parent
20406068 l     F .text	00000028 __metal_driver_sifive_uart0_interrupt_line
20406090 l     F .text	0000002e __metal_driver_sifive_uart0_clock
204060be l     F .text	0000002a __metal_driver_sifive_uart0_pinmux
204060e8 l     F .text	00000028 __metal_driver_sifive_uart0_pinmux_output_selector
20406110 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_source_selector
204064d0 l     F .text	000000da pre_rate_change_callback_func
204065aa l     F .text	00000030 post_rate_change_callback_func
00000000 l    df *ABS*	00000000 impure.c
80000690 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 sifive_fe310-g000_hfrosc.c
20404da2 l     F .text	0000001a __metal_driver_sifive_fe310_g000_hfrosc_ref
20404dbc l     F .text	00000016 __metal_driver_sifive_fe310_g000_hfrosc_config_base
20404dd2 l     F .text	00000014 __metal_driver_sifive_fe310_g000_hfrosc_config_offset
20404de6 l     F .text	00000016 __metal_driver_sifive_fe310_g000_prci_vtable
00000000 l    df *ABS*	00000000 sifive_fe310-g000_hfxosc.c
20404ea2 l     F .text	0000001a __metal_driver_sifive_fe310_g000_hfxosc_ref
20404ebc l     F .text	00000016 __metal_driver_sifive_fe310_g000_hfxosc_config_base
20404ed2 l     F .text	00000014 __metal_driver_sifive_fe310_g000_hfxosc_config_offset
20404ee6 l     F .text	00000016 __metal_driver_sifive_fe310_g000_prci_vtable
00000000 l    df *ABS*	00000000 sifive_fe310-g000_prci.c
20405674 l     F .text	00000012 __metal_driver_sifive_fe310_g000_prci_base
00000000 l    df *ABS*	00000000 sifive_test0.c
20405fa0 l     F .text	00000026 __metal_driver_sifive_test0_base
00000000 l    df *ABS*	00000000 fixed-clock.c
20406980 l     F .text	00000062 __metal_driver_fixed_clock_rate
00000000 l    df *ABS*	00000000 /var/folders/9x/yg8zr0vn2s7c1p5s66rfgmwc0000gn/T//ccEECPAw.o
80000000 l       .data	00000000 sbox_lut
80000010 l       .data	00000000 sp_3
80000110 l       .data	00000000 sp_2
80000210 l       .data	00000000 sp_1
80000310 l       .data	00000000 sp_0
80000410 l       .data	00000000 key_1
80000550 l       .data	00000000 key_2
20400fcc l       .text	00000000 for_loop
20401236 l       .text	00000000 done
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 sys_close.c
00000000 l    df *ABS*	00000000 sys_fstat.c
00000000 l    df *ABS*	00000000 sys_isatty.c
00000000 l    df *ABS*	00000000 sys_lseek.c
00000000 l    df *ABS*	00000000 sys_read.c
00000000 l    df *ABS*	00000000 sys_sbrk.c
80000e34 l     O .data	00000004 __brk
00000000 l    df *ABS*	00000000 sys_write.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 __atexit.c
80000e70 l     O .bss	0000008c _global_atexit0
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 init.c
80000e68 l     O .bss	00000004 init_done.1
80000e6c l     O .bss	00000004 fini_done.0
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 cpu.c
00000000 l    df *ABS*	00000000 shutdown.c
00000000 l    df *ABS*	00000000 vector.o
20406900 l       .text	00000000 IRQ_0
20406904 l       .text	00000000 IRQ_1
20406908 l       .text	00000000 IRQ_2
2040690c l       .text	00000000 IRQ_3
20406910 l       .text	00000000 IRQ_4
20406914 l       .text	00000000 IRQ_5
20406918 l       .text	00000000 IRQ_6
2040691c l       .text	00000000 IRQ_7
20406920 l       .text	00000000 IRQ_8
20406924 l       .text	00000000 IRQ_9
20406928 l       .text	00000000 IRQ_10
2040692c l       .text	00000000 IRQ_11
20406930 l       .text	00000000 IRQ_12
20406934 l       .text	00000000 IRQ_13
20406938 l       .text	00000000 IRQ_14
2040693c l       .text	00000000 IRQ_15
20406940 l       .text	00000000 IRQ_LC0
20406944 l       .text	00000000 IRQ_LC1
20406948 l       .text	00000000 IRQ_LC2
2040694c l       .text	00000000 IRQ_LC3
20406950 l       .text	00000000 IRQ_LC4
20406954 l       .text	00000000 IRQ_LC5
20406958 l       .text	00000000 IRQ_LC6
2040695c l       .text	00000000 IRQ_LC7
20406960 l       .text	00000000 IRQ_LC8
20406964 l       .text	00000000 IRQ_LC9
20406968 l       .text	00000000 IRQ_LC10
2040696c l       .text	00000000 IRQ_LC11
20406970 l       .text	00000000 IRQ_LC12
20406974 l       .text	00000000 IRQ_LC13
20406978 l       .text	00000000 IRQ_LC14
2040697c l       .text	00000000 IRQ_LC15
00000000 l    df *ABS*	00000000 sys_exit.c
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 
204002ec l       .init_array	00000000 metal_constructors_end
204002f0 l       .init_array	00000000 __fini_array_end
204002f0 l       .init_array	00000000 metal_destructors_end
204002f0 l       .init_array	00000000 metal_destructors_start
204002f0 l       .init_array	00000000 __fini_array_start
204002e0 l       .init_array	00000000 __init_array_end
204002e0 l       .init_array	00000000 __preinit_array_end
204002e0 l       .init_array	00000000 __init_array_start
204002e0 l       .init_array	00000000 metal_constructors_start
204002e0 l       .init_array	00000000 __preinit_array_start
20400ee8 g     O .rodata	00000040 __metal_driver_vtable_sifive_uart0
20401da8 g     F .text	0000002e _isatty_r
204033d0  w    F .text	00000096 metal_lc4_interrupt_vector_handler
20401298 g     F .text	000000da _puts_r
20401dd6 g     F .text	00000032 _lseek_r
20406742 g     F .text	00000026 metal_clock_get_rate_hz
20406430 g     F .text	000000a0 __metal_driver_sifive_uart0_set_baud_rate
2040278c g     F .text	00000058 __metal_driver_riscv_clint0_set_vector_mode
20406286 g     F .text	0000004a __metal_driver_sifive_uart0_set_tx_watermark
2040333a  w    F .text	00000096 metal_lc3_interrupt_vector_handler
20403be2 g     F .text	00000058 __metal_valid_interrupt_id
204002e8 g     O .init_array	00000004 _use_hfxosc_ptr
2040405a g     F .text	0000001c __metal_driver_riscv_cpu_controller_get_vector_mode
80001630 g       .data	00000000 __global_pointer$
204002ec g     F .ctors	00000024 metal_tty_init
204066ee g     F .text	00000054 _metal_clock_append_to_callbacks
20404608 g     F .text	00000046 __metal_plic0_complete_interrupt
20403e26 g     F .text	000001e0 __metal_driver_riscv_cpu_controller_interrupt_register
204002e4 g     O .init_array	00000004 _metal_sifive_fe310_g000_pll_init_ptr
20401cdc g     F .text	00000036 __sseek
204017a8 g     F .text	0000006a __sinit
2040137e g     F .text	000000c0 __swbuf_r
80000e58 g       .data	00000000 __tls_base
20401764 g     F .text	00000044 __sfmoreglue
20401e0a g     F .text	00000002 __malloc_unlock
20406836 g     F .text	0000002e metal_cpu_get
80000de8 g     O .data	00000020 __metal_dt_serial_10013000
20405b7a g     F .text	0000004a __metal_driver_sifive_gpio0_disable_io
204003f0 g     O .rodata	00000064 __metal_driver_vtable_riscv_clint0
80000efc g       .bss	00000000 metal_segment_bss_target_end
20402480 g     F .text	0000009a __metal_clint0_mtime_get
2040445e g     F .text	0000002e __metal_driver_cpu_get_instruction_length
00000001 g       *ABS*	00000000 __metal_chicken_bit
2040634a g     F .text	00000030 __metal_driver_sifive_uart0_get_rx_watermark
20405930 g     F .text	00000046 __metal_driver_sifive_gpio0_disable_input
20405fc6 g     F .text	0000004a __metal_driver_sifive_test0_exit
20401ff0 g     F .text	0000000a __errno
80000000 g       .rodata	00000000 metal_segment_itim_target_start
20406256 g     F .text	00000030 __metal_driver_sifive_uart0_txready
204061e4 g     F .text	0000003a __metal_driver_sifive_uart0_rx_interrupt_enable
20400142 g     F .init	0000000e __metal_synchronize_harts
80000e58 g       .data	00000000 metal_segment_bss_target_start
2040251a g     F .text	00000096 __metal_driver_riscv_clint0_mtimecmp_set
20401d78 g     F .text	00000030 _fstat_r
20405dca g     F .text	00000188 __metal_driver_sifive_gpio0_clear_int
80000e60 g     O .bss	00000004 errno
20405142 g     F .text	00000170 __metal_driver_sifive_fe310_g000_pll_get_rate_hz
00000400 g       *ABS*	00000000 __stack_size
204067b0 g     F .text	00000030 metal_clock_register_pre_rate_change_callback
204036be  w    F .text	00000096 metal_lc9_interrupt_vector_handler
204000cc  w    F .init	00000000 __metal_before_start
204022ec  w    F .text	00000014 metal_init_run
20400fa0 g       .text	00000000 present
2040057c g     O .rodata	00000064 __metal_driver_vtable_riscv_plic0
20400538 g     O .rodata	00000044 __metal_driver_vtable_cpu
20402394 g     F .text	0000002e metal_uart_set_baud_rate
204065da g     F .text	000000d2 __metal_driver_sifive_uart0_init
00000000 g       *ABS*	00000000 __metal_eccscrub_bit
204040e6 g     F .text	00000070 __metal_driver_cpu_mcycle_get
20400e60 g     O .rodata	0000000c __metal_driver_vtable_sifive_fe310_g000_pll
80001300 g       .heap	00000000 metal_segment_heap_target_start
2040175a g     F .text	0000000a _cleanup_r
80000e44 g     O .data	00000008 __metal_dt_cpu_0
20403628  w    F .text	00000096 metal_lc8_interrupt_vector_handler
2040550e g     F .text	00000166 __metal_driver_sifive_fe310_g000_pll_set_rate_hz
20404d06 g     F .text	00000074 __metal_driver_riscv_plic0_affinity_set_threshold
20401372 g     F .text	0000000c puts
20403916  w    F .text	00000096 metal_lc13_interrupt_vector_handler
20402cf8 g     F .text	00000018 __metal_default_exception_handler
20401e60 g     F .text	00000026 _fstat
20402aba g     F .text	00000034 __metal_driver_riscv_clint0_set_interrupt
20404076 g     F .text	00000054 __metal_driver_riscv_cpu_controller_set_vector_mode
20402b8a g     F .text	00000030 __metal_driver_cpu_get
204004d4 g     O .rodata	00000064 __metal_driver_vtable_riscv_cpu_intc
20402bec g     F .text	00000018 __metal_interrupt_global_disable
20404d7a g     F .text	00000028 __metal_driver_riscv_plic0_affinity_get_threshold
20403592  w    F .text	00000096 metal_lc7_interrupt_vector_handler
20403754  w    F .text	00000096 metal_lc10_interrupt_vector_handler
20401c30 g     F .text	0000002e _sbrk_r
20404b26 g     F .text	00000050 __metal_driver_riscv_plic0_disable
20403cf6 g     F .text	0000004e __metal_exception_register
204021fc g     F .text	00000078 metal_init
20401e0c g     F .text	00000032 _read_r
20404278 g     F .text	0000001a __metal_driver_cpu_timer_controller_interrupt
20405a12 g     F .text	00000040 __metal_driver_sifive_gpio0_enable_output
80000000 g       .rodata	00000000 metal_segment_lim_target_end
20402de8 g     F .text	00000068 __metal_default_sw_handler
204067e0 g     F .text	00000030 metal_clock_register_post_rate_change_callback
800006fc g     O .data	0000000c __metal_dt_clock_2
2040613a g     F .text	0000001e __metal_driver_sifive_uart0_interrupt_controller
20401e86 g     F .text	00000020 _isatty
20405ad8 g     F .text	00000040 __metal_driver_sifive_gpio0_output_toggle
20406176 g     F .text	00000038 __metal_driver_sifive_uart0_tx_interrupt_enable
20400f48 g     O .rodata	00000008 __metal_driver_vtable_fixed_clock
20400f28 g     O .rodata	00000004 _global_impure_ptr
20402e50  w    F .text	00000092 metal_timer_interrupt_vector_handler
2040205a g     F .text	0000005e __libc_init_array
20405a52 g     F .text	00000040 __metal_driver_sifive_gpio0_output_set
204037ea  w    F .text	00000096 metal_lc11_interrupt_vector_handler
20404f70 g     F .text	00000022 __metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz
20404006 g     F .text	0000002a __metal_driver_riscv_cpu_controller_interrupt_enable
20401efa g     F .text	0000007e _sbrk
204059cc g     F .text	00000046 __metal_driver_sifive_gpio0_disable_output
204066ac g     F .text	00000042 _metal_clock_call_all_callbacks
204002ba g     F .init	00000002 _init
20402c4e g     F .text	0000001a __metal_interrupt_timer_disable
20405bc4 g     F .text	00000206 __metal_driver_sifive_gpio0_config_int
20404336 g     F .text	00000062 __metal_driver_cpu_clear_sw_ipi
20400eac g     O .rodata	0000003c __metal_driver_vtable_sifive_gpio0
204061ae g     F .text	00000036 __metal_driver_sifive_uart0_tx_interrupt_disable
20405b18 g     F .text	00000062 __metal_driver_sifive_gpio0_enable_io
20402024 g     F .text	00000036 __libc_fini_array
80000e20 g     O .data	0000000c __metal_dt_clock_4
20405f52 g     F .text	00000020 __metal_driver_gpio_interrupt_controller
20402274 g     F .text	00000078 metal_fini
204042c0 g     F .text	00000014 __metal_driver_cpu_get_sw_interrupt_id
204044ca g     F .text	00000020 __metal_driver_cpu_get_buserror
80000000 g       .data	00000000 metal_segment_data_target_start
20402ca0 g     F .text	0000002c __metal_interrupt_local_enable
20402a86 g     F .text	00000034 __metal_driver_riscv_clint0_clear_interrupt
20402314 g     F .text	00000026 metal_tty_putc
20404806 g     F .text	00000018 __metal_plic0_default_handler
20401f78  w    F .text	0000006e write
00000000 g       *ABS*	00000000 __tbss_size
800006f0 g     O .data	0000000c __metal_dt_clock_0
00000800 g       *ABS*	00000000 __heap_size
20404b76 g     F .text	00000030 __metal_driver_riscv_plic0_set_threshold
20402ee2 g     F .text	00000016 __metal_default_beu_handler
2040037c g     O .rodata	00000020 __sf_fake_stderr
20402c84 g     F .text	0000001c __metal_interrupt_external_disable
20406158 g     F .text	0000001e __metal_driver_sifive_uart0_get_interrupt_id
204040ca g     F .text	0000001c __metal_driver_riscv_cpu_controller_command_request
20403d44 g     F .text	000000e2 __metal_driver_riscv_cpu_controller_interrupt_init
20404418 g     F .text	00000046 __metal_driver_cpu_exception_register
20402c04 g     F .text	00000018 __metal_interrupt_software_enable
2040320e  w    F .text	00000096 metal_lc1_interrupt_vector_handler
20401ab6 g     F .text	000000a2 _free_r
80000e64 g     O .bss	00000004 _global_atexit
204046ce g     F .text	00000062 __metal_driver_riscv_plic0_set_priority
20403ad8 g     F .text	00000058 __metal_controller_interrupt_vector_mode
20402134 g     F .text	000000c8 __call_exitprocs
80001300 g       .stack	00000000 _sp
204002e0 g     O .init_array	00000004 _metal_tty_init_ptr
20400150 g     F .init	00000000 _start
20404dfc g     F .text	00000084 __metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz
20401ea6 g     F .text	0000002a _lseek
204043f8 g     F .text	00000020 __metal_driver_cpu_controller_interrupt
2040448c g     F .text	0000001e __metal_driver_cpu_get_exception_pc
20402c68 g     F .text	0000001c __metal_interrupt_external_enable
204020b8 g     F .text	0000007c __register_exitproc
2040637a g     F .text	00000040 __metal_driver_sifive_uart0_putc
204048c2 g     F .text	00000152 __metal_driver_riscv_plic0_init
20404ad6 g     F .text	00000050 __metal_driver_riscv_plic0_enable
204059a0 g     F .text	0000002c __metal_driver_sifive_gpio0_output
204034fc  w    F .text	00000096 metal_lc6_interrupt_vector_handler
20402bba g     F .text	0000001a __metal_myhart_id
20405f72 g     F .text	0000002e __metal_driver_gpio_get_interrupt_id
20402d56  w    F .text	00000092 metal_software_interrupt_vector_handler
20404030 g     F .text	0000002a __metal_driver_riscv_cpu_controller_interrupt_disable
20401d4a g     F .text	0000002e _close_r
20406410 g     F .text	00000020 __metal_driver_sifive_uart0_get_baud_rate
2040266e g     F .text	000000da __metal_driver_riscv_clint0_register
80000e3c g     O .data	00000008 __metal_dt_clint_2000000
2040143e g     F .text	0000010a __swsetup_r
20401812 g     F .text	0000009c __sfp
20406768 g     F .text	00000048 metal_clock_set_rate_hz
20401c5e g     F .text	00000030 __sread
204058f0 g     F .text	00000040 __metal_driver_sifive_gpio0_enable_input
204002bc  w    F .init	00000000 secondary_main
20402d28  w    F .text	0000002e metal_interrupt_vector_handler
20401e08 g     F .text	00000002 __malloc_lock
2040621e g     F .text	00000038 __metal_driver_sifive_uart0_rx_interrupt_disable
2040168e g     F .text	00000064 _fflush_r
20404694 g     F .text	0000003a __metal_plic0_get_threshold
20405686 g     F .text	0000002e __metal_driver_sifive_fe310_g000_prci_get_reg
2040039c g     O .rodata	00000020 __sf_fake_stdin
20403c3a g     F .text	000000bc __metal_local_interrupt_enable
20402948 g     F .text	0000013e __metal_driver_riscv_clint0_command_request
20401a0e g     F .text	000000a8 memset
20403466  w    F .text	00000096 metal_lc5_interrupt_vector_handler
20400f80 g     F .text	00000020 main
80000e58 g       .data	00000000 metal_segment_data_target_end
20406300 g     F .text	0000004a __metal_driver_sifive_uart0_set_rx_watermark
20400f2c g     O .rodata	00000008 __metal_driver_vtable_sifive_fe310_g000_hfrosc
204042d4 g     F .text	00000062 __metal_driver_cpu_set_sw_ipi
20404398 g     F .text	00000060 __metal_driver_cpu_get_msip
204068a0 g     F .text	00000016 metal_shutdown
80000000 g       .rodata	00000000 metal_segment_itim_target_end
204044aa g     F .text	00000020 __metal_driver_cpu_set_exception_pc
204045cc g     F .text	0000003c __metal_plic0_claim_interrupt
204062d0 g     F .text	00000030 __metal_driver_sifive_uart0_get_tx_watermark
20401d12 g     F .text	00000006 __sclose
20403880  w    F .text	00000096 metal_lc12_interrupt_vector_handler
2040008a g     F .init	00000000 metal_mem_scrub
20401b58 g     F .text	000000d8 _malloc_r
20402770 g     F .text	0000001c __metal_driver_riscv_clint0_get_vector_mode
80000e54 g     O .data	00000004 __metal_dt_prci_10008000
20404156 g     F .text	00000046 __metal_driver_cpu_timebase_get
20404c6a g     F .text	0000009c __metal_driver_riscv_plic0_affinity_disable
20400000 g       .init	00000000 _enter
20406864 g     F .text	0000001a metal_cpu_get_current_hartid
20404efc g     F .text	00000074 __metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz
20406900 g       .text	00000000 __metal_vector_table
20400f50 g       *ABS*	00000000 metal_segment_itim_source_start
80000e38  w    O .data	00000004 __metal_cpu_table
80000718 g     O .data	000003d0 __metal_dt_cpu_0_interrupt_controller
204002ba g     F .init	00000002 _fini
80000000 g       .rodata	00000000 metal_segment_lim_target_start
20404730 g     F .text	00000034 __metal_driver_riscv_plic0_get_priority
2040033c g     F .ctors	0000002a use_hfxosc
20402bd4 g     F .text	00000018 __metal_interrupt_global_enable
20401fe6 g     F .text	0000000a atexit
20401d18 g     F .text	00000032 _write_r
20402c34 g     F .text	0000001a __metal_interrupt_timer_enable
204063ba g     F .text	00000056 __metal_driver_sifive_uart0_getc
20402896 g     F .text	000000b2 __metal_driver_riscv_clint0_disable
80000e30 g     O .data	00000004 _impure_ptr
20404202 g     F .text	00000076 __metal_driver_cpu_mtimecmp_set
20401548 g     F .text	00000146 __sflush_r
2040687e g     F .text	00000022 __metal_shutdown_exit
20404ba6 g     F .text	00000028 __metal_driver_riscv_plic0_get_threshold
2040509e g     F .text	000000a4 __metal_driver_sifive_fe310_g000_pll_init
80000708 g     O .data	0000000c __metal_dt_clock_5
204056b4 g     F .text	00000038 __metal_driver_sifive_fe310_g000_prci_set_reg
204069e2 g     F .text	0000001e __metal_driver_fixed_clock_get_rate_hz
204027e4 g     F .text	000000b2 __metal_driver_riscv_clint0_enable
20400f44 g     O .rodata	00000004 __metal_driver_vtable_sifive_test0
20406a38 g       *ABS*	00000000 metal_segment_data_source_start
20400134 g       .init	00000000 early_trap_vector
80001b00 g       .heap	00000000 metal_segment_heap_target_end
20403b30 g     F .text	000000b2 __metal_controller_interrupt_vector
80000e14 g     O .data	0000000c __metal_dt_clock_1
80000ae8 g     O .data	00000300 __metal_dt_interrupt_controller_c000000
20401918 g     F .text	0000005a __swhatbuf_r
20405a92 g     F .text	00000046 __metal_driver_sifive_gpio0_output_clear
20402ef8 g     F .text	00000066 __metal_default_timer_handler
20401f78 g     F .text	0000006e _write
2040481e g     F .text	000000a4 __metal_plic0_handler
204032a4  w    F .text	00000096 metal_lc2_interrupt_vector_handler
20403a42  w    F .text	00000096 metal_lc15_interrupt_vector_handler
20406810 g     F .text	00000026 metal_cpu_interrupt_controller
80000e50 g     O .data	00000004 __metal_dt_test_100000
20401c8e g     F .text	0000004e __swrite
20401ffa g     F .text	0000002a exit
204018ae g     F .text	0000006a _fwalk_reent
20406a00 g     F .text	00000022 __metal_driver_fixed_clock_set_rate_hz
20400f50 g       *ABS*	00000000 metal_segment_lim_source_start
204003bc g     O .rodata	00000020 __sf_fake_stdout
80000e4c g     O .data	00000004 __metal_dt_gpio_10012000
20402d10 g     F .text	00000018 __metal_default_interrupt_handler
20402366 g     F .text	0000002e metal_uart_putc
20401ed0 g     F .text	0000002a _read
20402300  w    F .text	00000014 metal_fini_run
20405976 g     F .text	0000002a __metal_driver_sifive_gpio0_input
20402f80 g     F .text	0000017e __metal_exception_handler
20403178  w    F .text	00000096 metal_lc0_interrupt_vector_handler
20406a22 g     F .text	00000014 _exit
2040419c g     F .text	00000066 __metal_driver_cpu_mtime_get
20401972 g     F .text	0000009c __smakebuf_r
20402748 g     F .text	00000028 __metal_driver_riscv_clint0_vector_register
80000e5c g     O .bss	00000004 __malloc_sbrk_start
204039ac  w    F .text	00000096 metal_lc14_interrupt_vector_handler
20400f34 g     O .rodata	00000008 __metal_driver_vtable_sifive_fe310_g000_hfxosc
204025e6 g     F .text	00000088 __metal_driver_riscv_clint0_init
80000e58 g     O .bss	00000004 __malloc_free_list
20400310 g     F .ctors	0000002c metal_sifive_fe310_g000_pll_init
20404292 g     F .text	00000014 __metal_driver_cpu_get_timer_interrupt_id
20404764 g     F .text	000000a2 __metal_plic0_enable
20400088  w      .init	00000000 __register_frame_info
20404e80 g     F .text	00000022 __metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz
204042a6 g     F .text	0000001a __metal_driver_cpu_sw_controller_interrupt
20402ccc g     F .text	0000002c __metal_interrupt_local_disable
20402c1c g     F .text	00000018 __metal_interrupt_software_disable
2040233a g     F .text	0000002c metal_uart_init
80000e08 g     O .data	0000000c __metal_dt_clock_3
2040464e g     F .text	00000046 __metal_plic0_set_threshold
20404bce g     F .text	0000009c __metal_driver_riscv_plic0_affinity_enable
20401e3e g     F .text	00000022 _close
20400f3c g     O .rodata	00000008 __metal_driver_vtable_sifive_fe310_g000_prci
00000000 g       *ABS*	00000000 __metal_boot_hart
20404a14 g     F .text	000000c2 __metal_driver_riscv_plic0_register



Disassembly of section .init:

20400000 <_enter>:
_enter():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/entry.S:24
     * it's not valid to obtain the address of any symbol without GP
     * configured.  The C environment might go ahead and do this again, but
     * that's safe as it's a fixed register. */
.option push
.option norelax
    la gp, __global_pointer$
20400000:	5fc01197          	auipc	gp,0x5fc01
20400004:	63018193          	addi	gp,gp,1584 # 80001630 <__global_pointer$>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/entry.S:28
.option pop

    /* trap over the chicken bit register clearing, aloe & fe310 dont have it */
    la t0, 1f
20400008:	00000297          	auipc	t0,0x0
2040000c:	01828293          	addi	t0,t0,24 # 20400020 <_enter+0x20>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/entry.S:29
    csrw mtvec, t0
20400010:	30529073          	csrw	mtvec,t0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/entry.S:31
    /* chicken bit is enable if core are sifive series. */
    la t0, __metal_chicken_bit
20400014:	00100293          	li	t0,1
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/entry.S:32
    beqz t0, 1f
20400018:	00028463          	beqz	t0,20400020 <_enter+0x20>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/entry.S:34
    /* If set, always clear the feature disable register for all cores series */
    csrwi 0x7C1, 0
2040001c:	7c105073          	csrwi	0x7c1,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/entry.S:39
.align 4
1:
    /* Set up a simple trap vector to catch anything that goes wrong early in
     * the boot process. */
    la t0, early_trap_vector
20400020:	00000297          	auipc	t0,0x0
20400024:	11428293          	addi	t0,t0,276 # 20400134 <early_trap_vector>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/entry.S:40
    csrw mtvec, t0
20400028:	30529073          	csrw	mtvec,t0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/entry.S:48
     * C, so here we set up a C environment. First we set up a stack pointer,
     * which is left as a weak reference in order to allow initialization
     * routines that do not need a stack to be set up to transparently be
     * called. */
    .weak __metal_stack_pointer
    la sp, __metal_stack_pointer
2040002c:	00000113          	li	sp,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/entry.S:55
   /* The METAL is designed for a bare-metal environment and therefore is expected
    * to define its own stack pointer. We also align the stack pointer here
    * because the only RISC-V ABI that's currently defined, mandates 16-byte
    * stack alignment. */

    bne sp, zero, 1f
20400030:	00011463          	bnez	sp,20400038 <_enter+0x38>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/entry.S:56
    la sp, _sp
20400034:	cd018113          	addi	sp,gp,-816 # 80001300 <_sp>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/entry.S:59
1:
    /* Increment by hartid number of stack sizes */
    csrr a0, mhartid
20400038:	f1402573          	csrr	a0,mhartid
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/entry.S:60
    li t0, 0
2040003c:	4281                	li	t0,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/entry.S:61
    la t1, __stack_size
2040003e:	40000313          	li	t1,1024
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/entry.S:63
1:
    andi sp, sp, -16
20400042:	ff017113          	andi	sp,sp,-16
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/entry.S:64
    beq t0, a0, 1f
20400046:	00a28563          	beq	t0,a0,20400050 <_enter+0x50>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/entry.S:65
    add sp, sp, t1
2040004a:	911a                	add	sp,sp,t1
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/entry.S:66
    addi t0, t0, 1
2040004c:	0285                	addi	t0,t0,1
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/entry.S:67
    j 1b
2040004e:	bfd5                	j	20400042 <_enter+0x42>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/entry.S:76
     * just skip over the call entirely.   Note that __metal_initialize isn't
     * actually a full C function, as it doesn't end up with the .bss or .data
     * segments having been initialized.  This is done to avoid putting a
     * burden on systems that can be initialized without having a C environment
     * set up. */
    la ra, __metal_before_start
20400050:	00000097          	auipc	ra,0x0
20400054:	07c08093          	addi	ra,ra,124 # 204000cc <__metal_before_start>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/entry.S:77
    beqz ra, 1f
20400058:	00008363          	beqz	ra,2040005e <_enter+0x5e>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/entry.S:78
    jalr ra
2040005c:	9082                	jalr	ra
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/entry.S:84
1:

    /* At this point we can enter the C runtime's startup file.  The arguments
     * to this function are designed to match those provided to the SEE, just
     * so we don't have to write another ABI. */
    csrr a0, mhartid
2040005e:	f1402573          	csrr	a0,mhartid
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/entry.S:85
    li a1, 0
20400062:	4581                	li	a1,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/entry.S:86
    li a2, 0
20400064:	4601                	li	a2,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/entry.S:87
    call _start
20400066:	20ed                	jal	20400150 <_start>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/entry.S:92

    /* If we've made it back here then there's probably something wrong.  We
     * allow the METAL to register a handler here. */
    .weak __metal_after_main
    la ra, __metal_after_main
20400068:	00000093          	li	ra,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/entry.S:93
    beqz ra, 1f
2040006c:	00008363          	beqz	ra,20400072 <_enter+0x72>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/entry.S:94
    jalr ra
20400070:	9082                	jalr	ra
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/entry.S:99
1:

    /* If that handler returns then there's not a whole lot we can do.  Just
     * try to make some noise. */
     la t0, 1f
20400072:	00000297          	auipc	t0,0x0
20400076:	00c28293          	addi	t0,t0,12 # 2040007e <_enter+0x7e>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/entry.S:100
     csrw mtvec, t0
2040007a:	30529073          	csrw	mtvec,t0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/entry.S:102
1:
     lw t1, 0(x0)
2040007e:	00002303          	lw	t1,0(zero) # 0 <__metal_boot_hart>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/entry.S:103
     j 1b
20400082:	bff5                	j	2040007e <_enter+0x7e>
20400084:	0000                	unimp
	...

20400088 <__register_frame_info>:
__register_frame_info():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/entry.S:117
.weak __register_frame_info
.global __register_frame_info
.section .text.metal.init.__register_frame_info
__register_frame_info:
    .cfi_startproc
    ret
20400088:	8082                	ret

2040008a <metal_mem_scrub>:
metal_mem_scrub():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:24
.type metal_mem_scrub, @function
metal_mem_scrub:

    /* Disable machine interrupts,
    restore previous mstatus value at exit */
    li      a3, 8
2040008a:	46a1                	li	a3,8
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:25
    csrrc   t1, mstatus, a3
2040008c:	3006b373          	csrrc	t1,mstatus,a3
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:28

#if __riscv_xlen == 32
    addi    t0, x0, 4
20400090:	4291                	li	t0,4
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:30
1:
    blt     a1, t0, 2f
20400092:	0055c563          	blt	a1,t0,2040009c <metal_mem_scrub+0x12>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:31
    andi    a2, a0, 3
20400096:	00357613          	andi	a2,a0,3
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:32
    beqz    a2, 3f
2040009a:	ca11                	beqz	a2,204000ae <metal_mem_scrub+0x24>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:34
2:
    sb      x0, 0(a0)
2040009c:	00050023          	sb	zero,0(a0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:35
    addi    a0, a0, 1
204000a0:	0505                	addi	a0,a0,1
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:36
    addi    a1, a1, -1
204000a2:	15fd                	addi	a1,a1,-1
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:37
    bgtz    a1, 1b
204000a4:	feb047e3          	bgtz	a1,20400092 <metal_mem_scrub+0x8>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:38
    csrw    mstatus, t1
204000a8:	30031073          	csrw	mstatus,t1
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:39
    ret
204000ac:	8082                	ret
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:41
3:
    sw      x0, 0(a0)
204000ae:	00052023          	sw	zero,0(a0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:42
    addi    a0, a0, 4
204000b2:	0511                	addi	a0,a0,4
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:43
    addi    a1, a1, -4
204000b4:	15f1                	addi	a1,a1,-4
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:44
    bgtz    a1, 1b
204000b6:	fcb04ee3          	bgtz	a1,20400092 <metal_mem_scrub+0x8>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:45
    csrw    mstatus, t1
204000ba:	30031073          	csrw	mstatus,t1
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:46
    ret
204000be:	8082                	ret

204000c0 <__metal_memory_scrub>:
__metal_memory_scrub():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:74
.type __metal_memory_scrub, @function
__metal_memory_scrub:
/* Zero out specified memory regions */
1:
#if __riscv_xlen == 32
    sw      x0, 0(t1)
204000c0:	00032023          	sw	zero,0(t1)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:75
    addi    t1, t1, 4
204000c4:	0311                	addi	t1,t1,4
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:76
    blt     t1, t2, 1b
204000c6:	fe734de3          	blt	t1,t2,204000c0 <__metal_memory_scrub>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:82
#else
    sd      x0, 0(t1)
    addi    t1, t1, 8
    blt     t1, t2, 1b
#endif
    ret
204000ca:	8082                	ret

204000cc <__metal_before_start>:
__metal_before_start():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:94
.weak __metal_before_start
.global __metal_before_start
.type __metal_before_start, @function
__metal_before_start:
    /* Save caller ra */
    mv      s0, ra
204000cc:	8406                	mv	s0,ra
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:96

    la      t0, __metal_eccscrub_bit
204000ce:	dfc00297          	auipc	t0,0xdfc00
204000d2:	f3228293          	addi	t0,t0,-206 # 0 <__metal_boot_hart>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:97
    beqz    t0, skip_scrub
204000d6:	04028c63          	beqz	t0,2040012e <skip_scrub>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:99

    la      t0, __metal_boot_hart
204000da:	dfc00297          	auipc	t0,0xdfc00
204000de:	f2628293          	addi	t0,t0,-218 # 0 <__metal_boot_hart>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:100
    csrr    a5, mhartid
204000e2:	f14027f3          	csrr	a5,mhartid
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:103

    /* Disable machine interrupts to be safe */
    li      a3, 8
204000e6:	46a1                	li	a3,8
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:104
    csrc    mstatus, a3
204000e8:	3006b073          	csrc	mstatus,a3
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:107

    /* Zero out per hart stack */
    mv      t1, sp
204000ec:	830a                	mv	t1,sp
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:108
    la      t2, __stack_size
204000ee:	dfc00397          	auipc	t2,0xdfc00
204000f2:	31238393          	addi	t2,t2,786 # 400 <__stack_size>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:109
    add     t2, t2, sp
204000f6:	938a                	add	t2,t2,sp
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:110
    beq     t1, t2, 1f
204000f8:	00730363          	beq	t1,t2,204000fe <__metal_before_start+0x32>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:111
    jal     __metal_memory_scrub
204000fc:	37d1                	jal	204000c0 <__metal_memory_scrub>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:113
1:
    bne     a5, t0, skip_scrub
204000fe:	02579863          	bne	a5,t0,2040012e <skip_scrub>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:116

    /* Zero out data segment */
    la      t1, metal_segment_data_target_start
20400102:	5fc00317          	auipc	t1,0x5fc00
20400106:	efe30313          	addi	t1,t1,-258 # 80000000 <metal_segment_data_target_start>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:117
    la      t2, metal_segment_data_target_end
2040010a:	5fc01397          	auipc	t2,0x5fc01
2040010e:	d4e38393          	addi	t2,t2,-690 # 80000e58 <__malloc_free_list>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:118
    beq     t1, t2, 1f
20400112:	00730363          	beq	t1,t2,20400118 <__metal_before_start+0x4c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:119
    jal     __metal_memory_scrub
20400116:	376d                	jal	204000c0 <__metal_memory_scrub>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:122
1:
    /* Zero out itim memory */
    la      t1, metal_segment_itim_target_start
20400118:	5fc00317          	auipc	t1,0x5fc00
2040011c:	ee830313          	addi	t1,t1,-280 # 80000000 <metal_segment_data_target_start>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:123
    la      t2, metal_segment_itim_target_end
20400120:	5fc00397          	auipc	t2,0x5fc00
20400124:	ee038393          	addi	t2,t2,-288 # 80000000 <metal_segment_data_target_start>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:124
    beq     t1, t2, skip_scrub
20400128:	00730363          	beq	t1,t2,2040012e <skip_scrub>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:125
    jal     __metal_memory_scrub
2040012c:	3f51                	jal	204000c0 <__metal_memory_scrub>

2040012e <skip_scrub>:
skip_scrub():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:129

skip_scrub:
    /* Restore caller ra */
    mv      ra, s0
2040012e:	80a2                	mv	ra,s0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/scrub.S:130
    ret
20400130:	8082                	ret
	...

20400134 <early_trap_vector>:
early_trap_vector():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/trap.S:64
.section .text.metal.init.trapvec
.global early_trap_vector
.align 2
early_trap_vector:
    .cfi_startproc
    csrr t0, mcause
20400134:	342022f3          	csrr	t0,mcause
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/trap.S:65
    csrr t1, mepc
20400138:	34102373          	csrr	t1,mepc
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/trap.S:66
    csrr t2, mtval
2040013c:	343023f3          	csrr	t2,mtval
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/trap.S:67
    j early_trap_vector
20400140:	bfd5                	j	20400134 <early_trap_vector>

20400142 <__metal_synchronize_harts>:
__metal_synchronize_harts():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/synchronize_harts.c:19
/*
 * _synchronize_harts() is called by crt0.S to cause harts > 0 to wait for
 * hart 0 to finish copying the datat section, zeroing the BSS, and running
 * the libc contstructors.
 */
__attribute__((section(".init"))) void __metal_synchronize_harts() {
20400142:	1141                	addi	sp,sp,-16
20400144:	c622                	sw	s0,12(sp)
20400146:	0800                	addi	s0,sp,16
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/synchronize_harts.c:66
        while (METAL_MSIP(msip_base, hart) == 1)
            ;
    }

#endif /* __METAL_DT_MAX_HARTS > 1 */
}
20400148:	0001                	nop
2040014a:	4432                	lw	s0,12(sp)
2040014c:	0141                	addi	sp,sp,16
2040014e:	8082                	ret

20400150 <_start>:
_start():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:36
.cfi_startproc
.cfi_undefined ra

  /* This is a bit funky: it's not usually sane for _start to return, but in
   * this case we actually want to in order to signal an error to the METAL. */
  mv s0, ra
20400150:	8406                	mv	s0,ra
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:44
   * safely perform any access that may be relaxed without GP being set.  This
   * is done with relaxation disabled to avoid relaxing the address calculation
   * to just "addi gp, gp, 0". */
.option push
.option norelax
  la gp, __global_pointer$
20400152:	5fc01197          	auipc	gp,0x5fc01
20400156:	4de18193          	addi	gp,gp,1246 # 80001630 <__global_pointer$>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:50
.option pop

  /* Stack pointer is expected to be initialized before _start */

  /* If we're not hart 0, skip the initialization work */
  la t0, __metal_boot_hart
2040015a:	00000293          	li	t0,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:51
  bne a0, t0, _skip_init
2040015e:	0e551163          	bne	a0,t0,20400240 <_skip_init>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:60
   * boot and then need to get relocated into a non-persistant writable memory
   * before C code can execute.  If this is the case we do so here.  This step
   * is optional: if the METAL provides an environment in which this relocation
   * is not necessary then it must simply set metal_segment_data_source_start to
   * be equal to metal_segment_data_target_start. */
  la t0, metal_segment_data_source_start
20400162:	00007297          	auipc	t0,0x7
20400166:	8d628293          	addi	t0,t0,-1834 # 20406a38 <metal_segment_data_source_start>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:61
  la t1, metal_segment_data_target_start
2040016a:	5fc00317          	auipc	t1,0x5fc00
2040016e:	e9630313          	addi	t1,t1,-362 # 80000000 <metal_segment_data_target_start>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:62
  la t2, metal_segment_data_target_end
20400172:	5fc01397          	auipc	t2,0x5fc01
20400176:	ce638393          	addi	t2,t2,-794 # 80000e58 <__malloc_free_list>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:64

  beq t0, t1, 2f
2040017a:	00628c63          	beq	t0,t1,20400192 <_start+0x42>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:65
  bge t1, t2, 2f
2040017e:	00735a63          	bge	t1,t2,20400192 <_start+0x42>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:69

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
20400182:	0002a503          	lw	a0,0(t0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:70
  addi t0, t0, 4
20400186:	0291                	addi	t0,t0,4
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:71
  sw   a0, 0(t1)
20400188:	00a32023          	sw	a0,0(t1)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:72
  addi t1, t1, 4
2040018c:	0311                	addi	t1,t1,4
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:73
  blt  t1, t2, 1b
2040018e:	fe734ae3          	blt	t1,t2,20400182 <_start+0x32>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:84
  blt  t1, t2, 1b
#endif
2:

  /* Copy the ITIM section */
  la t0, metal_segment_itim_source_start
20400192:	00001297          	auipc	t0,0x1
20400196:	dbe28293          	addi	t0,t0,-578 # 20400f50 <metal_segment_itim_source_start>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:85
  la t1, metal_segment_itim_target_start
2040019a:	5fc00317          	auipc	t1,0x5fc00
2040019e:	e6630313          	addi	t1,t1,-410 # 80000000 <metal_segment_data_target_start>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:86
  la t2, metal_segment_itim_target_end
204001a2:	5fc00397          	auipc	t2,0x5fc00
204001a6:	e5e38393          	addi	t2,t2,-418 # 80000000 <metal_segment_data_target_start>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:88

  beq t0, t1, 2f
204001aa:	00628c63          	beq	t0,t1,204001c2 <_start+0x72>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:89
  bge t1, t2, 2f
204001ae:	00735a63          	bge	t1,t2,204001c2 <_start+0x72>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:93

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204001b2:	0002a503          	lw	a0,0(t0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:94
  addi t0, t0, 4
204001b6:	0291                	addi	t0,t0,4
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:95
  sw   a0, 0(t1)
204001b8:	00a32023          	sw	a0,0(t1)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:96
  addi t1, t1, 4
204001bc:	0311                	addi	t1,t1,4
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:97
  blt  t1, t2, 1b
204001be:	fe734ae3          	blt	t1,t2,204001b2 <_start+0x62>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:109
#endif
2:

  /* Fence all subsequent instruction fetches until after the ITIM writes
     complete */
  fence.i
204001c2:	0000100f          	fence.i
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:114

2:

  /* Copy the LIM section */
  la t0, metal_segment_lim_source_start
204001c6:	00001297          	auipc	t0,0x1
204001ca:	d8a28293          	addi	t0,t0,-630 # 20400f50 <metal_segment_itim_source_start>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:115
  la t1, metal_segment_lim_target_start
204001ce:	5fc00317          	auipc	t1,0x5fc00
204001d2:	e3230313          	addi	t1,t1,-462 # 80000000 <metal_segment_data_target_start>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:116
  la t2, metal_segment_lim_target_end
204001d6:	5fc00397          	auipc	t2,0x5fc00
204001da:	e2a38393          	addi	t2,t2,-470 # 80000000 <metal_segment_data_target_start>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:118

  beq t0, t1, 2f
204001de:	00628c63          	beq	t0,t1,204001f6 <_start+0xa6>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:119
  bge t1, t2, 2f
204001e2:	00735a63          	bge	t1,t2,204001f6 <_start+0xa6>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:123

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204001e6:	0002a503          	lw	a0,0(t0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:124
  addi t0, t0, 4
204001ea:	0291                	addi	t0,t0,4
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:125
  sw   a0, 0(t1)
204001ec:	00a32023          	sw	a0,0(t1)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:126
  addi t1, t1, 4
204001f0:	0311                	addi	t1,t1,4
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:127
  blt  t1, t2, 1b
204001f2:	fe734ae3          	blt	t1,t2,204001e6 <_start+0x96>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:139
#endif
2:

  /* Fence all subsequent instruction fetches until after the LIM writes
     complete */
  fence.i
204001f6:	0000100f          	fence.i
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:142

  /* Zero the BSS segment. */
  la t1, metal_segment_bss_target_start
204001fa:	5fc01317          	auipc	t1,0x5fc01
204001fe:	c5e30313          	addi	t1,t1,-930 # 80000e58 <__malloc_free_list>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:143
  la t2, metal_segment_bss_target_end
20400202:	8cc18393          	addi	t2,gp,-1844 # 80000efc <metal_segment_bss_target_end>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:145

  bge t1, t2, 2f
20400206:	00735763          	bge	t1,t2,20400214 <_start+0xc4>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:149

1:
#if __riscv_xlen == 32
  sw   x0, 0(t1)
2040020a:	00032023          	sw	zero,0(t1)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:150
  addi t1, t1, 4
2040020e:	0311                	addi	t1,t1,4
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:151
  blt  t1, t2, 1b
20400210:	fe734de3          	blt	t1,t2,2040020a <_start+0xba>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:161
#endif
2:

  /* Set TLS pointer */
  .weak __tls_base	
  la tp, __tls_base
20400214:	5fc01217          	auipc	tp,0x5fc01
20400218:	c4420213          	addi	tp,tp,-956 # 80000e58 <__malloc_free_list>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:166

  /* At this point we're in an environment that can execute C code.  The first
   * thing to do is to make the callback to the parent environment if it's been
   * requested to do so. */
  beqz a2, 1f
2040021c:	c211                	beqz	a2,20400220 <_start+0xd0>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:167
  jalr a2
2040021e:	9602                	jalr	a2
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:171
1:

  /* The RISC-V port only uses new-style constructors and destructors. */
  la a0, __libc_fini_array
20400220:	00002517          	auipc	a0,0x2
20400224:	e0450513          	addi	a0,a0,-508 # 20402024 <__libc_fini_array>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:172
  call atexit
20400228:	5bf010ef          	jal	ra,20401fe6 <atexit>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:173
  call __libc_init_array
2040022c:	62f010ef          	jal	ra,2040205a <__libc_init_array>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:177

  /* Register metal_fini_run as a destructor and call metal_init_run to
   * run and setup Metal constructors */
  la a0, metal_fini_run
20400230:	00002517          	auipc	a0,0x2
20400234:	0d050513          	addi	a0,a0,208 # 20402300 <metal_fini_run>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:178
  call atexit
20400238:	5af010ef          	jal	ra,20401fe6 <atexit>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:179
  call metal_init_run
2040023c:	0b0020ef          	jal	ra,204022ec <metal_init_run>

20400240 <_skip_init>:
_skip_init():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:185

_skip_init:

  /* Synchronize harts so that secondary harts wait until hart 0 finishes
     initializing */
  call __metal_synchronize_harts
20400240:	3709                	jal	20400142 <__metal_synchronize_harts>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:188

  /* Disable and clear all interrupt sources */
  li   a3, -1
20400242:	56fd                	li	a3,-1
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:189
  csrc mie, a3
20400244:	3046b073          	csrc	mie,a3
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:190
  csrc mip, a3
20400248:	3446b073          	csrc	mip,a3
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:194

  /* The delegation CSRs exist if user mode interrupts (N extension) or
   * supervisor mode (S extension) are supported */
  csrr a5, misa
2040024c:	301027f3          	csrr	a5,misa
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:195
  lui  a4, 0x42
20400250:	00042737          	lui	a4,0x42
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:196
  and  a4, a4, a5
20400254:	8f7d                	and	a4,a4,a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:197
  beqz a4, 1f
20400256:	c709                	beqz	a4,20400260 <_skip_init+0x20>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:198
  csrc mideleg, a3
20400258:	3036b073          	csrc	mideleg,a3
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:199
  csrc medeleg, a3
2040025c:	3026b073          	csrc	medeleg,a3
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:203
1:

  /* The satp CSR exists if supervisor mode (S extension) is supported */
  lui  a4, 0x40
20400260:	00040737          	lui	a4,0x40
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:204
  and  a4, a4, a5
20400264:	8f7d                	and	a4,a4,a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:205
  beqz a4, 1f
20400266:	c319                	beqz	a4,2040026c <_skip_init+0x2c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:206
  csrc satp, a3
20400268:	1806b073          	csrc	satp,a3
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:210
1:

  /* Check RISC-V isa and enable FS bits if Floating Point architecture. */
  li   a4, 0x10028
2040026c:	6741                	lui	a4,0x10
2040026e:	02870713          	addi	a4,a4,40 # 10028 <__heap_size+0xf828>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:211
  and  a5, a5, a4
20400272:	8ff9                	and	a5,a5,a4
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:212
  beqz a5, 1f
20400274:	cb89                	beqz	a5,20400286 <_skip_init+0x46>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:213
  csrr a5, mstatus
20400276:	300027f3          	csrr	a5,mstatus
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:214
  lui  a4, 0x2
2040027a:	6709                	lui	a4,0x2
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:215
  or   a5, a5, a4
2040027c:	8fd9                	or	a5,a5,a4
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:216
  csrw mstatus, a5
2040027e:	30079073          	csrw	mstatus,a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:217
  csrwi fcsr, 0
20400282:	00305073          	csrwi	fcsr,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:221
1:

  /* Check for vector extension support and enable it if found */
  csrr a5, misa
20400286:	301027f3          	csrr	a5,misa
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:222
  li a4, 0x200000
2040028a:	00200737          	lui	a4,0x200
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:223
  and a5, a5, a4
2040028e:	8ff9                	and	a5,a5,a4
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:224
  beqz a5, 1f
20400290:	c799                	beqz	a5,2040029e <_skip_init+0x5e>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:225
  csrr a5, mstatus
20400292:	300027f3          	csrr	a5,mstatus
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:226
  ori a5, a5, 0x200
20400296:	2007e793          	ori	a5,a5,512
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:227
  csrw mstatus, a5
2040029a:	30079073          	csrw	mstatus,a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:233
1:

  /* This is a C runtime, so main() is defined to have some arguments.  Since
   * there's nothing sane the METAL can pass we don't bother with that but
   * instead just setup as close to a NOP as we can. */
  li a0, 1     /* argc=1 */
2040029e:	4505                	li	a0,1
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:234
  la a1, argv  /* argv = {"libgloss", NULL} */
204002a0:	00000597          	auipc	a1,0x0
204002a4:	13c58593          	addi	a1,a1,316 # 204003dc <argv>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:235
  la a2, envp  /* envp = {NULL} */
204002a8:	00000617          	auipc	a2,0x0
204002ac:	13860613          	addi	a2,a2,312 # 204003e0 <envp>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:236
  call secondary_main
204002b0:	2031                	jal	204002bc <secondary_main>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:242

  /* Call exit to handle libc's cleanup routines.  Under normal contains this
   * shouldn't even get called, but I'm still not using a tail call here
   * because returning to the METAL is the right thing to do in pathological
   * situations. */
  call exit
204002b2:	549010ef          	jal	ra,20401ffa <exit>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:247

  /* And here's where we return.  Again, it's a bit odd but the METAL defines
   * this as a bad idea (ie, as opposed to leaving it undefined) and at this
   * point it's really the only thing left to do. */
  mv ra, s0
204002b6:	80a2                	mv	ra,s0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:248
  ret
204002b8:	8082                	ret

204002ba <_fini>:
_init():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:260
.type   _init, @function
.global _fini
.type   _fini, @function
_init:
_fini:
  ret
204002ba:	8082                	ret

204002bc <secondary_main>:
secondary_main():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:271
.weak   secondary_main
.global secondary_main
.type   secondary_main, @function

secondary_main:
  addi sp, sp, -16
204002bc:	1141                	addi	sp,sp,-16
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:273
#if __riscv_xlen == 32
  sw ra, 4(sp)
204002be:	c206                	sw	ra,4(sp)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:277
#else
  sd ra, 8(sp)
#endif
  csrr t0, mhartid
204002c0:	f14022f3          	csrr	t0,mhartid
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:278
  la t1, __metal_boot_hart
204002c4:	00000313          	li	t1,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:279
  beq t0, t1, 2f
204002c8:	00628563          	beq	t0,t1,204002d2 <secondary_main+0x16>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:281
1:
  wfi
204002cc:	10500073          	wfi
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:282
  j 1b
204002d0:	bff5                	j	204002cc <secondary_main+0x10>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:284
2:
  call main
204002d2:	4af000ef          	jal	ra,20400f80 <main>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:286
#if __riscv_xlen == 32
  lw ra, 4(sp)
204002d6:	4092                	lw	ra,4(sp)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:290
#else
  ld ra, 8(sp)
#endif
  addi sp, sp, 16
204002d8:	0141                	addi	sp,sp,16
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/crt0.S:291
  ret
204002da:	8082                	ret

Disassembly of section .ctors:

204002ec <metal_tty_init>:
metal_tty_init():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/tty.c:28

#ifndef __METAL_DT_STDOUT_UART_BAUD
#define __METAL_DT_STDOUT_UART_BAUD 115200
#endif

METAL_CONSTRUCTOR(metal_tty_init) {
204002ec:	1141                	addi	sp,sp,-16
204002ee:	c606                	sw	ra,12(sp)
204002f0:	c422                	sw	s0,8(sp)
204002f2:	0800                	addi	s0,sp,16
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/tty.c:29
    metal_uart_init(__METAL_DT_STDOUT_UART_HANDLE, __METAL_DT_STDOUT_UART_BAUD);
204002f4:	67f1                	lui	a5,0x1c
204002f6:	20078593          	addi	a1,a5,512 # 1c200 <__heap_size+0x1ba00>
204002fa:	800017b7          	lui	a5,0x80001
204002fe:	de878513          	addi	a0,a5,-536 # 80000de8 <metal_segment_heap_target_end+0xfffff2e8>
20400302:	038020ef          	jal	ra,2040233a <metal_uart_init>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/tty.c:30
}
20400306:	0001                	nop
20400308:	40b2                	lw	ra,12(sp)
2040030a:	4422                	lw	s0,8(sp)
2040030c:	0141                	addi	sp,sp,16
2040030e:	8082                	ret

20400310 <metal_sifive_fe310_g000_pll_init>:
metal_sifive_fe310_g000_pll_init():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:151
    return pll_input_rate * config->multiplier / config->divisor;
}

#ifdef __METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE

METAL_CONSTRUCTOR(metal_sifive_fe310_g000_pll_init) {
20400310:	1101                	addi	sp,sp,-32
20400312:	ce06                	sw	ra,28(sp)
20400314:	cc22                	sw	s0,24(sp)
20400316:	1000                	addi	s0,sp,32
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:152
    long init_rate = __metal_driver_sifive_fe310_g000_pll_init_rate();
20400318:	4fb040ef          	jal	ra,20405012 <__metal_driver_sifive_fe310_g000_pll_init_rate>
2040031c:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:154
    /* If the PLL init_rate is zero, don't initialize the PLL */
    if (init_rate != 0)
20400320:	fec42783          	lw	a5,-20(s0)
20400324:	c799                	beqz	a5,20400332 <metal_sifive_fe310_g000_pll_init+0x22>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:155
        __metal_driver_sifive_fe310_g000_pll_init(
20400326:	800017b7          	lui	a5,0x80001
2040032a:	e2078513          	addi	a0,a5,-480 # 80000e20 <metal_segment_heap_target_end+0xfffff320>
2040032e:	571040ef          	jal	ra,2040509e <__metal_driver_sifive_fe310_g000_pll_init>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:157
            __METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE);
}
20400332:	0001                	nop
20400334:	40f2                	lw	ra,28(sp)
20400336:	4462                	lw	s0,24(sp)
20400338:	6105                	addi	sp,sp,32
2040033a:	8082                	ret

2040033c <use_hfxosc>:
use_hfxosc():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:389

    return __metal_driver_sifive_fe310_g000_pll_get_rate_hz(clock);
}

#ifdef __METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE
METAL_CONSTRUCTOR(use_hfxosc) {
2040033c:	1101                	addi	sp,sp,-32
2040033e:	ce06                	sw	ra,28(sp)
20400340:	cc22                	sw	s0,24(sp)
20400342:	1000                	addi	s0,sp,32
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:390
    long init_rate = __metal_driver_sifive_fe310_g000_pll_init_rate();
20400344:	4cf040ef          	jal	ra,20405012 <__metal_driver_sifive_fe310_g000_pll_init_rate>
20400348:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:391
    metal_clock_set_rate_hz(&__METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE->clock,
2040034c:	fec42583          	lw	a1,-20(s0)
20400350:	800017b7          	lui	a5,0x80001
20400354:	e2078513          	addi	a0,a5,-480 # 80000e20 <metal_segment_heap_target_end+0xfffff320>
20400358:	410060ef          	jal	ra,20406768 <metal_clock_set_rate_hz>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:393
                            init_rate);
}
2040035c:	0001                	nop
2040035e:	40f2                	lw	ra,28(sp)
20400360:	4462                	lw	s0,24(sp)
20400362:	6105                	addi	sp,sp,32
20400364:	8082                	ret

Disassembly of section .text:

20400f80 <main>:
main():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/main.c:6
/* Copyright 2019 SiFive, Inc */
/* SPDX-License-Identifier: Apache-2.0 */

#include <stdio.h>
extern void present(void);
int main() {
20400f80:	1141                	addi	sp,sp,-16
20400f82:	c606                	sw	ra,12(sp)
20400f84:	c422                	sw	s0,8(sp)
20400f86:	0800                	addi	s0,sp,16
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/main.c:7
	present();
20400f88:	2821                	jal	20400fa0 <present>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/main.c:8
    printf("Program finished!\n");
20400f8a:	204007b7          	lui	a5,0x20400
20400f8e:	36878513          	addi	a0,a5,872 # 20400368 <use_hfxosc+0x2c>
20400f92:	26c5                	jal	20401372 <puts>
20400f94:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/main.c:9
}
20400f96:	853e                	mv	a0,a5
20400f98:	40b2                	lw	ra,12(sp)
20400f9a:	4422                	lw	s0,8(sp)
20400f9c:	0141                	addi	sp,sp,16
20400f9e:	8082                	ret

20400fa0 <present>:
present():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:153
.byte   0xfe, 0x7a, 0x54, 0x8f, 0xb6, 0xe, 0xb1, 0x67, 0xc5, 0x11

.text

// initalize round counter i = 1 to hex(32) = 1f
li x6, 0x1
20400fa0:	4305                	li	t1,1
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:154
li x7, 0x1f
20400fa2:	43fd                	li	t2,31
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:171
li x24, 0x0
li x25, 0x0
*/

// Plaintext input for TC - 3, 4
li x18, 0xff
20400fa4:	0ff00913          	li	s2,255
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:172
li x19, 0xff
20400fa8:	0ff00993          	li	s3,255
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:173
li x20, 0xff
20400fac:	0ff00a13          	li	s4,255
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:174
li x21, 0xff
20400fb0:	0ff00a93          	li	s5,255
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:175
li x22, 0xff
20400fb4:	0ff00b13          	li	s6,255
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:176
li x23, 0xff
20400fb8:	0ff00b93          	li	s7,255
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:177
li x24, 0xff
20400fbc:	0ff00c13          	li	s8,255
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:178
li x25, 0xff
20400fc0:	0ff00c93          	li	s9,255
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:184


// intialize key table pointer

// Key Input for TC1, TC3
la  x8, key_1
20400fc4:	5fbff417          	auipc	s0,0x5fbff
20400fc8:	44c40413          	addi	s0,s0,1100 # 80000410 <key_1>

20400fcc <for_loop>:
for_loop():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:196
// get key (64 bits) from memory
// STORAGE: States - x10-17, Cipher - x18-x25

// add_key

addi x4, x8, 0
20400fcc:	00040213          	mv	tp,s0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:197
lbu  x5, (x4)
20400fd0:	00024283          	lbu	t0,0(tp) # 0 <__metal_boot_hart>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:198
xor x10, x18, x5
20400fd4:	00594533          	xor	a0,s2,t0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:200

addi x4, x8, 1
20400fd8:	00140213          	addi	tp,s0,1
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:201
lbu  x5, (x4)
20400fdc:	00024283          	lbu	t0,0(tp) # 0 <__metal_boot_hart>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:202
xor x11, x19, x5
20400fe0:	0059c5b3          	xor	a1,s3,t0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:204

addi x4, x8, 2
20400fe4:	00240213          	addi	tp,s0,2
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:205
lbu  x5, (x4)
20400fe8:	00024283          	lbu	t0,0(tp) # 0 <__metal_boot_hart>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:206
xor x12, x20, x5
20400fec:	005a4633          	xor	a2,s4,t0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:208

addi x4, x8, 3
20400ff0:	00340213          	addi	tp,s0,3
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:209
lbu  x5, (x4)
20400ff4:	00024283          	lbu	t0,0(tp) # 0 <__metal_boot_hart>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:210
xor x13, x21, x5
20400ff8:	005ac6b3          	xor	a3,s5,t0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:212

addi x4, x8, 4
20400ffc:	00440213          	addi	tp,s0,4
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:213
lbu  x5, (x4)
20401000:	00024283          	lbu	t0,0(tp) # 0 <__metal_boot_hart>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:214
xor x14, x22, x5
20401004:	005b4733          	xor	a4,s6,t0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:216

addi x4, x8, 5
20401008:	00540213          	addi	tp,s0,5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:217
lbu  x5, (x4)
2040100c:	00024283          	lbu	t0,0(tp) # 0 <__metal_boot_hart>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:218
xor x15, x23, x5
20401010:	005bc7b3          	xor	a5,s7,t0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:220

addi x4, x8, 6
20401014:	00640213          	addi	tp,s0,6
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:221
lbu  x5, (x4)
20401018:	00024283          	lbu	t0,0(tp) # 0 <__metal_boot_hart>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:222
xor x16, x24, x5
2040101c:	005c4833          	xor	a6,s8,t0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:224

addi x4, x8, 7
20401020:	00740213          	addi	tp,s0,7
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:225
lbu  x5, (x4)
20401024:	00024283          	lbu	t0,0(tp) # 0 <__metal_boot_hart>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:226
xor x17, x25, x5
20401028:	005cc8b3          	xor	a7,s9,t0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:231

// SP Layer

// intialize SP LUT pointers
la x2, sp_0
2040102c:	5fbff117          	auipc	sp,0x5fbff
20401030:	2e410113          	addi	sp,sp,740 # 80000310 <sp_0>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:232
la x3, sp_1
20401034:	5fbff197          	auipc	gp,0x5fbff
20401038:	1dc18193          	addi	gp,gp,476 # 80000210 <sp_1>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:233
la x4, sp_2
2040103c:	5fbff217          	auipc	tp,0x5fbff
20401040:	0d420213          	addi	tp,tp,212 # 80000110 <sp_2>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:234
la x5, sp_3
20401044:	5fbff297          	auipc	t0,0x5fbff
20401048:	fcc28293          	addi	t0,t0,-52 # 80000010 <sp_3>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:237

// cipher[0]
add x29, x5, x10
2040104c:	00a28eb3          	add	t4,t0,a0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:238
lbu x18, (x29)
20401050:	000ec903          	lbu	s2,0(t4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:239
andi x18, x18, 0xC0
20401054:	0c097913          	andi	s2,s2,192
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:241

add x29, x4, x11
20401058:	00b20eb3          	add	t4,tp,a1
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:242
lbu x30, (x29)
2040105c:	000ecf03          	lbu	t5,0(t4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:243
andi x30, x30, 0x30
20401060:	030f7f13          	andi	t5,t5,48
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:244
or x18, x18, x30
20401064:	01e96933          	or	s2,s2,t5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:246

add x29, x3, x12
20401068:	00c18eb3          	add	t4,gp,a2
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:247
lbu x30, (x29)
2040106c:	000ecf03          	lbu	t5,0(t4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:248
andi x30, x30, 0x0C
20401070:	00cf7f13          	andi	t5,t5,12
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:249
or x18, x18, x30
20401074:	01e96933          	or	s2,s2,t5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:251

add x29, x2, x13
20401078:	00d10eb3          	add	t4,sp,a3
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:252
lbu x30, (x29)
2040107c:	000ecf03          	lbu	t5,0(t4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:253
andi x30, x30, 0x03
20401080:	003f7f13          	andi	t5,t5,3
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:254
or x18, x18, x30
20401084:	01e96933          	or	s2,s2,t5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:257

//cipher[1]
add x29, x5, x14
20401088:	00e28eb3          	add	t4,t0,a4
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:258
lbu x19, (x29)
2040108c:	000ec983          	lbu	s3,0(t4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:259
andi x19, x19, 0xC0
20401090:	0c09f993          	andi	s3,s3,192
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:261

add x29, x4, x15
20401094:	00f20eb3          	add	t4,tp,a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:262
lbu x30, (x29)
20401098:	000ecf03          	lbu	t5,0(t4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:263
andi x30, x30, 0x30
2040109c:	030f7f13          	andi	t5,t5,48
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:264
or x19, x19, x30
204010a0:	01e9e9b3          	or	s3,s3,t5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:266

add x29, x3, x16
204010a4:	01018eb3          	add	t4,gp,a6
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:267
lbu x30, (x29)
204010a8:	000ecf03          	lbu	t5,0(t4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:268
andi x30, x30, 0x0C
204010ac:	00cf7f13          	andi	t5,t5,12
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:269
or x19, x19, x30
204010b0:	01e9e9b3          	or	s3,s3,t5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:271

add x29, x2, x17
204010b4:	01110eb3          	add	t4,sp,a7
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:272
lbu x30, (x29)
204010b8:	000ecf03          	lbu	t5,0(t4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:273
andi x30, x30, 0x03
204010bc:	003f7f13          	andi	t5,t5,3
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:274
or x19, x19, x30
204010c0:	01e9e9b3          	or	s3,s3,t5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:277

// cipher[2]
add x29, x2, x10
204010c4:	00a10eb3          	add	t4,sp,a0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:278
lbu x20, (x29)
204010c8:	000eca03          	lbu	s4,0(t4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:279
andi x20, x20, 0xC0
204010cc:	0c0a7a13          	andi	s4,s4,192
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:281

add x29, x5, x11
204010d0:	00b28eb3          	add	t4,t0,a1
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:282
lbu x30, (x29)
204010d4:	000ecf03          	lbu	t5,0(t4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:283
andi x30, x30, 0x30
204010d8:	030f7f13          	andi	t5,t5,48
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:284
or x20, x20, x30
204010dc:	01ea6a33          	or	s4,s4,t5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:286

add x29, x4, x12
204010e0:	00c20eb3          	add	t4,tp,a2
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:287
lbu x30, (x29)
204010e4:	000ecf03          	lbu	t5,0(t4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:288
andi x30, x30, 0x0C
204010e8:	00cf7f13          	andi	t5,t5,12
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:289
or x20, x20, x30
204010ec:	01ea6a33          	or	s4,s4,t5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:291

add x29, x3, x13
204010f0:	00d18eb3          	add	t4,gp,a3
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:292
lbu x30, (x29)
204010f4:	000ecf03          	lbu	t5,0(t4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:293
andi x30, x30, 0x03
204010f8:	003f7f13          	andi	t5,t5,3
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:294
or x20, x20, x30
204010fc:	01ea6a33          	or	s4,s4,t5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:297

//cipher[3]
add x29, x2, x14
20401100:	00e10eb3          	add	t4,sp,a4
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:298
lbu x21, (x29)
20401104:	000eca83          	lbu	s5,0(t4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:299
andi x21, x21, 0xC0
20401108:	0c0afa93          	andi	s5,s5,192
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:301

add x29, x5, x15
2040110c:	00f28eb3          	add	t4,t0,a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:302
lbu x30, (x29)
20401110:	000ecf03          	lbu	t5,0(t4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:303
andi x30, x30, 0x30
20401114:	030f7f13          	andi	t5,t5,48
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:304
or x21, x21, x30
20401118:	01eaeab3          	or	s5,s5,t5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:306

add x29, x4, x16
2040111c:	01020eb3          	add	t4,tp,a6
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:307
lbu x30, (x29)
20401120:	000ecf03          	lbu	t5,0(t4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:308
andi x30, x30, 0x0C
20401124:	00cf7f13          	andi	t5,t5,12
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:309
or x21, x21, x30
20401128:	01eaeab3          	or	s5,s5,t5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:311

add x29, x3, x17
2040112c:	01118eb3          	add	t4,gp,a7
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:312
lbu x30, (x29)
20401130:	000ecf03          	lbu	t5,0(t4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:313
andi x30, x30, 0x03
20401134:	003f7f13          	andi	t5,t5,3
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:314
or x21, x21, x30
20401138:	01eaeab3          	or	s5,s5,t5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:317

// cipher[4]
add x29, x3, x10
2040113c:	00a18eb3          	add	t4,gp,a0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:318
lbu x22, (x29)
20401140:	000ecb03          	lbu	s6,0(t4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:319
andi x22, x22, 0xC0
20401144:	0c0b7b13          	andi	s6,s6,192
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:321

add x29, x2, x11
20401148:	00b10eb3          	add	t4,sp,a1
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:322
lbu x30, (x29)
2040114c:	000ecf03          	lbu	t5,0(t4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:323
andi x30, x30, 0x30
20401150:	030f7f13          	andi	t5,t5,48
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:324
or x22, x22, x30
20401154:	01eb6b33          	or	s6,s6,t5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:326

add x29, x5, x12
20401158:	00c28eb3          	add	t4,t0,a2
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:327
lbu x30, (x29)
2040115c:	000ecf03          	lbu	t5,0(t4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:328
andi x30, x30, 0x0C
20401160:	00cf7f13          	andi	t5,t5,12
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:329
or x22, x22, x30
20401164:	01eb6b33          	or	s6,s6,t5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:331

add x29, x4, x13
20401168:	00d20eb3          	add	t4,tp,a3
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:332
lbu x30, (x29)
2040116c:	000ecf03          	lbu	t5,0(t4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:333
andi x30, x30, 0x03
20401170:	003f7f13          	andi	t5,t5,3
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:334
or x22, x22, x30
20401174:	01eb6b33          	or	s6,s6,t5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:337

// cipher[5]
add x29, x3, x14
20401178:	00e18eb3          	add	t4,gp,a4
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:338
lbu x23, (x29)
2040117c:	000ecb83          	lbu	s7,0(t4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:339
andi x23, x23, 0xC0
20401180:	0c0bfb93          	andi	s7,s7,192
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:341

add x29, x2, x15
20401184:	00f10eb3          	add	t4,sp,a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:342
lbu x30, (x29)
20401188:	000ecf03          	lbu	t5,0(t4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:343
andi x30, x30, 0x30
2040118c:	030f7f13          	andi	t5,t5,48
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:344
or x23, x23, x30
20401190:	01ebebb3          	or	s7,s7,t5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:346

add x29, x5, x16
20401194:	01028eb3          	add	t4,t0,a6
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:347
lbu x30, (x29)
20401198:	000ecf03          	lbu	t5,0(t4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:348
andi x30, x30, 0x0C
2040119c:	00cf7f13          	andi	t5,t5,12
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:349
or x23, x23, x30
204011a0:	01ebebb3          	or	s7,s7,t5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:351

add x29, x4, x17
204011a4:	01120eb3          	add	t4,tp,a7
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:352
lbu x30, (x29)
204011a8:	000ecf03          	lbu	t5,0(t4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:353
andi x30, x30, 0x03
204011ac:	003f7f13          	andi	t5,t5,3
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:354
or x23, x23, x30
204011b0:	01ebebb3          	or	s7,s7,t5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:357

// cipher[6]
add x29, x4, x10
204011b4:	00a20eb3          	add	t4,tp,a0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:358
lbu x24, (x29)
204011b8:	000ecc03          	lbu	s8,0(t4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:359
andi x24, x24, 0xC0
204011bc:	0c0c7c13          	andi	s8,s8,192
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:361

add x29, x3, x11
204011c0:	00b18eb3          	add	t4,gp,a1
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:362
lbu x30, (x29)
204011c4:	000ecf03          	lbu	t5,0(t4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:363
andi x30, x30, 0x30
204011c8:	030f7f13          	andi	t5,t5,48
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:364
or x24, x24, x30
204011cc:	01ec6c33          	or	s8,s8,t5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:366

add x29, x2, x12
204011d0:	00c10eb3          	add	t4,sp,a2
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:367
lbu x30, (x29)
204011d4:	000ecf03          	lbu	t5,0(t4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:368
andi x30, x30, 0x0C
204011d8:	00cf7f13          	andi	t5,t5,12
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:369
or x24, x24, x30
204011dc:	01ec6c33          	or	s8,s8,t5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:371

add x29, x5, x13
204011e0:	00d28eb3          	add	t4,t0,a3
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:372
lbu x30, (x29)
204011e4:	000ecf03          	lbu	t5,0(t4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:373
andi x30, x30, 0x03
204011e8:	003f7f13          	andi	t5,t5,3
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:374
or x24, x24, x30
204011ec:	01ec6c33          	or	s8,s8,t5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:377

//cipher[7]
add x29, x4, x14
204011f0:	00e20eb3          	add	t4,tp,a4
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:378
lbu x25, (x29)
204011f4:	000ecc83          	lbu	s9,0(t4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:379
andi x25, x25, 0xC0
204011f8:	0c0cfc93          	andi	s9,s9,192
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:381

add x29, x3, x15
204011fc:	00f18eb3          	add	t4,gp,a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:382
lbu x30, (x29)
20401200:	000ecf03          	lbu	t5,0(t4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:383
andi x30, x30, 0x30
20401204:	030f7f13          	andi	t5,t5,48
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:384
or x25, x25, x30
20401208:	01ececb3          	or	s9,s9,t5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:386

add x29, x2, x16
2040120c:	01010eb3          	add	t4,sp,a6
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:387
lbu x30, (x29)
20401210:	000ecf03          	lbu	t5,0(t4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:388
andi x30, x30, 0x0C
20401214:	00cf7f13          	andi	t5,t5,12
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:389
or x25, x25, x30
20401218:	01ececb3          	or	s9,s9,t5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:391

add x29, x5, x17
2040121c:	01128eb3          	add	t4,t0,a7
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:392
lbu x30, (x29)
20401220:	000ecf03          	lbu	t5,0(t4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:393
andi x30, x30, 0x03
20401224:	003f7f13          	andi	t5,t5,3
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:394
or x25, x25, x30
20401228:	01ececb3          	or	s9,s9,t5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:397

// increment the row in key table for the next round
addi x8, x8, 10
2040122c:	0429                	addi	s0,s0,10
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:399

beq x6, x7, done
2040122e:	00730463          	beq	t1,t2,20401236 <done>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:402

// increment round counter
addi x6, x6, 1
20401232:	0305                	addi	t1,t1,1
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:406

// for loop body ends

j for_loop;
20401234:	bb61                	j	20400fcc <for_loop>

20401236 <done>:
done():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:411

done:
//final XOR between key and cipher

addi x4, x8, 0
20401236:	00040213          	mv	tp,s0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:412
lbu  x5, (x4)
2040123a:	00024283          	lbu	t0,0(tp) # 0 <__metal_boot_hart>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:413
xor x18, x18, x5
2040123e:	00594933          	xor	s2,s2,t0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:415

addi x4, x8, 1
20401242:	00140213          	addi	tp,s0,1
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:416
lbu  x5, (x4)
20401246:	00024283          	lbu	t0,0(tp) # 0 <__metal_boot_hart>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:417
xor x19, x19, x5
2040124a:	0059c9b3          	xor	s3,s3,t0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:419

addi x4, x8, 2
2040124e:	00240213          	addi	tp,s0,2
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:420
lbu  x5, (x4)
20401252:	00024283          	lbu	t0,0(tp) # 0 <__metal_boot_hart>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:421
xor x20, x20, x5
20401256:	005a4a33          	xor	s4,s4,t0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:423

addi x4, x8, 3
2040125a:	00340213          	addi	tp,s0,3
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:424
lbu  x5, (x4)
2040125e:	00024283          	lbu	t0,0(tp) # 0 <__metal_boot_hart>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:425
xor x21, x21, x5
20401262:	005acab3          	xor	s5,s5,t0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:427

addi x4, x8, 4
20401266:	00440213          	addi	tp,s0,4
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:428
lbu  x5, (x4)
2040126a:	00024283          	lbu	t0,0(tp) # 0 <__metal_boot_hart>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:429
xor x22, x22, x5
2040126e:	005b4b33          	xor	s6,s6,t0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:431

addi x4, x8, 5
20401272:	00540213          	addi	tp,s0,5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:432
lbu  x5, (x4)
20401276:	00024283          	lbu	t0,0(tp) # 0 <__metal_boot_hart>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:433
xor x23, x23, x5
2040127a:	005bcbb3          	xor	s7,s7,t0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:435

addi x4, x8, 6
2040127e:	00640213          	addi	tp,s0,6
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:436
lbu  x5, (x4)
20401282:	00024283          	lbu	t0,0(tp) # 0 <__metal_boot_hart>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:437
xor x24, x24, x5
20401286:	005c4c33          	xor	s8,s8,t0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:439

addi x4, x8, 7
2040128a:	00740213          	addi	tp,s0,7
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:440
lbu  x5, (x4)
2040128e:	00024283          	lbu	t0,0(tp) # 0 <__metal_boot_hart>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:441
xor x25, x25, x5
20401292:	005cccb3          	xor	s9,s9,t0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/src/present.S:444


ret;
20401296:	8082                	ret

20401298 <_puts_r>:
_puts_r():
20401298:	1101                	addi	sp,sp,-32
2040129a:	ca26                	sw	s1,20(sp)
2040129c:	c84a                	sw	s2,16(sp)
2040129e:	ce06                	sw	ra,28(sp)
204012a0:	cc22                	sw	s0,24(sp)
204012a2:	c64e                	sw	s3,12(sp)
204012a4:	c452                	sw	s4,8(sp)
204012a6:	84aa                	mv	s1,a0
204012a8:	892e                	mv	s2,a1
204012aa:	c501                	beqz	a0,204012b2 <_puts_r+0x1a>
204012ac:	4d1c                	lw	a5,24(a0)
204012ae:	e391                	bnez	a5,204012b2 <_puts_r+0x1a>
204012b0:	29e5                	jal	204017a8 <__sinit>
204012b2:	4c9c                	lw	a5,24(s1)
204012b4:	4480                	lw	s0,8(s1)
204012b6:	e399                	bnez	a5,204012bc <_puts_r+0x24>
204012b8:	8526                	mv	a0,s1
204012ba:	21fd                	jal	204017a8 <__sinit>
204012bc:	fffff797          	auipc	a5,0xfffff
204012c0:	0e078793          	addi	a5,a5,224 # 2040039c <__sf_fake_stdin>
204012c4:	02f41c63          	bne	s0,a5,204012fc <_puts_r+0x64>
204012c8:	40c0                	lw	s0,4(s1)
204012ca:	00c45783          	lhu	a5,12(s0)
204012ce:	8ba1                	andi	a5,a5,8
204012d0:	c7b1                	beqz	a5,2040131c <_puts_r+0x84>
204012d2:	481c                	lw	a5,16(s0)
204012d4:	c7a1                	beqz	a5,2040131c <_puts_r+0x84>
204012d6:	59fd                	li	s3,-1
204012d8:	4a29                	li	s4,10
204012da:	441c                	lw	a5,8(s0)
204012dc:	00094583          	lbu	a1,0(s2)
204012e0:	17fd                	addi	a5,a5,-1
204012e2:	e9b1                	bnez	a1,20401336 <_puts_r+0x9e>
204012e4:	c41c                	sw	a5,8(s0)
204012e6:	0607de63          	bgez	a5,20401362 <_puts_r+0xca>
204012ea:	8622                	mv	a2,s0
204012ec:	45a9                	li	a1,10
204012ee:	8526                	mv	a0,s1
204012f0:	2079                	jal	2040137e <__swbuf_r>
204012f2:	57fd                	li	a5,-1
204012f4:	02f50863          	beq	a0,a5,20401324 <_puts_r+0x8c>
204012f8:	4529                	li	a0,10
204012fa:	a035                	j	20401326 <_puts_r+0x8e>
204012fc:	fffff797          	auipc	a5,0xfffff
20401300:	0c078793          	addi	a5,a5,192 # 204003bc <__sf_fake_stdout>
20401304:	00f41463          	bne	s0,a5,2040130c <_puts_r+0x74>
20401308:	4480                	lw	s0,8(s1)
2040130a:	b7c1                	j	204012ca <_puts_r+0x32>
2040130c:	fffff797          	auipc	a5,0xfffff
20401310:	07078793          	addi	a5,a5,112 # 2040037c <__sf_fake_stderr>
20401314:	faf41be3          	bne	s0,a5,204012ca <_puts_r+0x32>
20401318:	44c0                	lw	s0,12(s1)
2040131a:	bf45                	j	204012ca <_puts_r+0x32>
2040131c:	85a2                	mv	a1,s0
2040131e:	8526                	mv	a0,s1
20401320:	2a39                	jal	2040143e <__swsetup_r>
20401322:	d955                	beqz	a0,204012d6 <_puts_r+0x3e>
20401324:	557d                	li	a0,-1
20401326:	40f2                	lw	ra,28(sp)
20401328:	4462                	lw	s0,24(sp)
2040132a:	44d2                	lw	s1,20(sp)
2040132c:	4942                	lw	s2,16(sp)
2040132e:	49b2                	lw	s3,12(sp)
20401330:	4a22                	lw	s4,8(sp)
20401332:	6105                	addi	sp,sp,32
20401334:	8082                	ret
20401336:	c41c                	sw	a5,8(s0)
20401338:	0905                	addi	s2,s2,1
2040133a:	0007d763          	bgez	a5,20401348 <_puts_r+0xb0>
2040133e:	4c18                	lw	a4,24(s0)
20401340:	00e7cb63          	blt	a5,a4,20401356 <_puts_r+0xbe>
20401344:	01458963          	beq	a1,s4,20401356 <_puts_r+0xbe>
20401348:	401c                	lw	a5,0(s0)
2040134a:	00178713          	addi	a4,a5,1
2040134e:	c018                	sw	a4,0(s0)
20401350:	00b78023          	sb	a1,0(a5)
20401354:	b759                	j	204012da <_puts_r+0x42>
20401356:	8622                	mv	a2,s0
20401358:	8526                	mv	a0,s1
2040135a:	2015                	jal	2040137e <__swbuf_r>
2040135c:	f7351fe3          	bne	a0,s3,204012da <_puts_r+0x42>
20401360:	b7d1                	j	20401324 <_puts_r+0x8c>
20401362:	401c                	lw	a5,0(s0)
20401364:	00178713          	addi	a4,a5,1
20401368:	c018                	sw	a4,0(s0)
2040136a:	4729                	li	a4,10
2040136c:	00e78023          	sb	a4,0(a5)
20401370:	b761                	j	204012f8 <_puts_r+0x60>

20401372 <puts>:
puts():
20401372:	85aa                	mv	a1,a0
20401374:	5fc00517          	auipc	a0,0x5fc00
20401378:	abc52503          	lw	a0,-1348(a0) # 80000e30 <_impure_ptr>
2040137c:	bf31                	j	20401298 <_puts_r>

2040137e <__swbuf_r>:
__swbuf_r():
2040137e:	1101                	addi	sp,sp,-32
20401380:	cc22                	sw	s0,24(sp)
20401382:	ca26                	sw	s1,20(sp)
20401384:	c84a                	sw	s2,16(sp)
20401386:	ce06                	sw	ra,28(sp)
20401388:	c64e                	sw	s3,12(sp)
2040138a:	84aa                	mv	s1,a0
2040138c:	892e                	mv	s2,a1
2040138e:	8432                	mv	s0,a2
20401390:	c501                	beqz	a0,20401398 <__swbuf_r+0x1a>
20401392:	4d1c                	lw	a5,24(a0)
20401394:	e391                	bnez	a5,20401398 <__swbuf_r+0x1a>
20401396:	2909                	jal	204017a8 <__sinit>
20401398:	fffff797          	auipc	a5,0xfffff
2040139c:	00478793          	addi	a5,a5,4 # 2040039c <__sf_fake_stdin>
204013a0:	06f41963          	bne	s0,a5,20401412 <__swbuf_r+0x94>
204013a4:	40c0                	lw	s0,4(s1)
204013a6:	4c1c                	lw	a5,24(s0)
204013a8:	c41c                	sw	a5,8(s0)
204013aa:	00c45783          	lhu	a5,12(s0)
204013ae:	8ba1                	andi	a5,a5,8
204013b0:	c3c9                	beqz	a5,20401432 <__swbuf_r+0xb4>
204013b2:	481c                	lw	a5,16(s0)
204013b4:	cfbd                	beqz	a5,20401432 <__swbuf_r+0xb4>
204013b6:	481c                	lw	a5,16(s0)
204013b8:	4008                	lw	a0,0(s0)
204013ba:	0ff97993          	zext.b	s3,s2
204013be:	0ff97913          	zext.b	s2,s2
204013c2:	8d1d                	sub	a0,a0,a5
204013c4:	485c                	lw	a5,20(s0)
204013c6:	00f54663          	blt	a0,a5,204013d2 <__swbuf_r+0x54>
204013ca:	85a2                	mv	a1,s0
204013cc:	8526                	mv	a0,s1
204013ce:	24c1                	jal	2040168e <_fflush_r>
204013d0:	e52d                	bnez	a0,2040143a <__swbuf_r+0xbc>
204013d2:	441c                	lw	a5,8(s0)
204013d4:	0505                	addi	a0,a0,1
204013d6:	17fd                	addi	a5,a5,-1
204013d8:	c41c                	sw	a5,8(s0)
204013da:	401c                	lw	a5,0(s0)
204013dc:	00178713          	addi	a4,a5,1
204013e0:	c018                	sw	a4,0(s0)
204013e2:	01378023          	sb	s3,0(a5)
204013e6:	485c                	lw	a5,20(s0)
204013e8:	00a78963          	beq	a5,a0,204013fa <__swbuf_r+0x7c>
204013ec:	00c45783          	lhu	a5,12(s0)
204013f0:	8b85                	andi	a5,a5,1
204013f2:	cb81                	beqz	a5,20401402 <__swbuf_r+0x84>
204013f4:	47a9                	li	a5,10
204013f6:	00f91663          	bne	s2,a5,20401402 <__swbuf_r+0x84>
204013fa:	85a2                	mv	a1,s0
204013fc:	8526                	mv	a0,s1
204013fe:	2c41                	jal	2040168e <_fflush_r>
20401400:	ed0d                	bnez	a0,2040143a <__swbuf_r+0xbc>
20401402:	40f2                	lw	ra,28(sp)
20401404:	4462                	lw	s0,24(sp)
20401406:	44d2                	lw	s1,20(sp)
20401408:	49b2                	lw	s3,12(sp)
2040140a:	854a                	mv	a0,s2
2040140c:	4942                	lw	s2,16(sp)
2040140e:	6105                	addi	sp,sp,32
20401410:	8082                	ret
20401412:	fffff797          	auipc	a5,0xfffff
20401416:	faa78793          	addi	a5,a5,-86 # 204003bc <__sf_fake_stdout>
2040141a:	00f41463          	bne	s0,a5,20401422 <__swbuf_r+0xa4>
2040141e:	4480                	lw	s0,8(s1)
20401420:	b759                	j	204013a6 <__swbuf_r+0x28>
20401422:	fffff797          	auipc	a5,0xfffff
20401426:	f5a78793          	addi	a5,a5,-166 # 2040037c <__sf_fake_stderr>
2040142a:	f6f41ee3          	bne	s0,a5,204013a6 <__swbuf_r+0x28>
2040142e:	44c0                	lw	s0,12(s1)
20401430:	bf9d                	j	204013a6 <__swbuf_r+0x28>
20401432:	85a2                	mv	a1,s0
20401434:	8526                	mv	a0,s1
20401436:	2021                	jal	2040143e <__swsetup_r>
20401438:	dd3d                	beqz	a0,204013b6 <__swbuf_r+0x38>
2040143a:	597d                	li	s2,-1
2040143c:	b7d9                	j	20401402 <__swbuf_r+0x84>

2040143e <__swsetup_r>:
__swsetup_r():
2040143e:	1141                	addi	sp,sp,-16
20401440:	c422                	sw	s0,8(sp)
20401442:	c226                	sw	s1,4(sp)
20401444:	c04a                	sw	s2,0(sp)
20401446:	c606                	sw	ra,12(sp)
20401448:	5fc00497          	auipc	s1,0x5fc00
2040144c:	9e84a483          	lw	s1,-1560(s1) # 80000e30 <_impure_ptr>
20401450:	892a                	mv	s2,a0
20401452:	842e                	mv	s0,a1
20401454:	c489                	beqz	s1,2040145e <__swsetup_r+0x20>
20401456:	4c9c                	lw	a5,24(s1)
20401458:	e399                	bnez	a5,2040145e <__swsetup_r+0x20>
2040145a:	8526                	mv	a0,s1
2040145c:	26b1                	jal	204017a8 <__sinit>
2040145e:	fffff797          	auipc	a5,0xfffff
20401462:	f3e78793          	addi	a5,a5,-194 # 2040039c <__sf_fake_stdin>
20401466:	02f41763          	bne	s0,a5,20401494 <__swsetup_r+0x56>
2040146a:	40c0                	lw	s0,4(s1)
2040146c:	00c41783          	lh	a5,12(s0)
20401470:	01079713          	slli	a4,a5,0x10
20401474:	0087f693          	andi	a3,a5,8
20401478:	8341                	srli	a4,a4,0x10
2040147a:	eaad                	bnez	a3,204014ec <__swsetup_r+0xae>
2040147c:	01077693          	andi	a3,a4,16
20401480:	ea95                	bnez	a3,204014b4 <__swsetup_r+0x76>
20401482:	4725                	li	a4,9
20401484:	00e92023          	sw	a4,0(s2)
20401488:	0407e793          	ori	a5,a5,64
2040148c:	00f41623          	sh	a5,12(s0)
20401490:	557d                	li	a0,-1
20401492:	a871                	j	2040152e <__swsetup_r+0xf0>
20401494:	fffff797          	auipc	a5,0xfffff
20401498:	f2878793          	addi	a5,a5,-216 # 204003bc <__sf_fake_stdout>
2040149c:	00f41463          	bne	s0,a5,204014a4 <__swsetup_r+0x66>
204014a0:	4480                	lw	s0,8(s1)
204014a2:	b7e9                	j	2040146c <__swsetup_r+0x2e>
204014a4:	fffff797          	auipc	a5,0xfffff
204014a8:	ed878793          	addi	a5,a5,-296 # 2040037c <__sf_fake_stderr>
204014ac:	fcf410e3          	bne	s0,a5,2040146c <__swsetup_r+0x2e>
204014b0:	44c0                	lw	s0,12(s1)
204014b2:	bf6d                	j	2040146c <__swsetup_r+0x2e>
204014b4:	8b11                	andi	a4,a4,4
204014b6:	c70d                	beqz	a4,204014e0 <__swsetup_r+0xa2>
204014b8:	584c                	lw	a1,52(s0)
204014ba:	c989                	beqz	a1,204014cc <__swsetup_r+0x8e>
204014bc:	04440793          	addi	a5,s0,68
204014c0:	00f58463          	beq	a1,a5,204014c8 <__swsetup_r+0x8a>
204014c4:	854a                	mv	a0,s2
204014c6:	2bc5                	jal	20401ab6 <_free_r>
204014c8:	02042a23          	sw	zero,52(s0)
204014cc:	00c45783          	lhu	a5,12(s0)
204014d0:	00042223          	sw	zero,4(s0)
204014d4:	fdb7f793          	andi	a5,a5,-37
204014d8:	00f41623          	sh	a5,12(s0)
204014dc:	481c                	lw	a5,16(s0)
204014de:	c01c                	sw	a5,0(s0)
204014e0:	00c45783          	lhu	a5,12(s0)
204014e4:	0087e793          	ori	a5,a5,8
204014e8:	00f41623          	sh	a5,12(s0)
204014ec:	481c                	lw	a5,16(s0)
204014ee:	ef81                	bnez	a5,20401506 <__swsetup_r+0xc8>
204014f0:	00c45783          	lhu	a5,12(s0)
204014f4:	20000713          	li	a4,512
204014f8:	2807f793          	andi	a5,a5,640
204014fc:	00e78563          	beq	a5,a4,20401506 <__swsetup_r+0xc8>
20401500:	85a2                	mv	a1,s0
20401502:	854a                	mv	a0,s2
20401504:	21bd                	jal	20401972 <__smakebuf_r>
20401506:	00c41783          	lh	a5,12(s0)
2040150a:	01079713          	slli	a4,a5,0x10
2040150e:	0017f693          	andi	a3,a5,1
20401512:	8341                	srli	a4,a4,0x10
20401514:	c29d                	beqz	a3,2040153a <__swsetup_r+0xfc>
20401516:	4854                	lw	a3,20(s0)
20401518:	00042423          	sw	zero,8(s0)
2040151c:	40d006b3          	neg	a3,a3
20401520:	cc14                	sw	a3,24(s0)
20401522:	4814                	lw	a3,16(s0)
20401524:	4501                	li	a0,0
20401526:	e681                	bnez	a3,2040152e <__swsetup_r+0xf0>
20401528:	08077713          	andi	a4,a4,128
2040152c:	ff31                	bnez	a4,20401488 <__swsetup_r+0x4a>
2040152e:	40b2                	lw	ra,12(sp)
20401530:	4422                	lw	s0,8(sp)
20401532:	4492                	lw	s1,4(sp)
20401534:	4902                	lw	s2,0(sp)
20401536:	0141                	addi	sp,sp,16
20401538:	8082                	ret
2040153a:	00277693          	andi	a3,a4,2
2040153e:	4601                	li	a2,0
20401540:	e291                	bnez	a3,20401544 <__swsetup_r+0x106>
20401542:	4850                	lw	a2,20(s0)
20401544:	c410                	sw	a2,8(s0)
20401546:	bff1                	j	20401522 <__swsetup_r+0xe4>

20401548 <__sflush_r>:
__sflush_r():
20401548:	00c5d783          	lhu	a5,12(a1)
2040154c:	1101                	addi	sp,sp,-32
2040154e:	cc22                	sw	s0,24(sp)
20401550:	ca26                	sw	s1,20(sp)
20401552:	ce06                	sw	ra,28(sp)
20401554:	c84a                	sw	s2,16(sp)
20401556:	c64e                	sw	s3,12(sp)
20401558:	0087f713          	andi	a4,a5,8
2040155c:	84aa                	mv	s1,a0
2040155e:	842e                	mv	s0,a1
20401560:	e375                	bnez	a4,20401644 <__sflush_r+0xfc>
20401562:	41d8                	lw	a4,4(a1)
20401564:	00e04763          	bgtz	a4,20401572 <__sflush_r+0x2a>
20401568:	41b8                	lw	a4,64(a1)
2040156a:	00e04463          	bgtz	a4,20401572 <__sflush_r+0x2a>
2040156e:	4501                	li	a0,0
20401570:	a875                	j	2040162c <__sflush_r+0xe4>
20401572:	5458                	lw	a4,44(s0)
20401574:	df6d                	beqz	a4,2040156e <__sflush_r+0x26>
20401576:	6685                	lui	a3,0x1
20401578:	0004a903          	lw	s2,0(s1)
2040157c:	8ff5                	and	a5,a5,a3
2040157e:	0004a023          	sw	zero,0(s1)
20401582:	cfa5                	beqz	a5,204015fa <__sflush_r+0xb2>
20401584:	4868                	lw	a0,84(s0)
20401586:	00c45783          	lhu	a5,12(s0)
2040158a:	8b91                	andi	a5,a5,4
2040158c:	c799                	beqz	a5,2040159a <__sflush_r+0x52>
2040158e:	405c                	lw	a5,4(s0)
20401590:	8d1d                	sub	a0,a0,a5
20401592:	585c                	lw	a5,52(s0)
20401594:	c399                	beqz	a5,2040159a <__sflush_r+0x52>
20401596:	403c                	lw	a5,64(s0)
20401598:	8d1d                	sub	a0,a0,a5
2040159a:	545c                	lw	a5,44(s0)
2040159c:	500c                	lw	a1,32(s0)
2040159e:	862a                	mv	a2,a0
204015a0:	4681                	li	a3,0
204015a2:	8526                	mv	a0,s1
204015a4:	9782                	jalr	a5
204015a6:	57fd                	li	a5,-1
204015a8:	00c45703          	lhu	a4,12(s0)
204015ac:	00f51d63          	bne	a0,a5,204015c6 <__sflush_r+0x7e>
204015b0:	4094                	lw	a3,0(s1)
204015b2:	47f5                	li	a5,29
204015b4:	08d7e363          	bltu	a5,a3,2040163a <__sflush_r+0xf2>
204015b8:	204007b7          	lui	a5,0x20400
204015bc:	0785                	addi	a5,a5,1
204015be:	00d7d7b3          	srl	a5,a5,a3
204015c2:	8b85                	andi	a5,a5,1
204015c4:	cbbd                	beqz	a5,2040163a <__sflush_r+0xf2>
204015c6:	481c                	lw	a5,16(s0)
204015c8:	00042223          	sw	zero,4(s0)
204015cc:	c01c                	sw	a5,0(s0)
204015ce:	6785                	lui	a5,0x1
204015d0:	8f7d                	and	a4,a4,a5
204015d2:	c719                	beqz	a4,204015e0 <__sflush_r+0x98>
204015d4:	57fd                	li	a5,-1
204015d6:	00f51463          	bne	a0,a5,204015de <__sflush_r+0x96>
204015da:	409c                	lw	a5,0(s1)
204015dc:	e391                	bnez	a5,204015e0 <__sflush_r+0x98>
204015de:	c868                	sw	a0,84(s0)
204015e0:	584c                	lw	a1,52(s0)
204015e2:	0124a023          	sw	s2,0(s1)
204015e6:	d5c1                	beqz	a1,2040156e <__sflush_r+0x26>
204015e8:	04440793          	addi	a5,s0,68
204015ec:	00f58463          	beq	a1,a5,204015f4 <__sflush_r+0xac>
204015f0:	8526                	mv	a0,s1
204015f2:	21d1                	jal	20401ab6 <_free_r>
204015f4:	02042a23          	sw	zero,52(s0)
204015f8:	bf9d                	j	2040156e <__sflush_r+0x26>
204015fa:	500c                	lw	a1,32(s0)
204015fc:	4685                	li	a3,1
204015fe:	4601                	li	a2,0
20401600:	8526                	mv	a0,s1
20401602:	9702                	jalr	a4
20401604:	57fd                	li	a5,-1
20401606:	f8f510e3          	bne	a0,a5,20401586 <__sflush_r+0x3e>
2040160a:	409c                	lw	a5,0(s1)
2040160c:	dfad                	beqz	a5,20401586 <__sflush_r+0x3e>
2040160e:	4775                	li	a4,29
20401610:	00e78563          	beq	a5,a4,2040161a <__sflush_r+0xd2>
20401614:	4759                	li	a4,22
20401616:	00e79563          	bne	a5,a4,20401620 <__sflush_r+0xd8>
2040161a:	0124a023          	sw	s2,0(s1)
2040161e:	bf81                	j	2040156e <__sflush_r+0x26>
20401620:	00c45783          	lhu	a5,12(s0)
20401624:	0407e793          	ori	a5,a5,64
20401628:	00f41623          	sh	a5,12(s0)
2040162c:	40f2                	lw	ra,28(sp)
2040162e:	4462                	lw	s0,24(sp)
20401630:	44d2                	lw	s1,20(sp)
20401632:	4942                	lw	s2,16(sp)
20401634:	49b2                	lw	s3,12(sp)
20401636:	6105                	addi	sp,sp,32
20401638:	8082                	ret
2040163a:	04076713          	ori	a4,a4,64
2040163e:	00e41623          	sh	a4,12(s0)
20401642:	b7ed                	j	2040162c <__sflush_r+0xe4>
20401644:	0105a983          	lw	s3,16(a1)
20401648:	f20983e3          	beqz	s3,2040156e <__sflush_r+0x26>
2040164c:	0005a903          	lw	s2,0(a1)
20401650:	8b8d                	andi	a5,a5,3
20401652:	0135a023          	sw	s3,0(a1)
20401656:	41390933          	sub	s2,s2,s3
2040165a:	4701                	li	a4,0
2040165c:	e391                	bnez	a5,20401660 <__sflush_r+0x118>
2040165e:	49d8                	lw	a4,20(a1)
20401660:	c418                	sw	a4,8(s0)
20401662:	f12056e3          	blez	s2,2040156e <__sflush_r+0x26>
20401666:	541c                	lw	a5,40(s0)
20401668:	500c                	lw	a1,32(s0)
2040166a:	86ca                	mv	a3,s2
2040166c:	864e                	mv	a2,s3
2040166e:	8526                	mv	a0,s1
20401670:	9782                	jalr	a5
20401672:	00a04a63          	bgtz	a0,20401686 <__sflush_r+0x13e>
20401676:	00c45783          	lhu	a5,12(s0)
2040167a:	557d                	li	a0,-1
2040167c:	0407e793          	ori	a5,a5,64
20401680:	00f41623          	sh	a5,12(s0)
20401684:	b765                	j	2040162c <__sflush_r+0xe4>
20401686:	99aa                	add	s3,s3,a0
20401688:	40a90933          	sub	s2,s2,a0
2040168c:	bfd9                	j	20401662 <__sflush_r+0x11a>

2040168e <_fflush_r>:
_fflush_r():
2040168e:	499c                	lw	a5,16(a1)
20401690:	cfb9                	beqz	a5,204016ee <_fflush_r+0x60>
20401692:	1101                	addi	sp,sp,-32
20401694:	cc22                	sw	s0,24(sp)
20401696:	ce06                	sw	ra,28(sp)
20401698:	842a                	mv	s0,a0
2040169a:	c511                	beqz	a0,204016a6 <_fflush_r+0x18>
2040169c:	4d1c                	lw	a5,24(a0)
2040169e:	e781                	bnez	a5,204016a6 <_fflush_r+0x18>
204016a0:	c62e                	sw	a1,12(sp)
204016a2:	2219                	jal	204017a8 <__sinit>
204016a4:	45b2                	lw	a1,12(sp)
204016a6:	fffff797          	auipc	a5,0xfffff
204016aa:	cf678793          	addi	a5,a5,-778 # 2040039c <__sf_fake_stdin>
204016ae:	00f59b63          	bne	a1,a5,204016c4 <_fflush_r+0x36>
204016b2:	404c                	lw	a1,4(s0)
204016b4:	00c59783          	lh	a5,12(a1)
204016b8:	c795                	beqz	a5,204016e4 <_fflush_r+0x56>
204016ba:	8522                	mv	a0,s0
204016bc:	4462                	lw	s0,24(sp)
204016be:	40f2                	lw	ra,28(sp)
204016c0:	6105                	addi	sp,sp,32
204016c2:	b559                	j	20401548 <__sflush_r>
204016c4:	fffff797          	auipc	a5,0xfffff
204016c8:	cf878793          	addi	a5,a5,-776 # 204003bc <__sf_fake_stdout>
204016cc:	00f59463          	bne	a1,a5,204016d4 <_fflush_r+0x46>
204016d0:	440c                	lw	a1,8(s0)
204016d2:	b7cd                	j	204016b4 <_fflush_r+0x26>
204016d4:	fffff797          	auipc	a5,0xfffff
204016d8:	ca878793          	addi	a5,a5,-856 # 2040037c <__sf_fake_stderr>
204016dc:	fcf59ce3          	bne	a1,a5,204016b4 <_fflush_r+0x26>
204016e0:	444c                	lw	a1,12(s0)
204016e2:	bfc9                	j	204016b4 <_fflush_r+0x26>
204016e4:	40f2                	lw	ra,28(sp)
204016e6:	4462                	lw	s0,24(sp)
204016e8:	4501                	li	a0,0
204016ea:	6105                	addi	sp,sp,32
204016ec:	8082                	ret
204016ee:	4501                	li	a0,0
204016f0:	8082                	ret

204016f2 <std>:
std():
204016f2:	1141                	addi	sp,sp,-16
204016f4:	c422                	sw	s0,8(sp)
204016f6:	c606                	sw	ra,12(sp)
204016f8:	842a                	mv	s0,a0
204016fa:	00b51623          	sh	a1,12(a0)
204016fe:	00c51723          	sh	a2,14(a0)
20401702:	00052023          	sw	zero,0(a0)
20401706:	00052223          	sw	zero,4(a0)
2040170a:	00052423          	sw	zero,8(a0)
2040170e:	06052223          	sw	zero,100(a0)
20401712:	00052823          	sw	zero,16(a0)
20401716:	00052a23          	sw	zero,20(a0)
2040171a:	00052c23          	sw	zero,24(a0)
2040171e:	4621                	li	a2,8
20401720:	4581                	li	a1,0
20401722:	05c50513          	addi	a0,a0,92
20401726:	24e5                	jal	20401a0e <memset>
20401728:	00000797          	auipc	a5,0x0
2040172c:	53678793          	addi	a5,a5,1334 # 20401c5e <__sread>
20401730:	d05c                	sw	a5,36(s0)
20401732:	00000797          	auipc	a5,0x0
20401736:	55c78793          	addi	a5,a5,1372 # 20401c8e <__swrite>
2040173a:	d41c                	sw	a5,40(s0)
2040173c:	00000797          	auipc	a5,0x0
20401740:	5a078793          	addi	a5,a5,1440 # 20401cdc <__sseek>
20401744:	d45c                	sw	a5,44(s0)
20401746:	00000797          	auipc	a5,0x0
2040174a:	5cc78793          	addi	a5,a5,1484 # 20401d12 <__sclose>
2040174e:	40b2                	lw	ra,12(sp)
20401750:	d000                	sw	s0,32(s0)
20401752:	d81c                	sw	a5,48(s0)
20401754:	4422                	lw	s0,8(sp)
20401756:	0141                	addi	sp,sp,16
20401758:	8082                	ret

2040175a <_cleanup_r>:
_cleanup_r():
2040175a:	00000597          	auipc	a1,0x0
2040175e:	f3458593          	addi	a1,a1,-204 # 2040168e <_fflush_r>
20401762:	a2b1                	j	204018ae <_fwalk_reent>

20401764 <__sfmoreglue>:
__sfmoreglue():
20401764:	1141                	addi	sp,sp,-16
20401766:	c226                	sw	s1,4(sp)
20401768:	06800613          	li	a2,104
2040176c:	fff58493          	addi	s1,a1,-1
20401770:	02c484b3          	mul	s1,s1,a2
20401774:	c04a                	sw	s2,0(sp)
20401776:	892e                	mv	s2,a1
20401778:	c422                	sw	s0,8(sp)
2040177a:	c606                	sw	ra,12(sp)
2040177c:	07448593          	addi	a1,s1,116
20401780:	2ee1                	jal	20401b58 <_malloc_r>
20401782:	842a                	mv	s0,a0
20401784:	c919                	beqz	a0,2040179a <__sfmoreglue+0x36>
20401786:	00052023          	sw	zero,0(a0)
2040178a:	01252223          	sw	s2,4(a0)
2040178e:	0531                	addi	a0,a0,12
20401790:	c408                	sw	a0,8(s0)
20401792:	06848613          	addi	a2,s1,104
20401796:	4581                	li	a1,0
20401798:	2c9d                	jal	20401a0e <memset>
2040179a:	40b2                	lw	ra,12(sp)
2040179c:	8522                	mv	a0,s0
2040179e:	4422                	lw	s0,8(sp)
204017a0:	4492                	lw	s1,4(sp)
204017a2:	4902                	lw	s2,0(sp)
204017a4:	0141                	addi	sp,sp,16
204017a6:	8082                	ret

204017a8 <__sinit>:
__sinit():
204017a8:	4d1c                	lw	a5,24(a0)
204017aa:	e3bd                	bnez	a5,20401810 <__sinit+0x68>
204017ac:	1141                	addi	sp,sp,-16
204017ae:	c422                	sw	s0,8(sp)
204017b0:	c606                	sw	ra,12(sp)
204017b2:	00000797          	auipc	a5,0x0
204017b6:	fa878793          	addi	a5,a5,-88 # 2040175a <_cleanup_r>
204017ba:	d51c                	sw	a5,40(a0)
204017bc:	04052423          	sw	zero,72(a0)
204017c0:	04052623          	sw	zero,76(a0)
204017c4:	04052823          	sw	zero,80(a0)
204017c8:	fffff797          	auipc	a5,0xfffff
204017cc:	7607a783          	lw	a5,1888(a5) # 20400f28 <_global_impure_ptr>
204017d0:	842a                	mv	s0,a0
204017d2:	00f51463          	bne	a0,a5,204017da <__sinit+0x32>
204017d6:	4785                	li	a5,1
204017d8:	cd1c                	sw	a5,24(a0)
204017da:	8522                	mv	a0,s0
204017dc:	281d                	jal	20401812 <__sfp>
204017de:	c048                	sw	a0,4(s0)
204017e0:	8522                	mv	a0,s0
204017e2:	2805                	jal	20401812 <__sfp>
204017e4:	c408                	sw	a0,8(s0)
204017e6:	8522                	mv	a0,s0
204017e8:	202d                	jal	20401812 <__sfp>
204017ea:	c448                	sw	a0,12(s0)
204017ec:	4048                	lw	a0,4(s0)
204017ee:	4601                	li	a2,0
204017f0:	4591                	li	a1,4
204017f2:	3701                	jal	204016f2 <std>
204017f4:	4408                	lw	a0,8(s0)
204017f6:	4605                	li	a2,1
204017f8:	45a5                	li	a1,9
204017fa:	3de5                	jal	204016f2 <std>
204017fc:	4448                	lw	a0,12(s0)
204017fe:	4609                	li	a2,2
20401800:	45c9                	li	a1,18
20401802:	3dc5                	jal	204016f2 <std>
20401804:	4785                	li	a5,1
20401806:	40b2                	lw	ra,12(sp)
20401808:	cc1c                	sw	a5,24(s0)
2040180a:	4422                	lw	s0,8(sp)
2040180c:	0141                	addi	sp,sp,16
2040180e:	8082                	ret
20401810:	8082                	ret

20401812 <__sfp>:
__sfp():
20401812:	1141                	addi	sp,sp,-16
20401814:	c226                	sw	s1,4(sp)
20401816:	fffff497          	auipc	s1,0xfffff
2040181a:	7124a483          	lw	s1,1810(s1) # 20400f28 <_global_impure_ptr>
2040181e:	4c9c                	lw	a5,24(s1)
20401820:	c04a                	sw	s2,0(sp)
20401822:	c606                	sw	ra,12(sp)
20401824:	c422                	sw	s0,8(sp)
20401826:	892a                	mv	s2,a0
20401828:	e399                	bnez	a5,2040182e <__sfp+0x1c>
2040182a:	8526                	mv	a0,s1
2040182c:	3fb5                	jal	204017a8 <__sinit>
2040182e:	04848493          	addi	s1,s1,72
20401832:	4480                	lw	s0,8(s1)
20401834:	40dc                	lw	a5,4(s1)
20401836:	17fd                	addi	a5,a5,-1
20401838:	0007d663          	bgez	a5,20401844 <__sfp+0x32>
2040183c:	409c                	lw	a5,0(s1)
2040183e:	cfb1                	beqz	a5,2040189a <__sfp+0x88>
20401840:	4084                	lw	s1,0(s1)
20401842:	bfc5                	j	20401832 <__sfp+0x20>
20401844:	00c41703          	lh	a4,12(s0)
20401848:	e731                	bnez	a4,20401894 <__sfp+0x82>
2040184a:	77c1                	lui	a5,0xffff0
2040184c:	0785                	addi	a5,a5,1
2040184e:	06042223          	sw	zero,100(s0)
20401852:	00042023          	sw	zero,0(s0)
20401856:	00042223          	sw	zero,4(s0)
2040185a:	00042423          	sw	zero,8(s0)
2040185e:	c45c                	sw	a5,12(s0)
20401860:	00042823          	sw	zero,16(s0)
20401864:	00042a23          	sw	zero,20(s0)
20401868:	00042c23          	sw	zero,24(s0)
2040186c:	4621                	li	a2,8
2040186e:	4581                	li	a1,0
20401870:	05c40513          	addi	a0,s0,92
20401874:	2a69                	jal	20401a0e <memset>
20401876:	02042a23          	sw	zero,52(s0)
2040187a:	02042c23          	sw	zero,56(s0)
2040187e:	04042423          	sw	zero,72(s0)
20401882:	04042623          	sw	zero,76(s0)
20401886:	40b2                	lw	ra,12(sp)
20401888:	8522                	mv	a0,s0
2040188a:	4422                	lw	s0,8(sp)
2040188c:	4492                	lw	s1,4(sp)
2040188e:	4902                	lw	s2,0(sp)
20401890:	0141                	addi	sp,sp,16
20401892:	8082                	ret
20401894:	06840413          	addi	s0,s0,104
20401898:	bf79                	j	20401836 <__sfp+0x24>
2040189a:	4591                	li	a1,4
2040189c:	854a                	mv	a0,s2
2040189e:	35d9                	jal	20401764 <__sfmoreglue>
204018a0:	c088                	sw	a0,0(s1)
204018a2:	842a                	mv	s0,a0
204018a4:	fd51                	bnez	a0,20401840 <__sfp+0x2e>
204018a6:	47b1                	li	a5,12
204018a8:	00f92023          	sw	a5,0(s2)
204018ac:	bfe9                	j	20401886 <__sfp+0x74>

204018ae <_fwalk_reent>:
_fwalk_reent():
204018ae:	7179                	addi	sp,sp,-48
204018b0:	d422                	sw	s0,40(sp)
204018b2:	d04a                	sw	s2,32(sp)
204018b4:	ce4e                	sw	s3,28(sp)
204018b6:	cc52                	sw	s4,24(sp)
204018b8:	c85a                	sw	s6,16(sp)
204018ba:	c65e                	sw	s7,12(sp)
204018bc:	d606                	sw	ra,44(sp)
204018be:	d226                	sw	s1,36(sp)
204018c0:	ca56                	sw	s5,20(sp)
204018c2:	892a                	mv	s2,a0
204018c4:	8a2e                	mv	s4,a1
204018c6:	04850413          	addi	s0,a0,72
204018ca:	4981                	li	s3,0
204018cc:	4b05                	li	s6,1
204018ce:	5bfd                	li	s7,-1
204018d0:	4404                	lw	s1,8(s0)
204018d2:	00442a83          	lw	s5,4(s0)
204018d6:	1afd                	addi	s5,s5,-1
204018d8:	020ad063          	bgez	s5,204018f8 <_fwalk_reent+0x4a>
204018dc:	4000                	lw	s0,0(s0)
204018de:	f86d                	bnez	s0,204018d0 <_fwalk_reent+0x22>
204018e0:	50b2                	lw	ra,44(sp)
204018e2:	5422                	lw	s0,40(sp)
204018e4:	5492                	lw	s1,36(sp)
204018e6:	5902                	lw	s2,32(sp)
204018e8:	4a62                	lw	s4,24(sp)
204018ea:	4ad2                	lw	s5,20(sp)
204018ec:	4b42                	lw	s6,16(sp)
204018ee:	4bb2                	lw	s7,12(sp)
204018f0:	854e                	mv	a0,s3
204018f2:	49f2                	lw	s3,28(sp)
204018f4:	6145                	addi	sp,sp,48
204018f6:	8082                	ret
204018f8:	00c4d783          	lhu	a5,12(s1)
204018fc:	00fb7b63          	bgeu	s6,a5,20401912 <_fwalk_reent+0x64>
20401900:	00e49783          	lh	a5,14(s1)
20401904:	01778763          	beq	a5,s7,20401912 <_fwalk_reent+0x64>
20401908:	85a6                	mv	a1,s1
2040190a:	854a                	mv	a0,s2
2040190c:	9a02                	jalr	s4
2040190e:	00a9e9b3          	or	s3,s3,a0
20401912:	06848493          	addi	s1,s1,104
20401916:	b7c1                	j	204018d6 <_fwalk_reent+0x28>

20401918 <__swhatbuf_r>:
__swhatbuf_r():
20401918:	7159                	addi	sp,sp,-112
2040191a:	d0ca                	sw	s2,96(sp)
2040191c:	892e                	mv	s2,a1
2040191e:	00e59583          	lh	a1,14(a1)
20401922:	d4a2                	sw	s0,104(sp)
20401924:	d2a6                	sw	s1,100(sp)
20401926:	d686                	sw	ra,108(sp)
20401928:	8432                	mv	s0,a2
2040192a:	84b6                	mv	s1,a3
2040192c:	0005dc63          	bgez	a1,20401944 <__swhatbuf_r+0x2c>
20401930:	00c91783          	lh	a5,12(s2)
20401934:	0004a023          	sw	zero,0(s1)
20401938:	0807f793          	andi	a5,a5,128
2040193c:	e38d                	bnez	a5,2040195e <__swhatbuf_r+0x46>
2040193e:	40000793          	li	a5,1024
20401942:	a005                	j	20401962 <__swhatbuf_r+0x4a>
20401944:	0030                	addi	a2,sp,8
20401946:	290d                	jal	20401d78 <_fstat_r>
20401948:	fe0544e3          	bltz	a0,20401930 <__swhatbuf_r+0x18>
2040194c:	4732                	lw	a4,12(sp)
2040194e:	67bd                	lui	a5,0xf
20401950:	8ff9                	and	a5,a5,a4
20401952:	7779                	lui	a4,0xffffe
20401954:	97ba                	add	a5,a5,a4
20401956:	0017b793          	seqz	a5,a5
2040195a:	c09c                	sw	a5,0(s1)
2040195c:	b7cd                	j	2040193e <__swhatbuf_r+0x26>
2040195e:	04000793          	li	a5,64
20401962:	50b6                	lw	ra,108(sp)
20401964:	c01c                	sw	a5,0(s0)
20401966:	5426                	lw	s0,104(sp)
20401968:	5496                	lw	s1,100(sp)
2040196a:	5906                	lw	s2,96(sp)
2040196c:	4501                	li	a0,0
2040196e:	6165                	addi	sp,sp,112
20401970:	8082                	ret

20401972 <__smakebuf_r>:
__smakebuf_r():
20401972:	00c5d783          	lhu	a5,12(a1)
20401976:	1101                	addi	sp,sp,-32
20401978:	cc22                	sw	s0,24(sp)
2040197a:	ce06                	sw	ra,28(sp)
2040197c:	ca26                	sw	s1,20(sp)
2040197e:	c84a                	sw	s2,16(sp)
20401980:	8b89                	andi	a5,a5,2
20401982:	842e                	mv	s0,a1
20401984:	cf89                	beqz	a5,2040199e <__smakebuf_r+0x2c>
20401986:	04740793          	addi	a5,s0,71
2040198a:	c01c                	sw	a5,0(s0)
2040198c:	c81c                	sw	a5,16(s0)
2040198e:	4785                	li	a5,1
20401990:	c85c                	sw	a5,20(s0)
20401992:	40f2                	lw	ra,28(sp)
20401994:	4462                	lw	s0,24(sp)
20401996:	44d2                	lw	s1,20(sp)
20401998:	4942                	lw	s2,16(sp)
2040199a:	6105                	addi	sp,sp,32
2040199c:	8082                	ret
2040199e:	0074                	addi	a3,sp,12
204019a0:	0030                	addi	a2,sp,8
204019a2:	892a                	mv	s2,a0
204019a4:	3f95                	jal	20401918 <__swhatbuf_r>
204019a6:	45a2                	lw	a1,8(sp)
204019a8:	84aa                	mv	s1,a0
204019aa:	854a                	mv	a0,s2
204019ac:	2275                	jal	20401b58 <_malloc_r>
204019ae:	ed01                	bnez	a0,204019c6 <__smakebuf_r+0x54>
204019b0:	00c41783          	lh	a5,12(s0)
204019b4:	2007f713          	andi	a4,a5,512
204019b8:	ff69                	bnez	a4,20401992 <__smakebuf_r+0x20>
204019ba:	9bf1                	andi	a5,a5,-4
204019bc:	0027e793          	ori	a5,a5,2
204019c0:	00f41623          	sh	a5,12(s0)
204019c4:	b7c9                	j	20401986 <__smakebuf_r+0x14>
204019c6:	00000797          	auipc	a5,0x0
204019ca:	d9478793          	addi	a5,a5,-620 # 2040175a <_cleanup_r>
204019ce:	02f92423          	sw	a5,40(s2)
204019d2:	00c45783          	lhu	a5,12(s0)
204019d6:	c008                	sw	a0,0(s0)
204019d8:	c808                	sw	a0,16(s0)
204019da:	0807e793          	ori	a5,a5,128
204019de:	00f41623          	sh	a5,12(s0)
204019e2:	47a2                	lw	a5,8(sp)
204019e4:	c85c                	sw	a5,20(s0)
204019e6:	47b2                	lw	a5,12(sp)
204019e8:	cf89                	beqz	a5,20401a02 <__smakebuf_r+0x90>
204019ea:	00e41583          	lh	a1,14(s0)
204019ee:	854a                	mv	a0,s2
204019f0:	2e65                	jal	20401da8 <_isatty_r>
204019f2:	c901                	beqz	a0,20401a02 <__smakebuf_r+0x90>
204019f4:	00c45783          	lhu	a5,12(s0)
204019f8:	9bf1                	andi	a5,a5,-4
204019fa:	0017e793          	ori	a5,a5,1
204019fe:	00f41623          	sh	a5,12(s0)
20401a02:	00c45503          	lhu	a0,12(s0)
20401a06:	8cc9                	or	s1,s1,a0
20401a08:	00941623          	sh	s1,12(s0)
20401a0c:	b759                	j	20401992 <__smakebuf_r+0x20>

20401a0e <memset>:
memset():
20401a0e:	433d                	li	t1,15
20401a10:	872a                	mv	a4,a0
20401a12:	02c37363          	bgeu	t1,a2,20401a38 <memset+0x2a>
20401a16:	00f77793          	andi	a5,a4,15
20401a1a:	efbd                	bnez	a5,20401a98 <memset+0x8a>
20401a1c:	e5ad                	bnez	a1,20401a86 <memset+0x78>
20401a1e:	ff067693          	andi	a3,a2,-16
20401a22:	8a3d                	andi	a2,a2,15
20401a24:	96ba                	add	a3,a3,a4
20401a26:	c30c                	sw	a1,0(a4)
20401a28:	c34c                	sw	a1,4(a4)
20401a2a:	c70c                	sw	a1,8(a4)
20401a2c:	c74c                	sw	a1,12(a4)
20401a2e:	0741                	addi	a4,a4,16
20401a30:	fed76be3          	bltu	a4,a3,20401a26 <memset+0x18>
20401a34:	e211                	bnez	a2,20401a38 <memset+0x2a>
20401a36:	8082                	ret
20401a38:	40c306b3          	sub	a3,t1,a2
20401a3c:	068a                	slli	a3,a3,0x2
20401a3e:	00000297          	auipc	t0,0x0
20401a42:	9696                	add	a3,a3,t0
20401a44:	00a68067          	jr	10(a3) # 100a <__heap_size+0x80a>
20401a48:	00b70723          	sb	a1,14(a4) # ffffe00e <metal_segment_heap_target_end+0x7fffc50e>
20401a4c:	00b706a3          	sb	a1,13(a4)
20401a50:	00b70623          	sb	a1,12(a4)
20401a54:	00b705a3          	sb	a1,11(a4)
20401a58:	00b70523          	sb	a1,10(a4)
20401a5c:	00b704a3          	sb	a1,9(a4)
20401a60:	00b70423          	sb	a1,8(a4)
20401a64:	00b703a3          	sb	a1,7(a4)
20401a68:	00b70323          	sb	a1,6(a4)
20401a6c:	00b702a3          	sb	a1,5(a4)
20401a70:	00b70223          	sb	a1,4(a4)
20401a74:	00b701a3          	sb	a1,3(a4)
20401a78:	00b70123          	sb	a1,2(a4)
20401a7c:	00b700a3          	sb	a1,1(a4)
20401a80:	00b70023          	sb	a1,0(a4)
20401a84:	8082                	ret
20401a86:	0ff5f593          	zext.b	a1,a1
20401a8a:	00859693          	slli	a3,a1,0x8
20401a8e:	8dd5                	or	a1,a1,a3
20401a90:	01059693          	slli	a3,a1,0x10
20401a94:	8dd5                	or	a1,a1,a3
20401a96:	b761                	j	20401a1e <memset+0x10>
20401a98:	00279693          	slli	a3,a5,0x2
20401a9c:	00000297          	auipc	t0,0x0
20401aa0:	9696                	add	a3,a3,t0
20401aa2:	8286                	mv	t0,ra
20401aa4:	fa8680e7          	jalr	-88(a3)
20401aa8:	8096                	mv	ra,t0
20401aaa:	17c1                	addi	a5,a5,-16
20401aac:	8f1d                	sub	a4,a4,a5
20401aae:	963e                	add	a2,a2,a5
20401ab0:	f8c374e3          	bgeu	t1,a2,20401a38 <memset+0x2a>
20401ab4:	b7a5                	j	20401a1c <memset+0xe>

20401ab6 <_free_r>:
_free_r():
20401ab6:	c1c5                	beqz	a1,20401b56 <_free_r+0xa0>
20401ab8:	ffc5a783          	lw	a5,-4(a1)
20401abc:	1101                	addi	sp,sp,-32
20401abe:	cc22                	sw	s0,24(sp)
20401ac0:	ce06                	sw	ra,28(sp)
20401ac2:	ffc58413          	addi	s0,a1,-4
20401ac6:	0007d363          	bgez	a5,20401acc <_free_r+0x16>
20401aca:	943e                	add	s0,s0,a5
20401acc:	c62a                	sw	a0,12(sp)
20401ace:	2e2d                	jal	20401e08 <__malloc_lock>
20401ad0:	5fbff717          	auipc	a4,0x5fbff
20401ad4:	38870713          	addi	a4,a4,904 # 80000e58 <__malloc_free_list>
20401ad8:	431c                	lw	a5,0(a4)
20401ada:	4532                	lw	a0,12(sp)
20401adc:	eb81                	bnez	a5,20401aec <_free_r+0x36>
20401ade:	00042223          	sw	zero,4(s0)
20401ae2:	c300                	sw	s0,0(a4)
20401ae4:	4462                	lw	s0,24(sp)
20401ae6:	40f2                	lw	ra,28(sp)
20401ae8:	6105                	addi	sp,sp,32
20401aea:	a605                	j	20401e0a <__malloc_unlock>
20401aec:	00f47d63          	bgeu	s0,a5,20401b06 <_free_r+0x50>
20401af0:	4010                	lw	a2,0(s0)
20401af2:	00c406b3          	add	a3,s0,a2
20401af6:	00d79663          	bne	a5,a3,20401b02 <_free_r+0x4c>
20401afa:	4394                	lw	a3,0(a5)
20401afc:	43dc                	lw	a5,4(a5)
20401afe:	96b2                	add	a3,a3,a2
20401b00:	c014                	sw	a3,0(s0)
20401b02:	c05c                	sw	a5,4(s0)
20401b04:	bff9                	j	20401ae2 <_free_r+0x2c>
20401b06:	873e                	mv	a4,a5
20401b08:	43dc                	lw	a5,4(a5)
20401b0a:	c399                	beqz	a5,20401b10 <_free_r+0x5a>
20401b0c:	fef47de3          	bgeu	s0,a5,20401b06 <_free_r+0x50>
20401b10:	4314                	lw	a3,0(a4)
20401b12:	00d70633          	add	a2,a4,a3
20401b16:	00861f63          	bne	a2,s0,20401b34 <_free_r+0x7e>
20401b1a:	4010                	lw	a2,0(s0)
20401b1c:	96b2                	add	a3,a3,a2
20401b1e:	c314                	sw	a3,0(a4)
20401b20:	00d70633          	add	a2,a4,a3
20401b24:	fcc790e3          	bne	a5,a2,20401ae4 <_free_r+0x2e>
20401b28:	4390                	lw	a2,0(a5)
20401b2a:	43dc                	lw	a5,4(a5)
20401b2c:	96b2                	add	a3,a3,a2
20401b2e:	c314                	sw	a3,0(a4)
20401b30:	c35c                	sw	a5,4(a4)
20401b32:	bf4d                	j	20401ae4 <_free_r+0x2e>
20401b34:	00c47563          	bgeu	s0,a2,20401b3e <_free_r+0x88>
20401b38:	47b1                	li	a5,12
20401b3a:	c11c                	sw	a5,0(a0)
20401b3c:	b765                	j	20401ae4 <_free_r+0x2e>
20401b3e:	4010                	lw	a2,0(s0)
20401b40:	00c406b3          	add	a3,s0,a2
20401b44:	00d79663          	bne	a5,a3,20401b50 <_free_r+0x9a>
20401b48:	4394                	lw	a3,0(a5)
20401b4a:	43dc                	lw	a5,4(a5)
20401b4c:	96b2                	add	a3,a3,a2
20401b4e:	c014                	sw	a3,0(s0)
20401b50:	c05c                	sw	a5,4(s0)
20401b52:	c340                	sw	s0,4(a4)
20401b54:	bf41                	j	20401ae4 <_free_r+0x2e>
20401b56:	8082                	ret

20401b58 <_malloc_r>:
_malloc_r():
20401b58:	1101                	addi	sp,sp,-32
20401b5a:	ca26                	sw	s1,20(sp)
20401b5c:	00358493          	addi	s1,a1,3
20401b60:	98f1                	andi	s1,s1,-4
20401b62:	c84a                	sw	s2,16(sp)
20401b64:	ce06                	sw	ra,28(sp)
20401b66:	cc22                	sw	s0,24(sp)
20401b68:	c64e                	sw	s3,12(sp)
20401b6a:	04a1                	addi	s1,s1,8
20401b6c:	47b1                	li	a5,12
20401b6e:	892a                	mv	s2,a0
20401b70:	04f4f463          	bgeu	s1,a5,20401bb8 <_malloc_r+0x60>
20401b74:	44b1                	li	s1,12
20401b76:	04b4e363          	bltu	s1,a1,20401bbc <_malloc_r+0x64>
20401b7a:	854a                	mv	a0,s2
20401b7c:	2471                	jal	20401e08 <__malloc_lock>
20401b7e:	5fbff697          	auipc	a3,0x5fbff
20401b82:	2da68693          	addi	a3,a3,730 # 80000e58 <__malloc_free_list>
20401b86:	4298                	lw	a4,0(a3)
20401b88:	843a                	mv	s0,a4
20401b8a:	e421                	bnez	s0,20401bd2 <_malloc_r+0x7a>
20401b8c:	5fbff417          	auipc	s0,0x5fbff
20401b90:	2d040413          	addi	s0,s0,720 # 80000e5c <__malloc_sbrk_start>
20401b94:	401c                	lw	a5,0(s0)
20401b96:	e789                	bnez	a5,20401ba0 <_malloc_r+0x48>
20401b98:	4581                	li	a1,0
20401b9a:	854a                	mv	a0,s2
20401b9c:	2851                	jal	20401c30 <_sbrk_r>
20401b9e:	c008                	sw	a0,0(s0)
20401ba0:	85a6                	mv	a1,s1
20401ba2:	854a                	mv	a0,s2
20401ba4:	2071                	jal	20401c30 <_sbrk_r>
20401ba6:	59fd                	li	s3,-1
20401ba8:	07351863          	bne	a0,s3,20401c18 <_malloc_r+0xc0>
20401bac:	47b1                	li	a5,12
20401bae:	00f92023          	sw	a5,0(s2)
20401bb2:	854a                	mv	a0,s2
20401bb4:	2c99                	jal	20401e0a <__malloc_unlock>
20401bb6:	a031                	j	20401bc2 <_malloc_r+0x6a>
20401bb8:	fa04dfe3          	bgez	s1,20401b76 <_malloc_r+0x1e>
20401bbc:	47b1                	li	a5,12
20401bbe:	00f92023          	sw	a5,0(s2)
20401bc2:	4501                	li	a0,0
20401bc4:	40f2                	lw	ra,28(sp)
20401bc6:	4462                	lw	s0,24(sp)
20401bc8:	44d2                	lw	s1,20(sp)
20401bca:	4942                	lw	s2,16(sp)
20401bcc:	49b2                	lw	s3,12(sp)
20401bce:	6105                	addi	sp,sp,32
20401bd0:	8082                	ret
20401bd2:	401c                	lw	a5,0(s0)
20401bd4:	8f85                	sub	a5,a5,s1
20401bd6:	0207ce63          	bltz	a5,20401c12 <_malloc_r+0xba>
20401bda:	462d                	li	a2,11
20401bdc:	00f67663          	bgeu	a2,a5,20401be8 <_malloc_r+0x90>
20401be0:	c01c                	sw	a5,0(s0)
20401be2:	943e                	add	s0,s0,a5
20401be4:	c004                	sw	s1,0(s0)
20401be6:	a029                	j	20401bf0 <_malloc_r+0x98>
20401be8:	405c                	lw	a5,4(s0)
20401bea:	02871263          	bne	a4,s0,20401c0e <_malloc_r+0xb6>
20401bee:	c29c                	sw	a5,0(a3)
20401bf0:	854a                	mv	a0,s2
20401bf2:	2c21                	jal	20401e0a <__malloc_unlock>
20401bf4:	00b40513          	addi	a0,s0,11
20401bf8:	00440793          	addi	a5,s0,4
20401bfc:	9961                	andi	a0,a0,-8
20401bfe:	40f50733          	sub	a4,a0,a5
20401c02:	fcf501e3          	beq	a0,a5,20401bc4 <_malloc_r+0x6c>
20401c06:	943a                	add	s0,s0,a4
20401c08:	8f89                	sub	a5,a5,a0
20401c0a:	c01c                	sw	a5,0(s0)
20401c0c:	bf65                	j	20401bc4 <_malloc_r+0x6c>
20401c0e:	c35c                	sw	a5,4(a4)
20401c10:	b7c5                	j	20401bf0 <_malloc_r+0x98>
20401c12:	8722                	mv	a4,s0
20401c14:	4040                	lw	s0,4(s0)
20401c16:	bf95                	j	20401b8a <_malloc_r+0x32>
20401c18:	00350413          	addi	s0,a0,3
20401c1c:	9871                	andi	s0,s0,-4
20401c1e:	fc8503e3          	beq	a0,s0,20401be4 <_malloc_r+0x8c>
20401c22:	40a405b3          	sub	a1,s0,a0
20401c26:	854a                	mv	a0,s2
20401c28:	2021                	jal	20401c30 <_sbrk_r>
20401c2a:	fb351de3          	bne	a0,s3,20401be4 <_malloc_r+0x8c>
20401c2e:	bfbd                	j	20401bac <_malloc_r+0x54>

20401c30 <_sbrk_r>:
_sbrk_r():
20401c30:	1141                	addi	sp,sp,-16
20401c32:	c422                	sw	s0,8(sp)
20401c34:	842a                	mv	s0,a0
20401c36:	852e                	mv	a0,a1
20401c38:	5fbff797          	auipc	a5,0x5fbff
20401c3c:	2207a423          	sw	zero,552(a5) # 80000e60 <errno>
20401c40:	c606                	sw	ra,12(sp)
20401c42:	2c65                	jal	20401efa <_sbrk>
20401c44:	57fd                	li	a5,-1
20401c46:	00f51863          	bne	a0,a5,20401c56 <_sbrk_r+0x26>
20401c4a:	5fbff797          	auipc	a5,0x5fbff
20401c4e:	2167a783          	lw	a5,534(a5) # 80000e60 <errno>
20401c52:	c391                	beqz	a5,20401c56 <_sbrk_r+0x26>
20401c54:	c01c                	sw	a5,0(s0)
20401c56:	40b2                	lw	ra,12(sp)
20401c58:	4422                	lw	s0,8(sp)
20401c5a:	0141                	addi	sp,sp,16
20401c5c:	8082                	ret

20401c5e <__sread>:
__sread():
20401c5e:	1141                	addi	sp,sp,-16
20401c60:	c422                	sw	s0,8(sp)
20401c62:	842e                	mv	s0,a1
20401c64:	00e59583          	lh	a1,14(a1)
20401c68:	c606                	sw	ra,12(sp)
20401c6a:	224d                	jal	20401e0c <_read_r>
20401c6c:	00054963          	bltz	a0,20401c7e <__sread+0x20>
20401c70:	487c                	lw	a5,84(s0)
20401c72:	97aa                	add	a5,a5,a0
20401c74:	c87c                	sw	a5,84(s0)
20401c76:	40b2                	lw	ra,12(sp)
20401c78:	4422                	lw	s0,8(sp)
20401c7a:	0141                	addi	sp,sp,16
20401c7c:	8082                	ret
20401c7e:	00c45783          	lhu	a5,12(s0)
20401c82:	777d                	lui	a4,0xfffff
20401c84:	177d                	addi	a4,a4,-1
20401c86:	8ff9                	and	a5,a5,a4
20401c88:	00f41623          	sh	a5,12(s0)
20401c8c:	b7ed                	j	20401c76 <__sread+0x18>

20401c8e <__swrite>:
__swrite():
20401c8e:	00c5d783          	lhu	a5,12(a1)
20401c92:	1101                	addi	sp,sp,-32
20401c94:	cc22                	sw	s0,24(sp)
20401c96:	ca26                	sw	s1,20(sp)
20401c98:	c84a                	sw	s2,16(sp)
20401c9a:	c64e                	sw	s3,12(sp)
20401c9c:	ce06                	sw	ra,28(sp)
20401c9e:	1007f793          	andi	a5,a5,256
20401ca2:	84aa                	mv	s1,a0
20401ca4:	842e                	mv	s0,a1
20401ca6:	8932                	mv	s2,a2
20401ca8:	89b6                	mv	s3,a3
20401caa:	c791                	beqz	a5,20401cb6 <__swrite+0x28>
20401cac:	00e59583          	lh	a1,14(a1)
20401cb0:	4689                	li	a3,2
20401cb2:	4601                	li	a2,0
20401cb4:	220d                	jal	20401dd6 <_lseek_r>
20401cb6:	00c45783          	lhu	a5,12(s0)
20401cba:	777d                	lui	a4,0xfffff
20401cbc:	177d                	addi	a4,a4,-1
20401cbe:	8ff9                	and	a5,a5,a4
20401cc0:	00e41583          	lh	a1,14(s0)
20401cc4:	00f41623          	sh	a5,12(s0)
20401cc8:	4462                	lw	s0,24(sp)
20401cca:	40f2                	lw	ra,28(sp)
20401ccc:	86ce                	mv	a3,s3
20401cce:	864a                	mv	a2,s2
20401cd0:	49b2                	lw	s3,12(sp)
20401cd2:	4942                	lw	s2,16(sp)
20401cd4:	8526                	mv	a0,s1
20401cd6:	44d2                	lw	s1,20(sp)
20401cd8:	6105                	addi	sp,sp,32
20401cda:	a83d                	j	20401d18 <_write_r>

20401cdc <__sseek>:
__sseek():
20401cdc:	1141                	addi	sp,sp,-16
20401cde:	c422                	sw	s0,8(sp)
20401ce0:	842e                	mv	s0,a1
20401ce2:	00e59583          	lh	a1,14(a1)
20401ce6:	c606                	sw	ra,12(sp)
20401ce8:	20fd                	jal	20401dd6 <_lseek_r>
20401cea:	57fd                	li	a5,-1
20401cec:	00c45703          	lhu	a4,12(s0)
20401cf0:	00f51b63          	bne	a0,a5,20401d06 <__sseek+0x2a>
20401cf4:	77fd                	lui	a5,0xfffff
20401cf6:	17fd                	addi	a5,a5,-1
20401cf8:	8ff9                	and	a5,a5,a4
20401cfa:	00f41623          	sh	a5,12(s0)
20401cfe:	40b2                	lw	ra,12(sp)
20401d00:	4422                	lw	s0,8(sp)
20401d02:	0141                	addi	sp,sp,16
20401d04:	8082                	ret
20401d06:	6785                	lui	a5,0x1
20401d08:	8fd9                	or	a5,a5,a4
20401d0a:	00f41623          	sh	a5,12(s0)
20401d0e:	c868                	sw	a0,84(s0)
20401d10:	b7fd                	j	20401cfe <__sseek+0x22>

20401d12 <__sclose>:
__sclose():
20401d12:	00e59583          	lh	a1,14(a1)
20401d16:	a815                	j	20401d4a <_close_r>

20401d18 <_write_r>:
_write_r():
20401d18:	1141                	addi	sp,sp,-16
20401d1a:	c422                	sw	s0,8(sp)
20401d1c:	842a                	mv	s0,a0
20401d1e:	852e                	mv	a0,a1
20401d20:	85b2                	mv	a1,a2
20401d22:	8636                	mv	a2,a3
20401d24:	5fbff797          	auipc	a5,0x5fbff
20401d28:	1207ae23          	sw	zero,316(a5) # 80000e60 <errno>
20401d2c:	c606                	sw	ra,12(sp)
20401d2e:	24a9                	jal	20401f78 <_write>
20401d30:	57fd                	li	a5,-1
20401d32:	00f51863          	bne	a0,a5,20401d42 <_write_r+0x2a>
20401d36:	5fbff797          	auipc	a5,0x5fbff
20401d3a:	12a7a783          	lw	a5,298(a5) # 80000e60 <errno>
20401d3e:	c391                	beqz	a5,20401d42 <_write_r+0x2a>
20401d40:	c01c                	sw	a5,0(s0)
20401d42:	40b2                	lw	ra,12(sp)
20401d44:	4422                	lw	s0,8(sp)
20401d46:	0141                	addi	sp,sp,16
20401d48:	8082                	ret

20401d4a <_close_r>:
_close_r():
20401d4a:	1141                	addi	sp,sp,-16
20401d4c:	c422                	sw	s0,8(sp)
20401d4e:	842a                	mv	s0,a0
20401d50:	852e                	mv	a0,a1
20401d52:	5fbff797          	auipc	a5,0x5fbff
20401d56:	1007a723          	sw	zero,270(a5) # 80000e60 <errno>
20401d5a:	c606                	sw	ra,12(sp)
20401d5c:	20cd                	jal	20401e3e <_close>
20401d5e:	57fd                	li	a5,-1
20401d60:	00f51863          	bne	a0,a5,20401d70 <_close_r+0x26>
20401d64:	5fbff797          	auipc	a5,0x5fbff
20401d68:	0fc7a783          	lw	a5,252(a5) # 80000e60 <errno>
20401d6c:	c391                	beqz	a5,20401d70 <_close_r+0x26>
20401d6e:	c01c                	sw	a5,0(s0)
20401d70:	40b2                	lw	ra,12(sp)
20401d72:	4422                	lw	s0,8(sp)
20401d74:	0141                	addi	sp,sp,16
20401d76:	8082                	ret

20401d78 <_fstat_r>:
_fstat_r():
20401d78:	1141                	addi	sp,sp,-16
20401d7a:	c422                	sw	s0,8(sp)
20401d7c:	842a                	mv	s0,a0
20401d7e:	852e                	mv	a0,a1
20401d80:	85b2                	mv	a1,a2
20401d82:	5fbff797          	auipc	a5,0x5fbff
20401d86:	0c07af23          	sw	zero,222(a5) # 80000e60 <errno>
20401d8a:	c606                	sw	ra,12(sp)
20401d8c:	28d1                	jal	20401e60 <_fstat>
20401d8e:	57fd                	li	a5,-1
20401d90:	00f51863          	bne	a0,a5,20401da0 <_fstat_r+0x28>
20401d94:	5fbff797          	auipc	a5,0x5fbff
20401d98:	0cc7a783          	lw	a5,204(a5) # 80000e60 <errno>
20401d9c:	c391                	beqz	a5,20401da0 <_fstat_r+0x28>
20401d9e:	c01c                	sw	a5,0(s0)
20401da0:	40b2                	lw	ra,12(sp)
20401da2:	4422                	lw	s0,8(sp)
20401da4:	0141                	addi	sp,sp,16
20401da6:	8082                	ret

20401da8 <_isatty_r>:
_isatty_r():
20401da8:	1141                	addi	sp,sp,-16
20401daa:	c422                	sw	s0,8(sp)
20401dac:	842a                	mv	s0,a0
20401dae:	852e                	mv	a0,a1
20401db0:	5fbff797          	auipc	a5,0x5fbff
20401db4:	0a07a823          	sw	zero,176(a5) # 80000e60 <errno>
20401db8:	c606                	sw	ra,12(sp)
20401dba:	20f1                	jal	20401e86 <_isatty>
20401dbc:	57fd                	li	a5,-1
20401dbe:	00f51863          	bne	a0,a5,20401dce <_isatty_r+0x26>
20401dc2:	5fbff797          	auipc	a5,0x5fbff
20401dc6:	09e7a783          	lw	a5,158(a5) # 80000e60 <errno>
20401dca:	c391                	beqz	a5,20401dce <_isatty_r+0x26>
20401dcc:	c01c                	sw	a5,0(s0)
20401dce:	40b2                	lw	ra,12(sp)
20401dd0:	4422                	lw	s0,8(sp)
20401dd2:	0141                	addi	sp,sp,16
20401dd4:	8082                	ret

20401dd6 <_lseek_r>:
_lseek_r():
20401dd6:	1141                	addi	sp,sp,-16
20401dd8:	c422                	sw	s0,8(sp)
20401dda:	842a                	mv	s0,a0
20401ddc:	852e                	mv	a0,a1
20401dde:	85b2                	mv	a1,a2
20401de0:	8636                	mv	a2,a3
20401de2:	5fbff797          	auipc	a5,0x5fbff
20401de6:	0607af23          	sw	zero,126(a5) # 80000e60 <errno>
20401dea:	c606                	sw	ra,12(sp)
20401dec:	286d                	jal	20401ea6 <_lseek>
20401dee:	57fd                	li	a5,-1
20401df0:	00f51863          	bne	a0,a5,20401e00 <_lseek_r+0x2a>
20401df4:	5fbff797          	auipc	a5,0x5fbff
20401df8:	06c7a783          	lw	a5,108(a5) # 80000e60 <errno>
20401dfc:	c391                	beqz	a5,20401e00 <_lseek_r+0x2a>
20401dfe:	c01c                	sw	a5,0(s0)
20401e00:	40b2                	lw	ra,12(sp)
20401e02:	4422                	lw	s0,8(sp)
20401e04:	0141                	addi	sp,sp,16
20401e06:	8082                	ret

20401e08 <__malloc_lock>:
__malloc_lock():
20401e08:	8082                	ret

20401e0a <__malloc_unlock>:
__malloc_unlock():
20401e0a:	8082                	ret

20401e0c <_read_r>:
_read_r():
20401e0c:	1141                	addi	sp,sp,-16
20401e0e:	c422                	sw	s0,8(sp)
20401e10:	842a                	mv	s0,a0
20401e12:	852e                	mv	a0,a1
20401e14:	85b2                	mv	a1,a2
20401e16:	8636                	mv	a2,a3
20401e18:	5fbff797          	auipc	a5,0x5fbff
20401e1c:	0407a423          	sw	zero,72(a5) # 80000e60 <errno>
20401e20:	c606                	sw	ra,12(sp)
20401e22:	207d                	jal	20401ed0 <_read>
20401e24:	57fd                	li	a5,-1
20401e26:	00f51863          	bne	a0,a5,20401e36 <_read_r+0x2a>
20401e2a:	5fbff797          	auipc	a5,0x5fbff
20401e2e:	0367a783          	lw	a5,54(a5) # 80000e60 <errno>
20401e32:	c391                	beqz	a5,20401e36 <_read_r+0x2a>
20401e34:	c01c                	sw	a5,0(s0)
20401e36:	40b2                	lw	ra,12(sp)
20401e38:	4422                	lw	s0,8(sp)
20401e3a:	0141                	addi	sp,sp,16
20401e3c:	8082                	ret

20401e3e <_close>:
_close():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/sys_close.c:3
#include <errno.h>

int _close(int file) {
20401e3e:	1101                	addi	sp,sp,-32
20401e40:	ce06                	sw	ra,28(sp)
20401e42:	cc22                	sw	s0,24(sp)
20401e44:	1000                	addi	s0,sp,32
20401e46:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/sys_close.c:4
    errno = ENOSYS;
20401e4a:	225d                	jal	20401ff0 <__errno>
20401e4c:	872a                	mv	a4,a0
20401e4e:	05800793          	li	a5,88
20401e52:	c31c                	sw	a5,0(a4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/sys_close.c:5
    return -1;
20401e54:	57fd                	li	a5,-1
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/sys_close.c:6
}
20401e56:	853e                	mv	a0,a5
20401e58:	40f2                	lw	ra,28(sp)
20401e5a:	4462                	lw	s0,24(sp)
20401e5c:	6105                	addi	sp,sp,32
20401e5e:	8082                	ret

20401e60 <_fstat>:
_fstat():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/sys_fstat.c:4
#include <errno.h>
#include <sys/stat.h>

int _fstat(int file, struct stat *st) {
20401e60:	1101                	addi	sp,sp,-32
20401e62:	ce06                	sw	ra,28(sp)
20401e64:	cc22                	sw	s0,24(sp)
20401e66:	1000                	addi	s0,sp,32
20401e68:	fea42623          	sw	a0,-20(s0)
20401e6c:	feb42423          	sw	a1,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/sys_fstat.c:5
    errno = -ENOSYS;
20401e70:	2241                	jal	20401ff0 <__errno>
20401e72:	872a                	mv	a4,a0
20401e74:	fa800793          	li	a5,-88
20401e78:	c31c                	sw	a5,0(a4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/sys_fstat.c:6
    return -1;
20401e7a:	57fd                	li	a5,-1
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/sys_fstat.c:7
}
20401e7c:	853e                	mv	a0,a5
20401e7e:	40f2                	lw	ra,28(sp)
20401e80:	4462                	lw	s0,24(sp)
20401e82:	6105                	addi	sp,sp,32
20401e84:	8082                	ret

20401e86 <_isatty>:
_isatty():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/sys_isatty.c:3
#include <unistd.h>

int _isatty(int file) { return (file == STDOUT_FILENO); }
20401e86:	1101                	addi	sp,sp,-32
20401e88:	ce22                	sw	s0,28(sp)
20401e8a:	1000                	addi	s0,sp,32
20401e8c:	fea42623          	sw	a0,-20(s0)
20401e90:	fec42783          	lw	a5,-20(s0)
20401e94:	17fd                	addi	a5,a5,-1
20401e96:	0017b793          	seqz	a5,a5
20401e9a:	0ff7f793          	zext.b	a5,a5
20401e9e:	853e                	mv	a0,a5
20401ea0:	4472                	lw	s0,28(sp)
20401ea2:	6105                	addi	sp,sp,32
20401ea4:	8082                	ret

20401ea6 <_lseek>:
_lseek():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/sys_lseek.c:4
#include <errno.h>
#include <sys/types.h>

off_t _lseek(int file, off_t ptr, int dir) {
20401ea6:	1101                	addi	sp,sp,-32
20401ea8:	ce06                	sw	ra,28(sp)
20401eaa:	cc22                	sw	s0,24(sp)
20401eac:	1000                	addi	s0,sp,32
20401eae:	fea42623          	sw	a0,-20(s0)
20401eb2:	feb42423          	sw	a1,-24(s0)
20401eb6:	fec42223          	sw	a2,-28(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/sys_lseek.c:5
    errno = ENOSYS;
20401eba:	2a1d                	jal	20401ff0 <__errno>
20401ebc:	872a                	mv	a4,a0
20401ebe:	05800793          	li	a5,88
20401ec2:	c31c                	sw	a5,0(a4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/sys_lseek.c:6
    return -1;
20401ec4:	57fd                	li	a5,-1
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/sys_lseek.c:7
}
20401ec6:	853e                	mv	a0,a5
20401ec8:	40f2                	lw	ra,28(sp)
20401eca:	4462                	lw	s0,24(sp)
20401ecc:	6105                	addi	sp,sp,32
20401ece:	8082                	ret

20401ed0 <_read>:
_read():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/sys_read.c:4
#include <errno.h>
#include <sys/types.h>

ssize_t _read(int file, void *ptr, size_t len) {
20401ed0:	1101                	addi	sp,sp,-32
20401ed2:	ce06                	sw	ra,28(sp)
20401ed4:	cc22                	sw	s0,24(sp)
20401ed6:	1000                	addi	s0,sp,32
20401ed8:	fea42623          	sw	a0,-20(s0)
20401edc:	feb42423          	sw	a1,-24(s0)
20401ee0:	fec42223          	sw	a2,-28(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/sys_read.c:5
    errno = ENOSYS;
20401ee4:	2231                	jal	20401ff0 <__errno>
20401ee6:	872a                	mv	a4,a0
20401ee8:	05800793          	li	a5,88
20401eec:	c31c                	sw	a5,0(a4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/sys_read.c:6
    return -1;
20401eee:	57fd                	li	a5,-1
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/sys_read.c:7
}
20401ef0:	853e                	mv	a0,a5
20401ef2:	40f2                	lw	ra,28(sp)
20401ef4:	4462                	lw	s0,24(sp)
20401ef6:	6105                	addi	sp,sp,32
20401ef8:	8082                	ret

20401efa <_sbrk>:
_sbrk():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/sys_sbrk.c:24
int _brk(void *addr) {
    __brk = addr;
    return 0;
}

char *_sbrk(ptrdiff_t incr) {
20401efa:	7179                	addi	sp,sp,-48
20401efc:	d606                	sw	ra,44(sp)
20401efe:	d422                	sw	s0,40(sp)
20401f00:	1800                	addi	s0,sp,48
20401f02:	fca42e23          	sw	a0,-36(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/sys_sbrk.c:25
    char *old = __brk;
20401f06:	800017b7          	lui	a5,0x80001
20401f0a:	e347a783          	lw	a5,-460(a5) # 80000e34 <metal_segment_heap_target_end+0xfffff334>
20401f0e:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/sys_sbrk.c:28

    /* If __heap_size == 0, we can't allocate memory on the heap */
    if (&metal_segment_heap_target_start == &metal_segment_heap_target_end) {
20401f12:	cd018713          	addi	a4,gp,-816 # 80001300 <_sp>
20401f16:	4d018793          	addi	a5,gp,1232 # 80001b00 <metal_segment_heap_target_end>
20401f1a:	00f71463          	bne	a4,a5,20401f22 <_sbrk+0x28>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/sys_sbrk.c:29
        return (void *)-1;
20401f1e:	57fd                	li	a5,-1
20401f20:	a0b9                	j	20401f6e <_sbrk+0x74>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/sys_sbrk.c:33
    }

    /* Don't move the break past the end of the heap */
    if ((__brk + incr) < &metal_segment_heap_target_end) {
20401f22:	800017b7          	lui	a5,0x80001
20401f26:	e347a703          	lw	a4,-460(a5) # 80000e34 <metal_segment_heap_target_end+0xfffff334>
20401f2a:	fdc42783          	lw	a5,-36(s0)
20401f2e:	973e                	add	a4,a4,a5
20401f30:	4d018793          	addi	a5,gp,1232 # 80001b00 <metal_segment_heap_target_end>
20401f34:	02f77663          	bgeu	a4,a5,20401f60 <_sbrk+0x66>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/sys_sbrk.c:34
        __brk += incr;
20401f38:	800017b7          	lui	a5,0x80001
20401f3c:	e347a703          	lw	a4,-460(a5) # 80000e34 <metal_segment_heap_target_end+0xfffff334>
20401f40:	fdc42783          	lw	a5,-36(s0)
20401f44:	973e                	add	a4,a4,a5
20401f46:	800017b7          	lui	a5,0x80001
20401f4a:	e2e7aa23          	sw	a4,-460(a5) # 80000e34 <metal_segment_heap_target_end+0xfffff334>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/sys_sbrk.c:40
    } else {
        __brk = &metal_segment_heap_target_end;
        return (void *)-1;
    }
    /* Scrub out allocated memory to avoid spurious ECC errors */
    metal_mem_scrub(old, incr);
20401f4e:	fdc42583          	lw	a1,-36(s0)
20401f52:	fec42503          	lw	a0,-20(s0)
20401f56:	934fe0ef          	jal	ra,2040008a <metal_mem_scrub>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/sys_sbrk.c:42

    return old;
20401f5a:	fec42783          	lw	a5,-20(s0)
20401f5e:	a801                	j	20401f6e <_sbrk+0x74>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/sys_sbrk.c:36
        __brk = &metal_segment_heap_target_end;
20401f60:	800017b7          	lui	a5,0x80001
20401f64:	4d018713          	addi	a4,gp,1232 # 80001b00 <metal_segment_heap_target_end>
20401f68:	e2e7aa23          	sw	a4,-460(a5) # 80000e34 <metal_segment_heap_target_end+0xfffff334>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/sys_sbrk.c:37
        return (void *)-1;
20401f6c:	57fd                	li	a5,-1
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/sys_sbrk.c:43
}
20401f6e:	853e                	mv	a0,a5
20401f70:	50b2                	lw	ra,44(sp)
20401f72:	5422                	lw	s0,40(sp)
20401f74:	6145                	addi	sp,sp,48
20401f76:	8082                	ret

20401f78 <_write>:
_write():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/sys_write.c:7
#include <metal/tty.h>
#include <sys/types.h>
#include <unistd.h>

/* Write to a file.  */
ssize_t _write(int file, const void *ptr, size_t len) {
20401f78:	7179                	addi	sp,sp,-48
20401f7a:	d606                	sw	ra,44(sp)
20401f7c:	d422                	sw	s0,40(sp)
20401f7e:	1800                	addi	s0,sp,48
20401f80:	fca42e23          	sw	a0,-36(s0)
20401f84:	fcb42c23          	sw	a1,-40(s0)
20401f88:	fcc42a23          	sw	a2,-44(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/sys_write.c:8
    if (file != STDOUT_FILENO) {
20401f8c:	fdc42703          	lw	a4,-36(s0)
20401f90:	4785                	li	a5,1
20401f92:	00f70963          	beq	a4,a5,20401fa4 <_write+0x2c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/sys_write.c:9
        errno = ENOSYS;
20401f96:	28a9                	jal	20401ff0 <__errno>
20401f98:	872a                	mv	a4,a0
20401f9a:	05800793          	li	a5,88
20401f9e:	c31c                	sw	a5,0(a4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/sys_write.c:10
        return -1;
20401fa0:	57fd                	li	a5,-1
20401fa2:	a82d                	j	20401fdc <_write+0x64>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/sys_write.c:13
    }

    const char *bptr = ptr;
20401fa4:	fd842783          	lw	a5,-40(s0)
20401fa8:	fef42423          	sw	a5,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/sys_write.c:14
    for (size_t i = 0; i < len; ++i)
20401fac:	fe042623          	sw	zero,-20(s0)
20401fb0:	a839                	j	20401fce <_write+0x56>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/sys_write.c:15 (discriminator 3)
        metal_tty_putc(bptr[i]);
20401fb2:	fe842703          	lw	a4,-24(s0)
20401fb6:	fec42783          	lw	a5,-20(s0)
20401fba:	97ba                	add	a5,a5,a4
20401fbc:	0007c783          	lbu	a5,0(a5)
20401fc0:	853e                	mv	a0,a5
20401fc2:	2e89                	jal	20402314 <metal_tty_putc>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/sys_write.c:14 (discriminator 3)
    for (size_t i = 0; i < len; ++i)
20401fc4:	fec42783          	lw	a5,-20(s0)
20401fc8:	0785                	addi	a5,a5,1
20401fca:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/sys_write.c:14 (discriminator 1)
20401fce:	fec42703          	lw	a4,-20(s0)
20401fd2:	fd442783          	lw	a5,-44(s0)
20401fd6:	fcf76ee3          	bltu	a4,a5,20401fb2 <_write+0x3a>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/sys_write.c:16
    return 0;
20401fda:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/sys_write.c:17
}
20401fdc:	853e                	mv	a0,a5
20401fde:	50b2                	lw	ra,44(sp)
20401fe0:	5422                	lw	s0,40(sp)
20401fe2:	6145                	addi	sp,sp,48
20401fe4:	8082                	ret

20401fe6 <atexit>:
atexit():
20401fe6:	85aa                	mv	a1,a0
20401fe8:	4681                	li	a3,0
20401fea:	4601                	li	a2,0
20401fec:	4501                	li	a0,0
20401fee:	a0e9                	j	204020b8 <__register_exitproc>

20401ff0 <__errno>:
__errno():
20401ff0:	5fbff517          	auipc	a0,0x5fbff
20401ff4:	e4052503          	lw	a0,-448(a0) # 80000e30 <_impure_ptr>
20401ff8:	8082                	ret

20401ffa <exit>:
exit():
20401ffa:	1141                	addi	sp,sp,-16
20401ffc:	c422                	sw	s0,8(sp)
20401ffe:	c606                	sw	ra,12(sp)
20402000:	00000797          	auipc	a5,0x0
20402004:	13478793          	addi	a5,a5,308 # 20402134 <__call_exitprocs>
20402008:	842a                	mv	s0,a0
2040200a:	c399                	beqz	a5,20402010 <exit+0x16>
2040200c:	4581                	li	a1,0
2040200e:	221d                	jal	20402134 <__call_exitprocs>
20402010:	fffff517          	auipc	a0,0xfffff
20402014:	f1852503          	lw	a0,-232(a0) # 20400f28 <_global_impure_ptr>
20402018:	551c                	lw	a5,40(a0)
2040201a:	c391                	beqz	a5,2040201e <exit+0x24>
2040201c:	9782                	jalr	a5
2040201e:	8522                	mv	a0,s0
20402020:	203040ef          	jal	ra,20406a22 <_exit>

20402024 <__libc_fini_array>:
__libc_fini_array():
20402024:	1141                	addi	sp,sp,-16
20402026:	c422                	sw	s0,8(sp)
20402028:	c226                	sw	s1,4(sp)
2040202a:	ffffe417          	auipc	s0,0xffffe
2040202e:	2c640413          	addi	s0,s0,710 # 204002f0 <__fini_array_end>
20402032:	ffffe497          	auipc	s1,0xffffe
20402036:	2be48493          	addi	s1,s1,702 # 204002f0 <__fini_array_end>
2040203a:	8c05                	sub	s0,s0,s1
2040203c:	c606                	sw	ra,12(sp)
2040203e:	8409                	srai	s0,s0,0x2
20402040:	e411                	bnez	s0,2040204c <__libc_fini_array+0x28>
20402042:	40b2                	lw	ra,12(sp)
20402044:	4422                	lw	s0,8(sp)
20402046:	4492                	lw	s1,4(sp)
20402048:	0141                	addi	sp,sp,16
2040204a:	8082                	ret
2040204c:	147d                	addi	s0,s0,-1
2040204e:	00241793          	slli	a5,s0,0x2
20402052:	97a6                	add	a5,a5,s1
20402054:	439c                	lw	a5,0(a5)
20402056:	9782                	jalr	a5
20402058:	b7e5                	j	20402040 <__libc_fini_array+0x1c>

2040205a <__libc_init_array>:
__libc_init_array():
2040205a:	1141                	addi	sp,sp,-16
2040205c:	c422                	sw	s0,8(sp)
2040205e:	c226                	sw	s1,4(sp)
20402060:	ffffe417          	auipc	s0,0xffffe
20402064:	28040413          	addi	s0,s0,640 # 204002e0 <_metal_tty_init_ptr>
20402068:	ffffe497          	auipc	s1,0xffffe
2040206c:	27848493          	addi	s1,s1,632 # 204002e0 <_metal_tty_init_ptr>
20402070:	8c81                	sub	s1,s1,s0
20402072:	c04a                	sw	s2,0(sp)
20402074:	c606                	sw	ra,12(sp)
20402076:	8489                	srai	s1,s1,0x2
20402078:	4901                	li	s2,0
2040207a:	02991563          	bne	s2,s1,204020a4 <__libc_init_array+0x4a>
2040207e:	ffffe417          	auipc	s0,0xffffe
20402082:	26240413          	addi	s0,s0,610 # 204002e0 <_metal_tty_init_ptr>
20402086:	ffffe497          	auipc	s1,0xffffe
2040208a:	25a48493          	addi	s1,s1,602 # 204002e0 <_metal_tty_init_ptr>
2040208e:	8c81                	sub	s1,s1,s0
20402090:	8489                	srai	s1,s1,0x2
20402092:	4901                	li	s2,0
20402094:	00991d63          	bne	s2,s1,204020ae <__libc_init_array+0x54>
20402098:	40b2                	lw	ra,12(sp)
2040209a:	4422                	lw	s0,8(sp)
2040209c:	4492                	lw	s1,4(sp)
2040209e:	4902                	lw	s2,0(sp)
204020a0:	0141                	addi	sp,sp,16
204020a2:	8082                	ret
204020a4:	401c                	lw	a5,0(s0)
204020a6:	0905                	addi	s2,s2,1
204020a8:	0411                	addi	s0,s0,4
204020aa:	9782                	jalr	a5
204020ac:	b7f9                	j	2040207a <__libc_init_array+0x20>
204020ae:	401c                	lw	a5,0(s0)
204020b0:	0905                	addi	s2,s2,1
204020b2:	0411                	addi	s0,s0,4
204020b4:	9782                	jalr	a5
204020b6:	bff9                	j	20402094 <__libc_init_array+0x3a>

204020b8 <__register_exitproc>:
__register_exitproc():
204020b8:	88aa                	mv	a7,a0
204020ba:	5fbff517          	auipc	a0,0x5fbff
204020be:	daa50513          	addi	a0,a0,-598 # 80000e64 <_global_atexit>
204020c2:	411c                	lw	a5,0(a0)
204020c4:	ef91                	bnez	a5,204020e0 <__register_exitproc+0x28>
204020c6:	5fbff717          	auipc	a4,0x5fbff
204020ca:	daa70713          	addi	a4,a4,-598 # 80000e70 <_global_atexit0>
204020ce:	c118                	sw	a4,0(a0)
204020d0:	00000513          	li	a0,0
204020d4:	87ba                	mv	a5,a4
204020d6:	c509                	beqz	a0,204020e0 <__register_exitproc+0x28>
204020d8:	411c                	lw	a5,0(a0)
204020da:	08f72423          	sw	a5,136(a4)
204020de:	87ba                	mv	a5,a4
204020e0:	43d8                	lw	a4,4(a5)
204020e2:	487d                	li	a6,31
204020e4:	557d                	li	a0,-1
204020e6:	04e84663          	blt	a6,a4,20402132 <__register_exitproc+0x7a>
204020ea:	02088d63          	beqz	a7,20402124 <__register_exitproc+0x6c>
204020ee:	0887a803          	lw	a6,136(a5)
204020f2:	04080063          	beqz	a6,20402132 <__register_exitproc+0x7a>
204020f6:	00271513          	slli	a0,a4,0x2
204020fa:	9542                	add	a0,a0,a6
204020fc:	c110                	sw	a2,0(a0)
204020fe:	10082303          	lw	t1,256(a6)
20402102:	4605                	li	a2,1
20402104:	00e61633          	sll	a2,a2,a4
20402108:	00c36333          	or	t1,t1,a2
2040210c:	10682023          	sw	t1,256(a6)
20402110:	08d52023          	sw	a3,128(a0)
20402114:	4689                	li	a3,2
20402116:	00d89763          	bne	a7,a3,20402124 <__register_exitproc+0x6c>
2040211a:	10482683          	lw	a3,260(a6)
2040211e:	8e55                	or	a2,a2,a3
20402120:	10c82223          	sw	a2,260(a6)
20402124:	00170693          	addi	a3,a4,1
20402128:	070a                	slli	a4,a4,0x2
2040212a:	c3d4                	sw	a3,4(a5)
2040212c:	97ba                	add	a5,a5,a4
2040212e:	c78c                	sw	a1,8(a5)
20402130:	4501                	li	a0,0
20402132:	8082                	ret

20402134 <__call_exitprocs>:
__call_exitprocs():
20402134:	7179                	addi	sp,sp,-48
20402136:	ca56                	sw	s5,20(sp)
20402138:	c85a                	sw	s6,16(sp)
2040213a:	c65e                	sw	s7,12(sp)
2040213c:	c462                	sw	s8,8(sp)
2040213e:	d606                	sw	ra,44(sp)
20402140:	d422                	sw	s0,40(sp)
20402142:	d226                	sw	s1,36(sp)
20402144:	d04a                	sw	s2,32(sp)
20402146:	ce4e                	sw	s3,28(sp)
20402148:	cc52                	sw	s4,24(sp)
2040214a:	c266                	sw	s9,4(sp)
2040214c:	8b2a                	mv	s6,a0
2040214e:	8aae                	mv	s5,a1
20402150:	5fbffb97          	auipc	s7,0x5fbff
20402154:	d14b8b93          	addi	s7,s7,-748 # 80000e64 <_global_atexit>
20402158:	4c05                	li	s8,1
2040215a:	000ba483          	lw	s1,0(s7)
2040215e:	cc81                	beqz	s1,20402176 <__call_exitprocs+0x42>
20402160:	40c0                	lw	s0,4(s1)
20402162:	0884a983          	lw	s3,136(s1)
20402166:	fff40913          	addi	s2,s0,-1
2040216a:	040a                	slli	s0,s0,0x2
2040216c:	00898a33          	add	s4,s3,s0
20402170:	9426                	add	s0,s0,s1
20402172:	00095f63          	bgez	s2,20402190 <__call_exitprocs+0x5c>
20402176:	50b2                	lw	ra,44(sp)
20402178:	5422                	lw	s0,40(sp)
2040217a:	5492                	lw	s1,36(sp)
2040217c:	5902                	lw	s2,32(sp)
2040217e:	49f2                	lw	s3,28(sp)
20402180:	4a62                	lw	s4,24(sp)
20402182:	4ad2                	lw	s5,20(sp)
20402184:	4b42                	lw	s6,16(sp)
20402186:	4bb2                	lw	s7,12(sp)
20402188:	4c22                	lw	s8,8(sp)
2040218a:	4c92                	lw	s9,4(sp)
2040218c:	6145                	addi	sp,sp,48
2040218e:	8082                	ret
20402190:	000a8c63          	beqz	s5,204021a8 <__call_exitprocs+0x74>
20402194:	00099663          	bnez	s3,204021a0 <__call_exitprocs+0x6c>
20402198:	197d                	addi	s2,s2,-1
2040219a:	1a71                	addi	s4,s4,-4
2040219c:	1471                	addi	s0,s0,-4
2040219e:	bfd1                	j	20402172 <__call_exitprocs+0x3e>
204021a0:	07ca2783          	lw	a5,124(s4)
204021a4:	ff579ae3          	bne	a5,s5,20402198 <__call_exitprocs+0x64>
204021a8:	40d8                	lw	a4,4(s1)
204021aa:	405c                	lw	a5,4(s0)
204021ac:	177d                	addi	a4,a4,-1
204021ae:	03271863          	bne	a4,s2,204021de <__call_exitprocs+0xaa>
204021b2:	0124a223          	sw	s2,4(s1)
204021b6:	d3ed                	beqz	a5,20402198 <__call_exitprocs+0x64>
204021b8:	0044ac83          	lw	s9,4(s1)
204021bc:	00098863          	beqz	s3,204021cc <__call_exitprocs+0x98>
204021c0:	1009a683          	lw	a3,256(s3)
204021c4:	012c1733          	sll	a4,s8,s2
204021c8:	8ef9                	and	a3,a3,a4
204021ca:	ee89                	bnez	a3,204021e4 <__call_exitprocs+0xb0>
204021cc:	9782                	jalr	a5
204021ce:	40d8                	lw	a4,4(s1)
204021d0:	000ba783          	lw	a5,0(s7)
204021d4:	f99713e3          	bne	a4,s9,2040215a <__call_exitprocs+0x26>
204021d8:	fcf480e3          	beq	s1,a5,20402198 <__call_exitprocs+0x64>
204021dc:	bfbd                	j	2040215a <__call_exitprocs+0x26>
204021de:	00042223          	sw	zero,4(s0)
204021e2:	bfd1                	j	204021b6 <__call_exitprocs+0x82>
204021e4:	1049a683          	lw	a3,260(s3)
204021e8:	ffca2583          	lw	a1,-4(s4)
204021ec:	8f75                	and	a4,a4,a3
204021ee:	e701                	bnez	a4,204021f6 <__call_exitprocs+0xc2>
204021f0:	855a                	mv	a0,s6
204021f2:	9782                	jalr	a5
204021f4:	bfe9                	j	204021ce <__call_exitprocs+0x9a>
204021f6:	852e                	mv	a0,a1
204021f8:	9782                	jalr	a5
204021fa:	bfd1                	j	204021ce <__call_exitprocs+0x9a>

204021fc <metal_init>:
metal_init():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/init.c:17
extern metal_constructor_t metal_constructors_start;
extern metal_constructor_t metal_constructors_end;
extern metal_destructor_t metal_destructors_start;
extern metal_destructor_t metal_destructors_end;

void metal_init(void) {
204021fc:	1101                	addi	sp,sp,-32
204021fe:	ce06                	sw	ra,28(sp)
20402200:	cc22                	sw	s0,24(sp)
20402202:	1000                	addi	s0,sp,32
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/init.c:20
    /* Make sure the constructors only run once */
    static int init_done = 0;
    if (init_done) {
20402204:	800017b7          	lui	a5,0x80001
20402208:	e687a783          	lw	a5,-408(a5) # 80000e68 <metal_segment_heap_target_end+0xfffff368>
2040220c:	efa9                	bnez	a5,20402266 <metal_init+0x6a>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/init.c:23
        return;
    }
    init_done = 1;
2040220e:	800017b7          	lui	a5,0x80001
20402212:	4705                	li	a4,1
20402214:	e6e7a423          	sw	a4,-408(a5) # 80000e68 <metal_segment_heap_target_end+0xfffff368>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/init.c:25

    if (&metal_constructors_end <= &metal_constructors_start) {
20402218:	204007b7          	lui	a5,0x20400
2040221c:	2ec78713          	addi	a4,a5,748 # 204002ec <metal_tty_init>
20402220:	204007b7          	lui	a5,0x20400
20402224:	2e078793          	addi	a5,a5,736 # 204002e0 <_metal_tty_init_ptr>
20402228:	04e7f163          	bgeu	a5,a4,2040226a <metal_init+0x6e>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/init.c:29
        return;
    }

    metal_constructor_t *funcptr = &metal_constructors_start;
2040222c:	204007b7          	lui	a5,0x20400
20402230:	2e078793          	addi	a5,a5,736 # 204002e0 <_metal_tty_init_ptr>
20402234:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/init.c:30
    while (funcptr != &metal_constructors_end) {
20402238:	a831                	j	20402254 <metal_init+0x58>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/init.c:31
        metal_constructor_t func = *funcptr;
2040223a:	fec42783          	lw	a5,-20(s0)
2040223e:	439c                	lw	a5,0(a5)
20402240:	fef42423          	sw	a5,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/init.c:33

        func();
20402244:	fe842783          	lw	a5,-24(s0)
20402248:	9782                	jalr	a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/init.c:35

        funcptr += 1;
2040224a:	fec42783          	lw	a5,-20(s0)
2040224e:	0791                	addi	a5,a5,4
20402250:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/init.c:30
    while (funcptr != &metal_constructors_end) {
20402254:	fec42703          	lw	a4,-20(s0)
20402258:	204007b7          	lui	a5,0x20400
2040225c:	2ec78793          	addi	a5,a5,748 # 204002ec <metal_tty_init>
20402260:	fcf71de3          	bne	a4,a5,2040223a <metal_init+0x3e>
20402264:	a021                	j	2040226c <metal_init+0x70>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/init.c:21
        return;
20402266:	0001                	nop
20402268:	a011                	j	2040226c <metal_init+0x70>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/init.c:26
        return;
2040226a:	0001                	nop
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/init.c:37
    }
}
2040226c:	40f2                	lw	ra,28(sp)
2040226e:	4462                	lw	s0,24(sp)
20402270:	6105                	addi	sp,sp,32
20402272:	8082                	ret

20402274 <metal_fini>:
metal_fini():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/init.c:39

void metal_fini(void) {
20402274:	1101                	addi	sp,sp,-32
20402276:	ce06                	sw	ra,28(sp)
20402278:	cc22                	sw	s0,24(sp)
2040227a:	1000                	addi	s0,sp,32
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/init.c:42
    /* Make sure the destructors only run once */
    static int fini_done = 0;
    if (fini_done) {
2040227c:	800017b7          	lui	a5,0x80001
20402280:	e6c7a783          	lw	a5,-404(a5) # 80000e6c <metal_segment_heap_target_end+0xfffff36c>
20402284:	efa9                	bnez	a5,204022de <metal_fini+0x6a>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/init.c:45
        return;
    }
    fini_done = 1;
20402286:	800017b7          	lui	a5,0x80001
2040228a:	4705                	li	a4,1
2040228c:	e6e7a623          	sw	a4,-404(a5) # 80000e6c <metal_segment_heap_target_end+0xfffff36c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/init.c:47

    if (&metal_destructors_end <= &metal_destructors_start) {
20402290:	204007b7          	lui	a5,0x20400
20402294:	2f078713          	addi	a4,a5,752 # 204002f0 <__fini_array_end>
20402298:	204007b7          	lui	a5,0x20400
2040229c:	2f078793          	addi	a5,a5,752 # 204002f0 <__fini_array_end>
204022a0:	04e7f163          	bgeu	a5,a4,204022e2 <metal_fini+0x6e>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/init.c:51
        return;
    }

    metal_destructor_t *funcptr = &metal_destructors_start;
204022a4:	204007b7          	lui	a5,0x20400
204022a8:	2f078793          	addi	a5,a5,752 # 204002f0 <__fini_array_end>
204022ac:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/init.c:52
    while (funcptr != &metal_destructors_end) {
204022b0:	a831                	j	204022cc <metal_fini+0x58>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/init.c:53
        metal_destructor_t func = *funcptr;
204022b2:	fec42783          	lw	a5,-20(s0)
204022b6:	439c                	lw	a5,0(a5)
204022b8:	fef42423          	sw	a5,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/init.c:55

        func();
204022bc:	fe842783          	lw	a5,-24(s0)
204022c0:	9782                	jalr	a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/init.c:57

        funcptr += 1;
204022c2:	fec42783          	lw	a5,-20(s0)
204022c6:	0791                	addi	a5,a5,4
204022c8:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/init.c:52
    while (funcptr != &metal_destructors_end) {
204022cc:	fec42703          	lw	a4,-20(s0)
204022d0:	204007b7          	lui	a5,0x20400
204022d4:	2f078793          	addi	a5,a5,752 # 204002f0 <__fini_array_end>
204022d8:	fcf71de3          	bne	a4,a5,204022b2 <metal_fini+0x3e>
204022dc:	a021                	j	204022e4 <metal_fini+0x70>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/init.c:43
        return;
204022de:	0001                	nop
204022e0:	a011                	j	204022e4 <metal_fini+0x70>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/init.c:48
        return;
204022e2:	0001                	nop
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/init.c:59
    }
}
204022e4:	40f2                	lw	ra,28(sp)
204022e6:	4462                	lw	s0,24(sp)
204022e8:	6105                	addi	sp,sp,32
204022ea:	8082                	ret

204022ec <metal_init_run>:
metal_init_run():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/init.c:69
 * in the case that users don't want the metal constructors or
 * destructors to run.
 */

void metal_init_run(void) __attribute__((weak));
void metal_init_run(void) { metal_init(); }
204022ec:	1141                	addi	sp,sp,-16
204022ee:	c606                	sw	ra,12(sp)
204022f0:	c422                	sw	s0,8(sp)
204022f2:	0800                	addi	s0,sp,16
204022f4:	3721                	jal	204021fc <metal_init>
204022f6:	0001                	nop
204022f8:	40b2                	lw	ra,12(sp)
204022fa:	4422                	lw	s0,8(sp)
204022fc:	0141                	addi	sp,sp,16
204022fe:	8082                	ret

20402300 <metal_fini_run>:
metal_fini_run():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/init.c:72

void metal_fini_run(void) __attribute__((weak));
void metal_fini_run(void) { metal_fini(); }
20402300:	1141                	addi	sp,sp,-16
20402302:	c606                	sw	ra,12(sp)
20402304:	c422                	sw	s0,8(sp)
20402306:	0800                	addi	s0,sp,16
20402308:	37b5                	jal	20402274 <metal_fini>
2040230a:	0001                	nop
2040230c:	40b2                	lw	ra,12(sp)
2040230e:	4422                	lw	s0,8(sp)
20402310:	0141                	addi	sp,sp,16
20402312:	8082                	ret

20402314 <metal_tty_putc>:
metal_tty_putc():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/tty.c:12
int metal_tty_putc(int c) {
20402314:	1101                	addi	sp,sp,-32
20402316:	ce06                	sw	ra,28(sp)
20402318:	cc22                	sw	s0,24(sp)
2040231a:	1000                	addi	s0,sp,32
2040231c:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/tty.c:13
    return metal_uart_putc(__METAL_DT_STDOUT_UART_HANDLE, c);
20402320:	fec42583          	lw	a1,-20(s0)
20402324:	800017b7          	lui	a5,0x80001
20402328:	de878513          	addi	a0,a5,-536 # 80000de8 <metal_segment_heap_target_end+0xfffff2e8>
2040232c:	282d                	jal	20402366 <metal_uart_putc>
2040232e:	87aa                	mv	a5,a0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/tty.c:14
}
20402330:	853e                	mv	a0,a5
20402332:	40f2                	lw	ra,28(sp)
20402334:	4462                	lw	s0,24(sp)
20402336:	6105                	addi	sp,sp,32
20402338:	8082                	ret

2040233a <metal_uart_init>:
metal_uart_init():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/uart.h:59
 more than once.
 *
 * @param uart The UART device handle
 * @param baud_rate the baud rate to set the UART to
 */
__inline__ void metal_uart_init(struct metal_uart *uart, int baud_rate) {
2040233a:	1101                	addi	sp,sp,-32
2040233c:	ce06                	sw	ra,28(sp)
2040233e:	cc22                	sw	s0,24(sp)
20402340:	1000                	addi	s0,sp,32
20402342:	fea42623          	sw	a0,-20(s0)
20402346:	feb42423          	sw	a1,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/uart.h:60
    uart->vtable->init(uart, baud_rate);
2040234a:	fec42783          	lw	a5,-20(s0)
2040234e:	439c                	lw	a5,0(a5)
20402350:	439c                	lw	a5,0(a5)
20402352:	fe842583          	lw	a1,-24(s0)
20402356:	fec42503          	lw	a0,-20(s0)
2040235a:	9782                	jalr	a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/uart.h:61
}
2040235c:	0001                	nop
2040235e:	40f2                	lw	ra,28(sp)
20402360:	4462                	lw	s0,24(sp)
20402362:	6105                	addi	sp,sp,32
20402364:	8082                	ret

20402366 <metal_uart_putc>:
metal_uart_putc():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/uart.h:69
 * @brief Output a character over the UART
 * @param uart The UART device handle
 * @param c The character to send over the UART
 * @return 0 upon success
 */
__inline__ int metal_uart_putc(struct metal_uart *uart, int c) {
20402366:	1101                	addi	sp,sp,-32
20402368:	ce06                	sw	ra,28(sp)
2040236a:	cc22                	sw	s0,24(sp)
2040236c:	1000                	addi	s0,sp,32
2040236e:	fea42623          	sw	a0,-20(s0)
20402372:	feb42423          	sw	a1,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/uart.h:70
    return uart->vtable->putc(uart, c);
20402376:	fec42783          	lw	a5,-20(s0)
2040237a:	439c                	lw	a5,0(a5)
2040237c:	43dc                	lw	a5,4(a5)
2040237e:	fe842583          	lw	a1,-24(s0)
20402382:	fec42503          	lw	a0,-20(s0)
20402386:	9782                	jalr	a5
20402388:	87aa                	mv	a5,a0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/uart.h:71
}
2040238a:	853e                	mv	a0,a5
2040238c:	40f2                	lw	ra,28(sp)
2040238e:	4462                	lw	s0,24(sp)
20402390:	6105                	addi	sp,sp,32
20402392:	8082                	ret

20402394 <metal_uart_set_baud_rate>:
metal_uart_set_baud_rate():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/uart.h:111
 * @param uart The UART device handle
 * @param baud_rate The baud rate to configure
 * @return the new baud rate of the UART
 */
__inline__ int metal_uart_set_baud_rate(struct metal_uart *uart,
                                        int baud_rate) {
20402394:	1101                	addi	sp,sp,-32
20402396:	ce06                	sw	ra,28(sp)
20402398:	cc22                	sw	s0,24(sp)
2040239a:	1000                	addi	s0,sp,32
2040239c:	fea42623          	sw	a0,-20(s0)
204023a0:	feb42423          	sw	a1,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/uart.h:112
    return uart->vtable->set_baud_rate(uart, baud_rate);
204023a4:	fec42783          	lw	a5,-20(s0)
204023a8:	439c                	lw	a5,0(a5)
204023aa:	4bdc                	lw	a5,20(a5)
204023ac:	fe842583          	lw	a1,-24(s0)
204023b0:	fec42503          	lw	a0,-20(s0)
204023b4:	9782                	jalr	a5
204023b6:	87aa                	mv	a5,a0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/uart.h:113
}
204023b8:	853e                	mv	a0,a5
204023ba:	40f2                	lw	ra,28(sp)
204023bc:	4462                	lw	s0,24(sp)
204023be:	6105                	addi	sp,sp,32
204023c0:	8082                	ret

204023c2 <__metal_driver_sifive_clint0_control_base>:
__metal_driver_sifive_clint0_control_base():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:202
/* --------------------- fixed_factor_clock ------------ */


/* --------------------- sifive_clint0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_clint0_control_base(struct metal_interrupt *controller)
{
204023c2:	1101                	addi	sp,sp,-32
204023c4:	ce22                	sw	s0,28(sp)
204023c6:	1000                	addi	s0,sp,32
204023c8:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:203
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
204023cc:	fec42703          	lw	a4,-20(s0)
204023d0:	800017b7          	lui	a5,0x80001
204023d4:	e3c78793          	addi	a5,a5,-452 # 80000e3c <metal_segment_heap_target_end+0xfffff33c>
204023d8:	00f71563          	bne	a4,a5,204023e2 <__metal_driver_sifive_clint0_control_base+0x20>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:204
		return METAL_RISCV_CLINT0_2000000_BASE_ADDRESS;
204023dc:	020007b7          	lui	a5,0x2000
204023e0:	a011                	j	204023e4 <__metal_driver_sifive_clint0_control_base+0x22>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:207
	}
	else {
		return 0;
204023e2:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:209
	}
}
204023e4:	853e                	mv	a0,a5
204023e6:	4472                	lw	s0,28(sp)
204023e8:	6105                	addi	sp,sp,32
204023ea:	8082                	ret

204023ec <__metal_driver_sifive_clint0_num_interrupts>:
__metal_driver_sifive_clint0_num_interrupts():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:222
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_clint0_num_interrupts(struct metal_interrupt *controller)
{
204023ec:	1101                	addi	sp,sp,-32
204023ee:	ce22                	sw	s0,28(sp)
204023f0:	1000                	addi	s0,sp,32
204023f2:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:223
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
204023f6:	fec42703          	lw	a4,-20(s0)
204023fa:	800017b7          	lui	a5,0x80001
204023fe:	e3c78793          	addi	a5,a5,-452 # 80000e3c <metal_segment_heap_target_end+0xfffff33c>
20402402:	00f71463          	bne	a4,a5,2040240a <__metal_driver_sifive_clint0_num_interrupts+0x1e>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:224
		return METAL_MAX_CLINT_INTERRUPTS;
20402406:	4789                	li	a5,2
20402408:	a011                	j	2040240c <__metal_driver_sifive_clint0_num_interrupts+0x20>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:227
	}
	else {
		return 0;
2040240a:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:229
	}
}
2040240c:	853e                	mv	a0,a5
2040240e:	4472                	lw	s0,28(sp)
20402410:	6105                	addi	sp,sp,32
20402412:	8082                	ret

20402414 <__metal_driver_sifive_clint0_interrupt_parents>:
__metal_driver_sifive_clint0_interrupt_parents():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:232

static __inline__ struct metal_interrupt * __metal_driver_sifive_clint0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20402414:	1101                	addi	sp,sp,-32
20402416:	ce22                	sw	s0,28(sp)
20402418:	1000                	addi	s0,sp,32
2040241a:	fea42623          	sw	a0,-20(s0)
2040241e:	feb42423          	sw	a1,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:233
	if (idx == 0) {
20402422:	fe842783          	lw	a5,-24(s0)
20402426:	e791                	bnez	a5,20402432 <__metal_driver_sifive_clint0_interrupt_parents+0x1e>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:234
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20402428:	800007b7          	lui	a5,0x80000
2040242c:	71878793          	addi	a5,a5,1816 # 80000718 <metal_segment_heap_target_end+0xffffec18>
20402430:	a821                	j	20402448 <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:236
	}
	else if (idx == 1) {
20402432:	fe842703          	lw	a4,-24(s0)
20402436:	4785                	li	a5,1
20402438:	00f71763          	bne	a4,a5,20402446 <__metal_driver_sifive_clint0_interrupt_parents+0x32>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:237
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
2040243c:	800007b7          	lui	a5,0x80000
20402440:	71878793          	addi	a5,a5,1816 # 80000718 <metal_segment_heap_target_end+0xffffec18>
20402444:	a011                	j	20402448 <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:240
	}
	else {
		return NULL;
20402446:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:242
	}
}
20402448:	853e                	mv	a0,a5
2040244a:	4472                	lw	s0,28(sp)
2040244c:	6105                	addi	sp,sp,32
2040244e:	8082                	ret

20402450 <__metal_driver_sifive_clint0_interrupt_lines>:
__metal_driver_sifive_clint0_interrupt_lines():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:245

static __inline__ int __metal_driver_sifive_clint0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
20402450:	1101                	addi	sp,sp,-32
20402452:	ce22                	sw	s0,28(sp)
20402454:	1000                	addi	s0,sp,32
20402456:	fea42623          	sw	a0,-20(s0)
2040245a:	feb42423          	sw	a1,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:246
	if (idx == 0) {
2040245e:	fe842783          	lw	a5,-24(s0)
20402462:	e399                	bnez	a5,20402468 <__metal_driver_sifive_clint0_interrupt_lines+0x18>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:247
		return 3;
20402464:	478d                	li	a5,3
20402466:	a809                	j	20402478 <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:249
	}
	else if (idx == 1) {
20402468:	fe842703          	lw	a4,-24(s0)
2040246c:	4785                	li	a5,1
2040246e:	00f71463          	bne	a4,a5,20402476 <__metal_driver_sifive_clint0_interrupt_lines+0x26>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:250
		return 7;
20402472:	479d                	li	a5,7
20402474:	a011                	j	20402478 <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:253
	}
	else {
		return 0;
20402476:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:255
	}
}
20402478:	853e                	mv	a0,a5
2040247a:	4472                	lw	s0,28(sp)
2040247c:	6105                	addi	sp,sp,32
2040247e:	8082                	ret

20402480 <__metal_clint0_mtime_get>:
__metal_clint0_mtime_get():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:14
#include <metal/drivers/riscv_clint0.h>
#include <metal/io.h>
#include <metal/machine.h>

unsigned long long
__metal_clint0_mtime_get(struct __metal_driver_riscv_clint0 *clint) {
20402480:	715d                	addi	sp,sp,-80
20402482:	c686                	sw	ra,76(sp)
20402484:	c4a2                	sw	s0,72(sp)
20402486:	c2ca                	sw	s2,68(sp)
20402488:	c0ce                	sw	s3,64(sp)
2040248a:	de52                	sw	s4,60(sp)
2040248c:	dc56                	sw	s5,56(sp)
2040248e:	da5a                	sw	s6,52(sp)
20402490:	d85e                	sw	s7,48(sp)
20402492:	d662                	sw	s8,44(sp)
20402494:	d466                	sw	s9,40(sp)
20402496:	0880                	addi	s0,sp,80
20402498:	faa42e23          	sw	a0,-68(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:17
    __metal_io_u32 lo, hi;
    unsigned long control_base =
        __metal_driver_sifive_clint0_control_base(&clint->controller);
2040249c:	fbc42783          	lw	a5,-68(s0)
204024a0:	853e                	mv	a0,a5
204024a2:	3705                	jal	204023c2 <__metal_driver_sifive_clint0_control_base>
204024a4:	fca42623          	sw	a0,-52(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:21 (discriminator 1)

    /* Guard against rollover when reading */
    do {
        hi = __METAL_ACCESS_ONCE(
204024a8:	fcc42703          	lw	a4,-52(s0)
204024ac:	67b1                	lui	a5,0xc
204024ae:	17f1                	addi	a5,a5,-4
204024b0:	97ba                	add	a5,a5,a4
204024b2:	439c                	lw	a5,0(a5)
204024b4:	fcf42423          	sw	a5,-56(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:23 (discriminator 1)
            (__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4));
        lo = __METAL_ACCESS_ONCE(
204024b8:	fcc42703          	lw	a4,-52(s0)
204024bc:	67b1                	lui	a5,0xc
204024be:	17e1                	addi	a5,a5,-8
204024c0:	97ba                	add	a5,a5,a4
204024c2:	439c                	lw	a5,0(a5)
204024c4:	fcf42223          	sw	a5,-60(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:25 (discriminator 1)
            (__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME));
    } while (__METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204024c8:	fcc42703          	lw	a4,-52(s0)
204024cc:	67b1                	lui	a5,0xc
204024ce:	17f1                	addi	a5,a5,-4
204024d0:	97ba                	add	a5,a5,a4
204024d2:	439c                	lw	a5,0(a5)
204024d4:	fc842703          	lw	a4,-56(s0)
204024d8:	fcf718e3          	bne	a4,a5,204024a8 <__metal_clint0_mtime_get+0x28>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:29
                                                    METAL_RISCV_CLINT0_MTIME +
                                                    4)) != hi);

    return (((unsigned long long)hi) << 32) | lo;
204024dc:	fc842783          	lw	a5,-56(s0)
204024e0:	8c3e                	mv	s8,a5
204024e2:	4c81                	li	s9,0
204024e4:	000c1993          	slli	s3,s8,0x0
204024e8:	4901                	li	s2,0
204024ea:	fc442783          	lw	a5,-60(s0)
204024ee:	8a3e                	mv	s4,a5
204024f0:	4a81                	li	s5,0
204024f2:	01496b33          	or	s6,s2,s4
204024f6:	0159ebb3          	or	s7,s3,s5
204024fa:	875a                	mv	a4,s6
204024fc:	87de                	mv	a5,s7
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:30
}
204024fe:	853a                	mv	a0,a4
20402500:	85be                	mv	a1,a5
20402502:	40b6                	lw	ra,76(sp)
20402504:	4426                	lw	s0,72(sp)
20402506:	4916                	lw	s2,68(sp)
20402508:	4986                	lw	s3,64(sp)
2040250a:	5a72                	lw	s4,60(sp)
2040250c:	5ae2                	lw	s5,56(sp)
2040250e:	5b52                	lw	s6,52(sp)
20402510:	5bc2                	lw	s7,48(sp)
20402512:	5c32                	lw	s8,44(sp)
20402514:	5ca2                	lw	s9,40(sp)
20402516:	6161                	addi	sp,sp,80
20402518:	8082                	ret

2040251a <__metal_driver_riscv_clint0_mtimecmp_set>:
__metal_driver_riscv_clint0_mtimecmp_set():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:34

int __metal_driver_riscv_clint0_mtimecmp_set(struct metal_interrupt *controller,
                                             int hartid,
                                             unsigned long long time) {
2040251a:	7179                	addi	sp,sp,-48
2040251c:	d606                	sw	ra,44(sp)
2040251e:	d422                	sw	s0,40(sp)
20402520:	d24a                	sw	s2,36(sp)
20402522:	d04e                	sw	s3,32(sp)
20402524:	1800                	addi	s0,sp,48
20402526:	fca42e23          	sw	a0,-36(s0)
2040252a:	fcb42c23          	sw	a1,-40(s0)
2040252e:	fcc42823          	sw	a2,-48(s0)
20402532:	fcd42a23          	sw	a3,-44(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:35
    struct __metal_driver_riscv_clint0 *clint =
20402536:	fdc42783          	lw	a5,-36(s0)
2040253a:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:38
        (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base =
        __metal_driver_sifive_clint0_control_base(&clint->controller);
2040253e:	fec42783          	lw	a5,-20(s0)
20402542:	853e                	mv	a0,a5
20402544:	3dbd                	jal	204023c2 <__metal_driver_sifive_clint0_control_base>
20402546:	fea42423          	sw	a0,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:45
     * and are NOT internally latched for multiword transfers.
     * Need to be careful about sequencing to avoid triggering
     * spurious interrupts: For that set the high word to a max
     * value first.
     */
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) +
2040254a:	fd842783          	lw	a5,-40(s0)
2040254e:	078e                	slli	a5,a5,0x3
20402550:	873e                	mv	a4,a5
20402552:	fe842783          	lw	a5,-24(s0)
20402556:	973e                	add	a4,a4,a5
20402558:	6791                	lui	a5,0x4
2040255a:	0791                	addi	a5,a5,4
2040255c:	97ba                	add	a5,a5,a4
2040255e:	873e                	mv	a4,a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:47
                                           METAL_RISCV_CLINT0_MTIMECMP_BASE +
                                           4)) = 0xFFFFFFFF;
20402560:	57fd                	li	a5,-1
20402562:	c31c                	sw	a5,0(a4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:48
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) +
20402564:	fd842783          	lw	a5,-40(s0)
20402568:	078e                	slli	a5,a5,0x3
2040256a:	873e                	mv	a4,a5
2040256c:	fe842783          	lw	a5,-24(s0)
20402570:	973e                	add	a4,a4,a5
20402572:	6791                	lui	a5,0x4
20402574:	97ba                	add	a5,a5,a4
20402576:	873e                	mv	a4,a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:50
                                           METAL_RISCV_CLINT0_MTIMECMP_BASE)) =
        (__metal_io_u32)time;
20402578:	fd042783          	lw	a5,-48(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:49
                                           METAL_RISCV_CLINT0_MTIMECMP_BASE)) =
2040257c:	c31c                	sw	a5,0(a4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:53
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) +
                                           METAL_RISCV_CLINT0_MTIMECMP_BASE +
                                           4)) = (__metal_io_u32)(time >> 32);
2040257e:	fd442783          	lw	a5,-44(s0)
20402582:	0007d913          	srli	s2,a5,0x0
20402586:	4981                	li	s3,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:51
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) +
20402588:	fd842783          	lw	a5,-40(s0)
2040258c:	078e                	slli	a5,a5,0x3
2040258e:	873e                	mv	a4,a5
20402590:	fe842783          	lw	a5,-24(s0)
20402594:	973e                	add	a4,a4,a5
20402596:	6791                	lui	a5,0x4
20402598:	0791                	addi	a5,a5,4
2040259a:	97ba                	add	a5,a5,a4
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:53
                                           4)) = (__metal_io_u32)(time >> 32);
2040259c:	874a                	mv	a4,s2
2040259e:	c398                	sw	a4,0(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:54
    return 0;
204025a0:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:55
}
204025a2:	853e                	mv	a0,a5
204025a4:	50b2                	lw	ra,44(sp)
204025a6:	5422                	lw	s0,40(sp)
204025a8:	5912                	lw	s2,36(sp)
204025aa:	5982                	lw	s3,32(sp)
204025ac:	6145                	addi	sp,sp,48
204025ae:	8082                	ret

204025b0 <_get_cpu_intc>:
_get_cpu_intc():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:57

static struct metal_interrupt *_get_cpu_intc() {
204025b0:	1101                	addi	sp,sp,-32
204025b2:	ce06                	sw	ra,28(sp)
204025b4:	cc22                	sw	s0,24(sp)
204025b6:	1000                	addi	s0,sp,32
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:58
    int hartid = 0;
204025b8:	fe042623          	sw	zero,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:59
    __asm__ volatile("csrr %[hartid], mhartid"
204025bc:	f14027f3          	csrr	a5,mhartid
204025c0:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:62
                     : [hartid] "=r"(hartid)::"memory");

    struct metal_cpu *cpu = metal_cpu_get(hartid);
204025c4:	fec42783          	lw	a5,-20(s0)
204025c8:	853e                	mv	a0,a5
204025ca:	26c040ef          	jal	ra,20406836 <metal_cpu_get>
204025ce:	fea42423          	sw	a0,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:64

    return metal_cpu_interrupt_controller(cpu);
204025d2:	fe842503          	lw	a0,-24(s0)
204025d6:	23a040ef          	jal	ra,20406810 <metal_cpu_interrupt_controller>
204025da:	87aa                	mv	a5,a0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:65
}
204025dc:	853e                	mv	a0,a5
204025de:	40f2                	lw	ra,28(sp)
204025e0:	4462                	lw	s0,24(sp)
204025e2:	6105                	addi	sp,sp,32
204025e4:	8082                	ret

204025e6 <__metal_driver_riscv_clint0_init>:
__metal_driver_riscv_clint0_init():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:67

void __metal_driver_riscv_clint0_init(struct metal_interrupt *controller) {
204025e6:	7139                	addi	sp,sp,-64
204025e8:	de06                	sw	ra,60(sp)
204025ea:	dc22                	sw	s0,56(sp)
204025ec:	0080                	addi	s0,sp,64
204025ee:	fca42623          	sw	a0,-52(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:69
    int num_interrupts =
        __metal_driver_sifive_clint0_num_interrupts(controller);
204025f2:	fcc42503          	lw	a0,-52(s0)
204025f6:	3bdd                	jal	204023ec <__metal_driver_sifive_clint0_num_interrupts>
204025f8:	fea42423          	sw	a0,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:70
    struct __metal_driver_riscv_clint0 *clint =
204025fc:	fcc42783          	lw	a5,-52(s0)
20402600:	fef42223          	sw	a5,-28(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:73
        (struct __metal_driver_riscv_clint0 *)(controller);

    if (!clint->init_done) {
20402604:	fe442783          	lw	a5,-28(s0)
20402608:	43dc                	lw	a5,4(a5)
2040260a:	efa9                	bnez	a5,20402664 <__metal_driver_riscv_clint0_init+0x7e>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:76
        /* Register its interrupts with with parent controller, aka sw and
         * timerto its default isr */
        for (int i = 0; i < num_interrupts; i++) {
2040260c:	fe042623          	sw	zero,-20(s0)
20402610:	a081                	j	20402650 <__metal_driver_riscv_clint0_init+0x6a>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:78 (discriminator 3)
            struct metal_interrupt *intc =
                __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20402612:	fec42583          	lw	a1,-20(s0)
20402616:	fcc42503          	lw	a0,-52(s0)
2040261a:	3bed                	jal	20402414 <__metal_driver_sifive_clint0_interrupt_parents>
2040261c:	fea42023          	sw	a0,-32(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:80 (discriminator 3)
            int line =
                __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20402620:	fec42583          	lw	a1,-20(s0)
20402624:	fcc42503          	lw	a0,-52(s0)
20402628:	3525                	jal	20402450 <__metal_driver_sifive_clint0_interrupt_lines>
2040262a:	fca42e23          	sw	a0,-36(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:81 (discriminator 3)
            intc->vtable->interrupt_register(intc, line, NULL, controller);
2040262e:	fe042783          	lw	a5,-32(s0)
20402632:	439c                	lw	a5,0(a5)
20402634:	4fdc                	lw	a5,28(a5)
20402636:	fcc42683          	lw	a3,-52(s0)
2040263a:	4601                	li	a2,0
2040263c:	fdc42583          	lw	a1,-36(s0)
20402640:	fe042503          	lw	a0,-32(s0)
20402644:	9782                	jalr	a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:76 (discriminator 3)
        for (int i = 0; i < num_interrupts; i++) {
20402646:	fec42783          	lw	a5,-20(s0)
2040264a:	0785                	addi	a5,a5,1
2040264c:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:76 (discriminator 1)
20402650:	fec42703          	lw	a4,-20(s0)
20402654:	fe842783          	lw	a5,-24(s0)
20402658:	faf74de3          	blt	a4,a5,20402612 <__metal_driver_riscv_clint0_init+0x2c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:83
        }
        clint->init_done = 1;
2040265c:	fe442783          	lw	a5,-28(s0)
20402660:	4705                	li	a4,1
20402662:	c3d8                	sw	a4,4(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:85
    }
}
20402664:	0001                	nop
20402666:	50f2                	lw	ra,60(sp)
20402668:	5462                	lw	s0,56(sp)
2040266a:	6121                	addi	sp,sp,64
2040266c:	8082                	ret

2040266e <__metal_driver_riscv_clint0_register>:
__metal_driver_riscv_clint0_register():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:89

int __metal_driver_riscv_clint0_register(struct metal_interrupt *controller,
                                         int id, metal_interrupt_handler_t isr,
                                         void *priv) {
2040266e:	7139                	addi	sp,sp,-64
20402670:	de06                	sw	ra,60(sp)
20402672:	dc22                	sw	s0,56(sp)
20402674:	0080                	addi	s0,sp,64
20402676:	fca42623          	sw	a0,-52(s0)
2040267a:	fcb42423          	sw	a1,-56(s0)
2040267e:	fcc42223          	sw	a2,-60(s0)
20402682:	fcd42023          	sw	a3,-64(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:90
    int rc = -1;
20402686:	57fd                	li	a5,-1
20402688:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:91
    metal_vector_mode mode = __metal_controller_interrupt_vector_mode();
2040268c:	44c010ef          	jal	ra,20403ad8 <__metal_controller_interrupt_vector_mode>
20402690:	fea42023          	sw	a0,-32(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:92
    struct metal_interrupt *intc = NULL;
20402694:	fe042423          	sw	zero,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:93
    struct metal_interrupt *cpu_intc = _get_cpu_intc();
20402698:	3f21                	jal	204025b0 <_get_cpu_intc>
2040269a:	fca42e23          	sw	a0,-36(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:95
    int num_interrupts =
        __metal_driver_sifive_clint0_num_interrupts(controller);
2040269e:	fcc42503          	lw	a0,-52(s0)
204026a2:	33a9                	jal	204023ec <__metal_driver_sifive_clint0_num_interrupts>
204026a4:	fca42c23          	sw	a0,-40(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:97

    if ((mode != METAL_VECTOR_MODE) && (mode != METAL_DIRECT_MODE)) {
204026a8:	fe042703          	lw	a4,-32(s0)
204026ac:	4785                	li	a5,1
204026ae:	00f70863          	beq	a4,a5,204026be <__metal_driver_riscv_clint0_register+0x50>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:97 (discriminator 1)
204026b2:	fe042783          	lw	a5,-32(s0)
204026b6:	c781                	beqz	a5,204026be <__metal_driver_riscv_clint0_register+0x50>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:98
        return rc;
204026b8:	fec42783          	lw	a5,-20(s0)
204026bc:	a049                	j	2040273e <__metal_driver_riscv_clint0_register+0xd0>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:101
    }

    for (int i = 0; i < num_interrupts; i++) {
204026be:	fe042223          	sw	zero,-28(s0)
204026c2:	a091                	j	20402706 <__metal_driver_riscv_clint0_register+0x98>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:102
        int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
204026c4:	fe442583          	lw	a1,-28(s0)
204026c8:	fcc42503          	lw	a0,-52(s0)
204026cc:	3351                	jal	20402450 <__metal_driver_sifive_clint0_interrupt_lines>
204026ce:	fca42a23          	sw	a0,-44(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:103
        intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
204026d2:	fe442583          	lw	a1,-28(s0)
204026d6:	fcc42503          	lw	a0,-52(s0)
204026da:	3b2d                	jal	20402414 <__metal_driver_sifive_clint0_interrupt_parents>
204026dc:	fea42423          	sw	a0,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:104
        if (cpu_intc == intc && id == line) {
204026e0:	fdc42703          	lw	a4,-36(s0)
204026e4:	fe842783          	lw	a5,-24(s0)
204026e8:	00f71863          	bne	a4,a5,204026f8 <__metal_driver_riscv_clint0_register+0x8a>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:104 (discriminator 1)
204026ec:	fc842703          	lw	a4,-56(s0)
204026f0:	fd442783          	lw	a5,-44(s0)
204026f4:	02f70063          	beq	a4,a5,20402714 <__metal_driver_riscv_clint0_register+0xa6>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:107 (discriminator 2)
            break;
        }
        intc = NULL;
204026f8:	fe042423          	sw	zero,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:101 (discriminator 2)
    for (int i = 0; i < num_interrupts; i++) {
204026fc:	fe442783          	lw	a5,-28(s0)
20402700:	0785                	addi	a5,a5,1
20402702:	fef42223          	sw	a5,-28(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:101 (discriminator 1)
20402706:	fe442703          	lw	a4,-28(s0)
2040270a:	fd842783          	lw	a5,-40(s0)
2040270e:	faf74be3          	blt	a4,a5,204026c4 <__metal_driver_riscv_clint0_register+0x56>
20402712:	a011                	j	20402716 <__metal_driver_riscv_clint0_register+0xa8>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:105
            break;
20402714:	0001                	nop
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:111
    }

    /* Register its interrupts with parent controller */
    if (intc) {
20402716:	fe842783          	lw	a5,-24(s0)
2040271a:	c385                	beqz	a5,2040273a <__metal_driver_riscv_clint0_register+0xcc>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:112
        rc = intc->vtable->interrupt_register(intc, id, isr, priv);
2040271c:	fe842783          	lw	a5,-24(s0)
20402720:	439c                	lw	a5,0(a5)
20402722:	4fdc                	lw	a5,28(a5)
20402724:	fc042683          	lw	a3,-64(s0)
20402728:	fc442603          	lw	a2,-60(s0)
2040272c:	fc842583          	lw	a1,-56(s0)
20402730:	fe842503          	lw	a0,-24(s0)
20402734:	9782                	jalr	a5
20402736:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:114
    }
    return rc;
2040273a:	fec42783          	lw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:115
}
2040273e:	853e                	mv	a0,a5
20402740:	50f2                	lw	ra,60(sp)
20402742:	5462                	lw	s0,56(sp)
20402744:	6121                	addi	sp,sp,64
20402746:	8082                	ret

20402748 <__metal_driver_riscv_clint0_vector_register>:
__metal_driver_riscv_clint0_vector_register():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:119

int __metal_driver_riscv_clint0_vector_register(
    struct metal_interrupt *controller, int id,
    metal_interrupt_vector_handler_t isr, void *priv) {
20402748:	7179                	addi	sp,sp,-48
2040274a:	d622                	sw	s0,44(sp)
2040274c:	1800                	addi	s0,sp,48
2040274e:	fca42e23          	sw	a0,-36(s0)
20402752:	fcb42c23          	sw	a1,-40(s0)
20402756:	fcc42a23          	sw	a2,-44(s0)
2040275a:	fcd42823          	sw	a3,-48(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:121
    /* Not supported. User can override the 'weak' handler with their own */
    int rc = -1;
2040275e:	57fd                	li	a5,-1
20402760:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:122
    return rc;
20402764:	fec42783          	lw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:123
}
20402768:	853e                	mv	a0,a5
2040276a:	5432                	lw	s0,44(sp)
2040276c:	6145                	addi	sp,sp,48
2040276e:	8082                	ret

20402770 <__metal_driver_riscv_clint0_get_vector_mode>:
__metal_driver_riscv_clint0_get_vector_mode():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:126

metal_vector_mode __metal_driver_riscv_clint0_get_vector_mode(
    struct metal_interrupt *controller) {
20402770:	1101                	addi	sp,sp,-32
20402772:	ce06                	sw	ra,28(sp)
20402774:	cc22                	sw	s0,24(sp)
20402776:	1000                	addi	s0,sp,32
20402778:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:127
    return __metal_controller_interrupt_vector_mode();
2040277c:	35c010ef          	jal	ra,20403ad8 <__metal_controller_interrupt_vector_mode>
20402780:	87aa                	mv	a5,a0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:128
}
20402782:	853e                	mv	a0,a5
20402784:	40f2                	lw	ra,28(sp)
20402786:	4462                	lw	s0,24(sp)
20402788:	6105                	addi	sp,sp,32
2040278a:	8082                	ret

2040278c <__metal_driver_riscv_clint0_set_vector_mode>:
__metal_driver_riscv_clint0_set_vector_mode():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:131

int __metal_driver_riscv_clint0_set_vector_mode(
    struct metal_interrupt *controller, metal_vector_mode mode) {
2040278c:	7179                	addi	sp,sp,-48
2040278e:	d606                	sw	ra,44(sp)
20402790:	d422                	sw	s0,40(sp)
20402792:	1800                	addi	s0,sp,48
20402794:	fca42e23          	sw	a0,-36(s0)
20402798:	fcb42c23          	sw	a1,-40(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:132
    int rc = -1;
2040279c:	57fd                	li	a5,-1
2040279e:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:133
    struct metal_interrupt *intc = _get_cpu_intc();
204027a2:	3539                	jal	204025b0 <_get_cpu_intc>
204027a4:	fea42423          	sw	a0,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:135

    if (intc) {
204027a8:	fe842783          	lw	a5,-24(s0)
204027ac:	c395                	beqz	a5,204027d0 <__metal_driver_riscv_clint0_set_vector_mode+0x44>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:138
        /* Valid vector modes are VECTOR and DIRECT, anything else is invalid
         * (-1) */
        switch (mode) {
204027ae:	fd842703          	lw	a4,-40(s0)
204027b2:	4785                	li	a5,1
204027b4:	02e7e063          	bltu	a5,a4,204027d4 <__metal_driver_riscv_clint0_set_vector_mode+0x48>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:141
        case METAL_VECTOR_MODE:
        case METAL_DIRECT_MODE:
            rc = intc->vtable->interrupt_set_vector_mode(intc, mode);
204027b8:	fe842783          	lw	a5,-24(s0)
204027bc:	439c                	lw	a5,0(a5)
204027be:	43dc                	lw	a5,4(a5)
204027c0:	fd842583          	lw	a1,-40(s0)
204027c4:	fe842503          	lw	a0,-24(s0)
204027c8:	9782                	jalr	a5
204027ca:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:142
            break;
204027ce:	a021                	j	204027d6 <__metal_driver_riscv_clint0_set_vector_mode+0x4a>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:146
        default:
            break;
        }
    }
204027d0:	0001                	nop
204027d2:	a011                	j	204027d6 <__metal_driver_riscv_clint0_set_vector_mode+0x4a>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:144
            break;
204027d4:	0001                	nop
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:147
    return rc;
204027d6:	fec42783          	lw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:148
}
204027da:	853e                	mv	a0,a5
204027dc:	50b2                	lw	ra,44(sp)
204027de:	5422                	lw	s0,40(sp)
204027e0:	6145                	addi	sp,sp,48
204027e2:	8082                	ret

204027e4 <__metal_driver_riscv_clint0_enable>:
__metal_driver_riscv_clint0_enable():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:151

int __metal_driver_riscv_clint0_enable(struct metal_interrupt *controller,
                                       int id) {
204027e4:	7139                	addi	sp,sp,-64
204027e6:	de06                	sw	ra,60(sp)
204027e8:	dc22                	sw	s0,56(sp)
204027ea:	0080                	addi	s0,sp,64
204027ec:	fca42623          	sw	a0,-52(s0)
204027f0:	fcb42423          	sw	a1,-56(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:152
    int rc = -1;
204027f4:	57fd                	li	a5,-1
204027f6:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:154

    if (id) {
204027fa:	fc842783          	lw	a5,-56(s0)
204027fe:	c7c9                	beqz	a5,20402888 <__metal_driver_riscv_clint0_enable+0xa4>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:155
        struct metal_interrupt *intc = NULL;
20402800:	fe042423          	sw	zero,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:156
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
20402804:	3375                	jal	204025b0 <_get_cpu_intc>
20402806:	fea42023          	sw	a0,-32(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:158
        int num_interrupts =
            __metal_driver_sifive_clint0_num_interrupts(controller);
2040280a:	fcc42503          	lw	a0,-52(s0)
2040280e:	3ef9                	jal	204023ec <__metal_driver_sifive_clint0_num_interrupts>
20402810:	fca42e23          	sw	a0,-36(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:160

        for (int i = 0; i < num_interrupts; i++) {
20402814:	fe042223          	sw	zero,-28(s0)
20402818:	a091                	j	2040285c <__metal_driver_riscv_clint0_enable+0x78>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:162
            int line =
                __metal_driver_sifive_clint0_interrupt_lines(controller, i);
2040281a:	fe442583          	lw	a1,-28(s0)
2040281e:	fcc42503          	lw	a0,-52(s0)
20402822:	313d                	jal	20402450 <__metal_driver_sifive_clint0_interrupt_lines>
20402824:	fca42c23          	sw	a0,-40(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:164
            intc =
                __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20402828:	fe442583          	lw	a1,-28(s0)
2040282c:	fcc42503          	lw	a0,-52(s0)
20402830:	36d5                	jal	20402414 <__metal_driver_sifive_clint0_interrupt_parents>
20402832:	fea42423          	sw	a0,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:165
            if (cpu_intc == intc && id == line) {
20402836:	fe042703          	lw	a4,-32(s0)
2040283a:	fe842783          	lw	a5,-24(s0)
2040283e:	00f71863          	bne	a4,a5,2040284e <__metal_driver_riscv_clint0_enable+0x6a>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:165 (discriminator 1)
20402842:	fc842703          	lw	a4,-56(s0)
20402846:	fd842783          	lw	a5,-40(s0)
2040284a:	02f70063          	beq	a4,a5,2040286a <__metal_driver_riscv_clint0_enable+0x86>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:168 (discriminator 2)
                break;
            }
            intc = NULL;
2040284e:	fe042423          	sw	zero,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:160 (discriminator 2)
        for (int i = 0; i < num_interrupts; i++) {
20402852:	fe442783          	lw	a5,-28(s0)
20402856:	0785                	addi	a5,a5,1
20402858:	fef42223          	sw	a5,-28(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:160 (discriminator 1)
2040285c:	fe442703          	lw	a4,-28(s0)
20402860:	fdc42783          	lw	a5,-36(s0)
20402864:	faf74be3          	blt	a4,a5,2040281a <__metal_driver_riscv_clint0_enable+0x36>
20402868:	a011                	j	2040286c <__metal_driver_riscv_clint0_enable+0x88>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:166
                break;
2040286a:	0001                	nop
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:172
        }

        /* Enable its interrupts with parent controller */
        if (intc) {
2040286c:	fe842783          	lw	a5,-24(s0)
20402870:	cf81                	beqz	a5,20402888 <__metal_driver_riscv_clint0_enable+0xa4>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:173
            rc = intc->vtable->interrupt_enable(intc, id);
20402872:	fe842783          	lw	a5,-24(s0)
20402876:	439c                	lw	a5,0(a5)
20402878:	53dc                	lw	a5,36(a5)
2040287a:	fc842583          	lw	a1,-56(s0)
2040287e:	fe842503          	lw	a0,-24(s0)
20402882:	9782                	jalr	a5
20402884:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:177
        }
    }

    return rc;
20402888:	fec42783          	lw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:178
}
2040288c:	853e                	mv	a0,a5
2040288e:	50f2                	lw	ra,60(sp)
20402890:	5462                	lw	s0,56(sp)
20402892:	6121                	addi	sp,sp,64
20402894:	8082                	ret

20402896 <__metal_driver_riscv_clint0_disable>:
__metal_driver_riscv_clint0_disable():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:181

int __metal_driver_riscv_clint0_disable(struct metal_interrupt *controller,
                                        int id) {
20402896:	7139                	addi	sp,sp,-64
20402898:	de06                	sw	ra,60(sp)
2040289a:	dc22                	sw	s0,56(sp)
2040289c:	0080                	addi	s0,sp,64
2040289e:	fca42623          	sw	a0,-52(s0)
204028a2:	fcb42423          	sw	a1,-56(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:182
    int rc = -1;
204028a6:	57fd                	li	a5,-1
204028a8:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:184

    if (id) {
204028ac:	fc842783          	lw	a5,-56(s0)
204028b0:	c7c9                	beqz	a5,2040293a <__metal_driver_riscv_clint0_disable+0xa4>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:185
        struct metal_interrupt *intc = NULL;
204028b2:	fe042423          	sw	zero,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:186
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
204028b6:	39ed                	jal	204025b0 <_get_cpu_intc>
204028b8:	fea42023          	sw	a0,-32(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:188
        int num_interrupts =
            __metal_driver_sifive_clint0_num_interrupts(controller);
204028bc:	fcc42503          	lw	a0,-52(s0)
204028c0:	3635                	jal	204023ec <__metal_driver_sifive_clint0_num_interrupts>
204028c2:	fca42e23          	sw	a0,-36(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:190

        for (int i = 0; i < num_interrupts; i++) {
204028c6:	fe042223          	sw	zero,-28(s0)
204028ca:	a091                	j	2040290e <__metal_driver_riscv_clint0_disable+0x78>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:192
            int line =
                __metal_driver_sifive_clint0_interrupt_lines(controller, i);
204028cc:	fe442583          	lw	a1,-28(s0)
204028d0:	fcc42503          	lw	a0,-52(s0)
204028d4:	3eb5                	jal	20402450 <__metal_driver_sifive_clint0_interrupt_lines>
204028d6:	fca42c23          	sw	a0,-40(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:194
            intc =
                __metal_driver_sifive_clint0_interrupt_parents(controller, i);
204028da:	fe442583          	lw	a1,-28(s0)
204028de:	fcc42503          	lw	a0,-52(s0)
204028e2:	3e0d                	jal	20402414 <__metal_driver_sifive_clint0_interrupt_parents>
204028e4:	fea42423          	sw	a0,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:195
            if (cpu_intc == intc && id == line) {
204028e8:	fe042703          	lw	a4,-32(s0)
204028ec:	fe842783          	lw	a5,-24(s0)
204028f0:	00f71863          	bne	a4,a5,20402900 <__metal_driver_riscv_clint0_disable+0x6a>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:195 (discriminator 1)
204028f4:	fc842703          	lw	a4,-56(s0)
204028f8:	fd842783          	lw	a5,-40(s0)
204028fc:	02f70063          	beq	a4,a5,2040291c <__metal_driver_riscv_clint0_disable+0x86>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:198 (discriminator 2)
                break;
            }
            intc = NULL;
20402900:	fe042423          	sw	zero,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:190 (discriminator 2)
        for (int i = 0; i < num_interrupts; i++) {
20402904:	fe442783          	lw	a5,-28(s0)
20402908:	0785                	addi	a5,a5,1
2040290a:	fef42223          	sw	a5,-28(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:190 (discriminator 1)
2040290e:	fe442703          	lw	a4,-28(s0)
20402912:	fdc42783          	lw	a5,-36(s0)
20402916:	faf74be3          	blt	a4,a5,204028cc <__metal_driver_riscv_clint0_disable+0x36>
2040291a:	a011                	j	2040291e <__metal_driver_riscv_clint0_disable+0x88>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:196
                break;
2040291c:	0001                	nop
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:202
        }

        /* Disable its interrupts with parent controller */
        if (intc) {
2040291e:	fe842783          	lw	a5,-24(s0)
20402922:	cf81                	beqz	a5,2040293a <__metal_driver_riscv_clint0_disable+0xa4>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:203
            rc = intc->vtable->interrupt_disable(intc, id);
20402924:	fe842783          	lw	a5,-24(s0)
20402928:	439c                	lw	a5,0(a5)
2040292a:	579c                	lw	a5,40(a5)
2040292c:	fc842583          	lw	a1,-56(s0)
20402930:	fe842503          	lw	a0,-24(s0)
20402934:	9782                	jalr	a5
20402936:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:207
        }
    }

    return rc;
2040293a:	fec42783          	lw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:208
}
2040293e:	853e                	mv	a0,a5
20402940:	50f2                	lw	ra,60(sp)
20402942:	5462                	lw	s0,56(sp)
20402944:	6121                	addi	sp,sp,64
20402946:	8082                	ret

20402948 <__metal_driver_riscv_clint0_command_request>:
__metal_driver_riscv_clint0_command_request():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:211

int __metal_driver_riscv_clint0_command_request(
    struct metal_interrupt *controller, int command, void *data) {
20402948:	7179                	addi	sp,sp,-48
2040294a:	d606                	sw	ra,44(sp)
2040294c:	d422                	sw	s0,40(sp)
2040294e:	1800                	addi	s0,sp,48
20402950:	fca42e23          	sw	a0,-36(s0)
20402954:	fcb42c23          	sw	a1,-40(s0)
20402958:	fcc42a23          	sw	a2,-44(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:213
    int hartid;
    int rc = -1;
2040295c:	57fd                	li	a5,-1
2040295e:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:214
    struct __metal_driver_riscv_clint0 *clint =
20402962:	fdc42783          	lw	a5,-36(s0)
20402966:	fef42423          	sw	a5,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:217
        (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base =
        __metal_driver_sifive_clint0_control_base(controller);
2040296a:	fdc42503          	lw	a0,-36(s0)
2040296e:	a55ff0ef          	jal	ra,204023c2 <__metal_driver_sifive_clint0_control_base>
20402972:	fea42223          	sw	a0,-28(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:219

    switch (command) {
20402976:	fd842703          	lw	a4,-40(s0)
2040297a:	4791                	li	a5,4
2040297c:	0cf70063          	beq	a4,a5,20402a3c <__metal_driver_riscv_clint0_command_request+0xf4>
20402980:	fd842703          	lw	a4,-40(s0)
20402984:	4791                	li	a5,4
20402986:	0ee7c063          	blt	a5,a4,20402a66 <__metal_driver_riscv_clint0_command_request+0x11e>
2040298a:	fd842703          	lw	a4,-40(s0)
2040298e:	478d                	li	a5,3
20402990:	06f70563          	beq	a4,a5,204029fa <__metal_driver_riscv_clint0_command_request+0xb2>
20402994:	fd842703          	lw	a4,-40(s0)
20402998:	478d                	li	a5,3
2040299a:	0ce7c663          	blt	a5,a4,20402a66 <__metal_driver_riscv_clint0_command_request+0x11e>
2040299e:	fd842703          	lw	a4,-40(s0)
204029a2:	4785                	li	a5,1
204029a4:	00f70863          	beq	a4,a5,204029b4 <__metal_driver_riscv_clint0_command_request+0x6c>
204029a8:	fd842703          	lw	a4,-40(s0)
204029ac:	4789                	li	a5,2
204029ae:	02f70263          	beq	a4,a5,204029d2 <__metal_driver_riscv_clint0_command_request+0x8a>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:263
            rc = __METAL_ACCESS_ONCE(
                (__metal_io_u32 *)(control_base + (hartid * 4)));
        }
        break;
    default:
        break;
204029b2:	a855                	j	20402a66 <__metal_driver_riscv_clint0_command_request+0x11e>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:221
        if (data) {
204029b4:	fd442783          	lw	a5,-44(s0)
204029b8:	cbcd                	beqz	a5,20402a6a <__metal_driver_riscv_clint0_command_request+0x122>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:222
            *(unsigned long long *)data = __metal_clint0_mtime_get(clint);
204029ba:	fe842503          	lw	a0,-24(s0)
204029be:	34c9                	jal	20402480 <__metal_clint0_mtime_get>
204029c0:	872a                	mv	a4,a0
204029c2:	87ae                	mv	a5,a1
204029c4:	fd442683          	lw	a3,-44(s0)
204029c8:	c298                	sw	a4,0(a3)
204029ca:	c2dc                	sw	a5,4(a3)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:223
            rc = 0;
204029cc:	fe042623          	sw	zero,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:225
        break;
204029d0:	a869                	j	20402a6a <__metal_driver_riscv_clint0_command_request+0x122>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:227
        if (data) {
204029d2:	fd442783          	lw	a5,-44(s0)
204029d6:	cfc1                	beqz	a5,20402a6e <__metal_driver_riscv_clint0_command_request+0x126>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:228
            hartid = *(int *)data;
204029d8:	fd442783          	lw	a5,-44(s0)
204029dc:	439c                	lw	a5,0(a5)
204029de:	fef42023          	sw	a5,-32(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:229
            __METAL_ACCESS_ONCE((
204029e2:	fe042783          	lw	a5,-32(s0)
204029e6:	078a                	slli	a5,a5,0x2
204029e8:	873e                	mv	a4,a5
204029ea:	fe442783          	lw	a5,-28(s0)
204029ee:	97ba                	add	a5,a5,a4
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:230
                __metal_io_u32 *)(control_base + (hartid * 4))) = METAL_DISABLE;
204029f0:	0007a023          	sw	zero,0(a5) # 4000 <__heap_size+0x3800>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:231
            rc = 0;
204029f4:	fe042623          	sw	zero,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:233
        break;
204029f8:	a89d                	j	20402a6e <__metal_driver_riscv_clint0_command_request+0x126>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:235
        if (data) {
204029fa:	fd442783          	lw	a5,-44(s0)
204029fe:	cbb5                	beqz	a5,20402a72 <__metal_driver_riscv_clint0_command_request+0x12a>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:236
            hartid = *(int *)data;
20402a00:	fd442783          	lw	a5,-44(s0)
20402a04:	439c                	lw	a5,0(a5)
20402a06:	fef42023          	sw	a5,-32(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:237
            __METAL_ACCESS_ONCE(
20402a0a:	fe042783          	lw	a5,-32(s0)
20402a0e:	078a                	slli	a5,a5,0x2
20402a10:	873e                	mv	a4,a5
20402a12:	fe442783          	lw	a5,-28(s0)
20402a16:	97ba                	add	a5,a5,a4
20402a18:	873e                	mv	a4,a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:238
                (__metal_io_u32 *)(control_base + (hartid * 4))) = METAL_ENABLE;
20402a1a:	4785                	li	a5,1
20402a1c:	c31c                	sw	a5,0(a4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:248
            __METAL_IO_FENCE(o, i);
20402a1e:	0480000f          	fence	o,i
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:249
            rc = __METAL_ACCESS_ONCE(
20402a22:	fe042783          	lw	a5,-32(s0)
20402a26:	078a                	slli	a5,a5,0x2
20402a28:	873e                	mv	a4,a5
20402a2a:	fe442783          	lw	a5,-28(s0)
20402a2e:	97ba                	add	a5,a5,a4
20402a30:	439c                	lw	a5,0(a5)
20402a32:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:251
            rc = 0;
20402a36:	fe042623          	sw	zero,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:253
        break;
20402a3a:	a825                	j	20402a72 <__metal_driver_riscv_clint0_command_request+0x12a>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:255
        rc = 0;
20402a3c:	fe042623          	sw	zero,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:256
        if (data) {
20402a40:	fd442783          	lw	a5,-44(s0)
20402a44:	cb8d                	beqz	a5,20402a76 <__metal_driver_riscv_clint0_command_request+0x12e>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:257
            hartid = *(int *)data;
20402a46:	fd442783          	lw	a5,-44(s0)
20402a4a:	439c                	lw	a5,0(a5)
20402a4c:	fef42023          	sw	a5,-32(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:258
            rc = __METAL_ACCESS_ONCE(
20402a50:	fe042783          	lw	a5,-32(s0)
20402a54:	078a                	slli	a5,a5,0x2
20402a56:	873e                	mv	a4,a5
20402a58:	fe442783          	lw	a5,-28(s0)
20402a5c:	97ba                	add	a5,a5,a4
20402a5e:	439c                	lw	a5,0(a5)
20402a60:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:261
        break;
20402a64:	a809                	j	20402a76 <__metal_driver_riscv_clint0_command_request+0x12e>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:263
        break;
20402a66:	0001                	nop
20402a68:	a801                	j	20402a78 <__metal_driver_riscv_clint0_command_request+0x130>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:225
        break;
20402a6a:	0001                	nop
20402a6c:	a031                	j	20402a78 <__metal_driver_riscv_clint0_command_request+0x130>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:233
        break;
20402a6e:	0001                	nop
20402a70:	a021                	j	20402a78 <__metal_driver_riscv_clint0_command_request+0x130>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:253
        break;
20402a72:	0001                	nop
20402a74:	a011                	j	20402a78 <__metal_driver_riscv_clint0_command_request+0x130>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:261
        break;
20402a76:	0001                	nop
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:266
    }

    return rc;
20402a78:	fec42783          	lw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:267
}
20402a7c:	853e                	mv	a0,a5
20402a7e:	50b2                	lw	ra,44(sp)
20402a80:	5422                	lw	s0,40(sp)
20402a82:	6145                	addi	sp,sp,48
20402a84:	8082                	ret

20402a86 <__metal_driver_riscv_clint0_clear_interrupt>:
__metal_driver_riscv_clint0_clear_interrupt():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:270

int __metal_driver_riscv_clint0_clear_interrupt(
    struct metal_interrupt *controller, int id) {
20402a86:	7179                	addi	sp,sp,-48
20402a88:	d606                	sw	ra,44(sp)
20402a8a:	d422                	sw	s0,40(sp)
20402a8c:	1800                	addi	s0,sp,48
20402a8e:	fca42e23          	sw	a0,-36(s0)
20402a92:	fcb42c23          	sw	a1,-40(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:271
    int hartid = metal_cpu_get_current_hartid();
20402a96:	5cf030ef          	jal	ra,20406864 <metal_cpu_get_current_hartid>
20402a9a:	87aa                	mv	a5,a0
20402a9c:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:272
    return __metal_driver_riscv_clint0_command_request(
20402aa0:	fec40793          	addi	a5,s0,-20
20402aa4:	863e                	mv	a2,a5
20402aa6:	4589                	li	a1,2
20402aa8:	fdc42503          	lw	a0,-36(s0)
20402aac:	3d71                	jal	20402948 <__metal_driver_riscv_clint0_command_request>
20402aae:	87aa                	mv	a5,a0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:274
        controller, METAL_SOFTWARE_IPI_CLEAR, &hartid);
}
20402ab0:	853e                	mv	a0,a5
20402ab2:	50b2                	lw	ra,44(sp)
20402ab4:	5422                	lw	s0,40(sp)
20402ab6:	6145                	addi	sp,sp,48
20402ab8:	8082                	ret

20402aba <__metal_driver_riscv_clint0_set_interrupt>:
__metal_driver_riscv_clint0_set_interrupt():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:277

int __metal_driver_riscv_clint0_set_interrupt(
    struct metal_interrupt *controller, int id) {
20402aba:	7179                	addi	sp,sp,-48
20402abc:	d606                	sw	ra,44(sp)
20402abe:	d422                	sw	s0,40(sp)
20402ac0:	1800                	addi	s0,sp,48
20402ac2:	fca42e23          	sw	a0,-36(s0)
20402ac6:	fcb42c23          	sw	a1,-40(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:278
    int hartid = metal_cpu_get_current_hartid();
20402aca:	59b030ef          	jal	ra,20406864 <metal_cpu_get_current_hartid>
20402ace:	87aa                	mv	a5,a0
20402ad0:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:279
    return __metal_driver_riscv_clint0_command_request(
20402ad4:	fec40793          	addi	a5,s0,-20
20402ad8:	863e                	mv	a2,a5
20402ada:	458d                	li	a1,3
20402adc:	fdc42503          	lw	a0,-36(s0)
20402ae0:	35a5                	jal	20402948 <__metal_driver_riscv_clint0_command_request>
20402ae2:	87aa                	mv	a5,a0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_clint0.c:281
        controller, METAL_SOFTWARE_IPI_SET, &hartid);
}
20402ae4:	853e                	mv	a0,a5
20402ae6:	50b2                	lw	ra,44(sp)
20402ae8:	5422                	lw	s0,40(sp)
20402aea:	6145                	addi	sp,sp,48
20402aec:	8082                	ret

20402aee <__metal_driver_cpu_hartid>:
__metal_driver_cpu_hartid():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:261



/* --------------------- cpu ------------ */
static __inline__ int __metal_driver_cpu_hartid(struct metal_cpu *cpu)
{
20402aee:	1101                	addi	sp,sp,-32
20402af0:	ce22                	sw	s0,28(sp)
20402af2:	1000                	addi	s0,sp,32
20402af4:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:262
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20402af8:	fec42703          	lw	a4,-20(s0)
20402afc:	81418793          	addi	a5,gp,-2028 # 80000e44 <__metal_dt_cpu_0>
20402b00:	00f71463          	bne	a4,a5,20402b08 <__metal_driver_cpu_hartid+0x1a>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:263
		return 0;
20402b04:	4781                	li	a5,0
20402b06:	a011                	j	20402b0a <__metal_driver_cpu_hartid+0x1c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:266
	}
	else {
		return -1;
20402b08:	57fd                	li	a5,-1
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:268
	}
}
20402b0a:	853e                	mv	a0,a5
20402b0c:	4472                	lw	s0,28(sp)
20402b0e:	6105                	addi	sp,sp,32
20402b10:	8082                	ret

20402b12 <__metal_driver_cpu_timebase>:
__metal_driver_cpu_timebase():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:271

static __inline__ int __metal_driver_cpu_timebase(struct metal_cpu *cpu)
{
20402b12:	1101                	addi	sp,sp,-32
20402b14:	ce22                	sw	s0,28(sp)
20402b16:	1000                	addi	s0,sp,32
20402b18:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:272
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20402b1c:	fec42703          	lw	a4,-20(s0)
20402b20:	81418793          	addi	a5,gp,-2028 # 80000e44 <__metal_dt_cpu_0>
20402b24:	00f71763          	bne	a4,a5,20402b32 <__metal_driver_cpu_timebase+0x20>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:273
		return 1000000;
20402b28:	000f47b7          	lui	a5,0xf4
20402b2c:	24078793          	addi	a5,a5,576 # f4240 <__heap_size+0xf3a40>
20402b30:	a011                	j	20402b34 <__metal_driver_cpu_timebase+0x22>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:276
	}
	else {
		return 0;
20402b32:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:278
	}
}
20402b34:	853e                	mv	a0,a5
20402b36:	4472                	lw	s0,28(sp)
20402b38:	6105                	addi	sp,sp,32
20402b3a:	8082                	ret

20402b3c <__metal_driver_cpu_interrupt_controller>:
__metal_driver_cpu_interrupt_controller():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:281

static __inline__ struct metal_interrupt * __metal_driver_cpu_interrupt_controller(struct metal_cpu *cpu)
{
20402b3c:	1101                	addi	sp,sp,-32
20402b3e:	ce22                	sw	s0,28(sp)
20402b40:	1000                	addi	s0,sp,32
20402b42:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:282
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20402b46:	fec42703          	lw	a4,-20(s0)
20402b4a:	81418793          	addi	a5,gp,-2028 # 80000e44 <__metal_dt_cpu_0>
20402b4e:	00f71763          	bne	a4,a5,20402b5c <__metal_driver_cpu_interrupt_controller+0x20>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:283
		return &__metal_dt_cpu_0_interrupt_controller.controller;
20402b52:	800007b7          	lui	a5,0x80000
20402b56:	71878793          	addi	a5,a5,1816 # 80000718 <metal_segment_heap_target_end+0xffffec18>
20402b5a:	a011                	j	20402b5e <__metal_driver_cpu_interrupt_controller+0x22>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:286
	}
	else {
		return NULL;
20402b5c:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:288
	}
}
20402b5e:	853e                	mv	a0,a5
20402b60:	4472                	lw	s0,28(sp)
20402b62:	6105                	addi	sp,sp,32
20402b64:	8082                	ret

20402b66 <__metal_driver_cpu_buserror>:
__metal_driver_cpu_buserror():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:301
		return 0;
	}
}

static __inline__ struct metal_buserror * __metal_driver_cpu_buserror(struct metal_cpu *cpu)
{
20402b66:	1101                	addi	sp,sp,-32
20402b68:	ce22                	sw	s0,28(sp)
20402b6a:	1000                	addi	s0,sp,32
20402b6c:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:302
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20402b70:	fec42703          	lw	a4,-20(s0)
20402b74:	81418793          	addi	a5,gp,-2028 # 80000e44 <__metal_dt_cpu_0>
20402b78:	00f71463          	bne	a4,a5,20402b80 <__metal_driver_cpu_buserror+0x1a>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:303
		return NULL;
20402b7c:	4781                	li	a5,0
20402b7e:	a011                	j	20402b82 <__metal_driver_cpu_buserror+0x1c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:306
	}
	else {
		return NULL;
20402b80:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:308
	}
}
20402b82:	853e                	mv	a0,a5
20402b84:	4472                	lw	s0,28(sp)
20402b86:	6105                	addi	sp,sp,32
20402b88:	8082                	ret

20402b8a <__metal_driver_cpu_get>:
__metal_driver_cpu_get():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:25
extern void __metal_vector_table();
unsigned long long __metal_driver_cpu_mtime_get(struct metal_cpu *cpu);
int __metal_driver_cpu_mtimecmp_set(struct metal_cpu *cpu,
                                    unsigned long long time);

struct metal_cpu *__metal_driver_cpu_get(int hartid) {
20402b8a:	1101                	addi	sp,sp,-32
20402b8c:	ce22                	sw	s0,28(sp)
20402b8e:	1000                	addi	s0,sp,32
20402b90:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:26
    if (hartid < __METAL_DT_MAX_HARTS) {
20402b94:	fec42783          	lw	a5,-20(s0)
20402b98:	00f04c63          	bgtz	a5,20402bb0 <__metal_driver_cpu_get+0x26>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:27
        return &(__metal_cpu_table[hartid]->cpu);
20402b9c:	800017b7          	lui	a5,0x80001
20402ba0:	fec42703          	lw	a4,-20(s0)
20402ba4:	070a                	slli	a4,a4,0x2
20402ba6:	e3878793          	addi	a5,a5,-456 # 80000e38 <metal_segment_heap_target_end+0xfffff338>
20402baa:	97ba                	add	a5,a5,a4
20402bac:	439c                	lw	a5,0(a5)
20402bae:	a011                	j	20402bb2 <__metal_driver_cpu_get+0x28>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:29
    }
    return (struct metal_cpu *)NULL;
20402bb0:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:30
}
20402bb2:	853e                	mv	a0,a5
20402bb4:	4472                	lw	s0,28(sp)
20402bb6:	6105                	addi	sp,sp,32
20402bb8:	8082                	ret

20402bba <__metal_myhart_id>:
__metal_myhart_id():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:32

uintptr_t __metal_myhart_id(void) {
20402bba:	1101                	addi	sp,sp,-32
20402bbc:	ce22                	sw	s0,28(sp)
20402bbe:	1000                	addi	s0,sp,32
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:34
    uintptr_t myhart;
    __asm__ volatile("csrr %0, mhartid" : "=r"(myhart));
20402bc0:	f14027f3          	csrr	a5,mhartid
20402bc4:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:35
    return myhart;
20402bc8:	fec42783          	lw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:36
}
20402bcc:	853e                	mv	a0,a5
20402bce:	4472                	lw	s0,28(sp)
20402bd0:	6105                	addi	sp,sp,32
20402bd2:	8082                	ret

20402bd4 <__metal_interrupt_global_enable>:
__metal_interrupt_global_enable():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:45
    for (ptr = base; ptr < (base + size); ptr++) {
        *ptr = 0;
    }
}

void __metal_interrupt_global_enable(void) {
20402bd4:	1101                	addi	sp,sp,-32
20402bd6:	ce22                	sw	s0,28(sp)
20402bd8:	1000                	addi	s0,sp,32
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:47
    uintptr_t m;
    __asm__ volatile("csrrs %0, mstatus, %1"
20402bda:	47a1                	li	a5,8
20402bdc:	3007a7f3          	csrrs	a5,mstatus,a5
20402be0:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:50
                     : "=r"(m)
                     : "r"(METAL_MIE_INTERRUPT));
}
20402be4:	0001                	nop
20402be6:	4472                	lw	s0,28(sp)
20402be8:	6105                	addi	sp,sp,32
20402bea:	8082                	ret

20402bec <__metal_interrupt_global_disable>:
__metal_interrupt_global_disable():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:52

void __metal_interrupt_global_disable(void) {
20402bec:	1101                	addi	sp,sp,-32
20402bee:	ce22                	sw	s0,28(sp)
20402bf0:	1000                	addi	s0,sp,32
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:54
    uintptr_t m;
    __asm__ volatile("csrrc %0, mstatus, %1"
20402bf2:	47a1                	li	a5,8
20402bf4:	3007b7f3          	csrrc	a5,mstatus,a5
20402bf8:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:57
                     : "=r"(m)
                     : "r"(METAL_MIE_INTERRUPT));
}
20402bfc:	0001                	nop
20402bfe:	4472                	lw	s0,28(sp)
20402c00:	6105                	addi	sp,sp,32
20402c02:	8082                	ret

20402c04 <__metal_interrupt_software_enable>:
__metal_interrupt_software_enable():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:59

void __metal_interrupt_software_enable(void) {
20402c04:	1101                	addi	sp,sp,-32
20402c06:	ce22                	sw	s0,28(sp)
20402c08:	1000                	addi	s0,sp,32
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:61
    uintptr_t m;
    __asm__ volatile("csrrs %0, mie, %1"
20402c0a:	47a1                	li	a5,8
20402c0c:	3047a7f3          	csrrs	a5,mie,a5
20402c10:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:64
                     : "=r"(m)
                     : "r"(METAL_LOCAL_INTERRUPT_SW));
}
20402c14:	0001                	nop
20402c16:	4472                	lw	s0,28(sp)
20402c18:	6105                	addi	sp,sp,32
20402c1a:	8082                	ret

20402c1c <__metal_interrupt_software_disable>:
__metal_interrupt_software_disable():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:66

void __metal_interrupt_software_disable(void) {
20402c1c:	1101                	addi	sp,sp,-32
20402c1e:	ce22                	sw	s0,28(sp)
20402c20:	1000                	addi	s0,sp,32
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:68
    uintptr_t m;
    __asm__ volatile("csrrc %0, mie, %1"
20402c22:	47a1                	li	a5,8
20402c24:	3047b7f3          	csrrc	a5,mie,a5
20402c28:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:71
                     : "=r"(m)
                     : "r"(METAL_LOCAL_INTERRUPT_SW));
}
20402c2c:	0001                	nop
20402c2e:	4472                	lw	s0,28(sp)
20402c30:	6105                	addi	sp,sp,32
20402c32:	8082                	ret

20402c34 <__metal_interrupt_timer_enable>:
__metal_interrupt_timer_enable():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:73

void __metal_interrupt_timer_enable(void) {
20402c34:	1101                	addi	sp,sp,-32
20402c36:	ce22                	sw	s0,28(sp)
20402c38:	1000                	addi	s0,sp,32
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:75
    uintptr_t m;
    __asm__ volatile("csrrs %0, mie, %1"
20402c3a:	08000793          	li	a5,128
20402c3e:	3047a7f3          	csrrs	a5,mie,a5
20402c42:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:78
                     : "=r"(m)
                     : "r"(METAL_LOCAL_INTERRUPT_TMR));
}
20402c46:	0001                	nop
20402c48:	4472                	lw	s0,28(sp)
20402c4a:	6105                	addi	sp,sp,32
20402c4c:	8082                	ret

20402c4e <__metal_interrupt_timer_disable>:
__metal_interrupt_timer_disable():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:80

void __metal_interrupt_timer_disable(void) {
20402c4e:	1101                	addi	sp,sp,-32
20402c50:	ce22                	sw	s0,28(sp)
20402c52:	1000                	addi	s0,sp,32
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:82
    uintptr_t m;
    __asm__ volatile("csrrc %0, mie, %1"
20402c54:	08000793          	li	a5,128
20402c58:	3047b7f3          	csrrc	a5,mie,a5
20402c5c:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:85
                     : "=r"(m)
                     : "r"(METAL_LOCAL_INTERRUPT_TMR));
}
20402c60:	0001                	nop
20402c62:	4472                	lw	s0,28(sp)
20402c64:	6105                	addi	sp,sp,32
20402c66:	8082                	ret

20402c68 <__metal_interrupt_external_enable>:
__metal_interrupt_external_enable():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:87

void __metal_interrupt_external_enable(void) {
20402c68:	1101                	addi	sp,sp,-32
20402c6a:	ce22                	sw	s0,28(sp)
20402c6c:	1000                	addi	s0,sp,32
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:89
    uintptr_t m;
    __asm__ volatile("csrrs %0, mie, %1"
20402c6e:	6785                	lui	a5,0x1
20402c70:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
20402c74:	3047a7f3          	csrrs	a5,mie,a5
20402c78:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:92
                     : "=r"(m)
                     : "r"(METAL_LOCAL_INTERRUPT_EXT));
}
20402c7c:	0001                	nop
20402c7e:	4472                	lw	s0,28(sp)
20402c80:	6105                	addi	sp,sp,32
20402c82:	8082                	ret

20402c84 <__metal_interrupt_external_disable>:
__metal_interrupt_external_disable():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:94

void __metal_interrupt_external_disable(void) {
20402c84:	1101                	addi	sp,sp,-32
20402c86:	ce22                	sw	s0,28(sp)
20402c88:	1000                	addi	s0,sp,32
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:96
    unsigned long m;
    __asm__ volatile("csrrc %0, mie, %1"
20402c8a:	6785                	lui	a5,0x1
20402c8c:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
20402c90:	3047b7f3          	csrrc	a5,mie,a5
20402c94:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:99
                     : "=r"(m)
                     : "r"(METAL_LOCAL_INTERRUPT_EXT));
}
20402c98:	0001                	nop
20402c9a:	4472                	lw	s0,28(sp)
20402c9c:	6105                	addi	sp,sp,32
20402c9e:	8082                	ret

20402ca0 <__metal_interrupt_local_enable>:
__metal_interrupt_local_enable():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:101

void __metal_interrupt_local_enable(int id) {
20402ca0:	7179                	addi	sp,sp,-48
20402ca2:	d622                	sw	s0,44(sp)
20402ca4:	1800                	addi	s0,sp,48
20402ca6:	fca42e23          	sw	a0,-36(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:102
    uintptr_t b = 1 << id;
20402caa:	fdc42783          	lw	a5,-36(s0)
20402cae:	4705                	li	a4,1
20402cb0:	00f717b3          	sll	a5,a4,a5
20402cb4:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:104
    uintptr_t m;
    __asm__ volatile("csrrs %0, mie, %1" : "=r"(m) : "r"(b));
20402cb8:	fec42783          	lw	a5,-20(s0)
20402cbc:	3047a7f3          	csrrs	a5,mie,a5
20402cc0:	fef42423          	sw	a5,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:105
}
20402cc4:	0001                	nop
20402cc6:	5432                	lw	s0,44(sp)
20402cc8:	6145                	addi	sp,sp,48
20402cca:	8082                	ret

20402ccc <__metal_interrupt_local_disable>:
__metal_interrupt_local_disable():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:107

void __metal_interrupt_local_disable(int id) {
20402ccc:	7179                	addi	sp,sp,-48
20402cce:	d622                	sw	s0,44(sp)
20402cd0:	1800                	addi	s0,sp,48
20402cd2:	fca42e23          	sw	a0,-36(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:108
    uintptr_t b = 1 << id;
20402cd6:	fdc42783          	lw	a5,-36(s0)
20402cda:	4705                	li	a4,1
20402cdc:	00f717b3          	sll	a5,a4,a5
20402ce0:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:110
    uintptr_t m;
    __asm__ volatile("csrrc %0, mie, %1" : "=r"(m) : "r"(b));
20402ce4:	fec42783          	lw	a5,-20(s0)
20402ce8:	3047b7f3          	csrrc	a5,mie,a5
20402cec:	fef42423          	sw	a5,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:111
}
20402cf0:	0001                	nop
20402cf2:	5432                	lw	s0,44(sp)
20402cf4:	6145                	addi	sp,sp,48
20402cf6:	8082                	ret

20402cf8 <__metal_default_exception_handler>:
__metal_default_exception_handler():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:113

void __metal_default_exception_handler(struct metal_cpu *cpu, int ecode) {
20402cf8:	1101                	addi	sp,sp,-32
20402cfa:	ce06                	sw	ra,28(sp)
20402cfc:	cc22                	sw	s0,24(sp)
20402cfe:	1000                	addi	s0,sp,32
20402d00:	fea42623          	sw	a0,-20(s0)
20402d04:	feb42423          	sw	a1,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:114
    metal_shutdown(100);
20402d08:	06400513          	li	a0,100
20402d0c:	395030ef          	jal	ra,204068a0 <metal_shutdown>

20402d10 <__metal_default_interrupt_handler>:
__metal_default_interrupt_handler():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:117
}

void __metal_default_interrupt_handler(int id, void *priv) {
20402d10:	1101                	addi	sp,sp,-32
20402d12:	ce06                	sw	ra,28(sp)
20402d14:	cc22                	sw	s0,24(sp)
20402d16:	1000                	addi	s0,sp,32
20402d18:	fea42623          	sw	a0,-20(s0)
20402d1c:	feb42423          	sw	a1,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:118
    metal_shutdown(200);
20402d20:	0c800513          	li	a0,200
20402d24:	37d030ef          	jal	ra,204068a0 <metal_shutdown>

20402d28 <metal_interrupt_vector_handler>:
metal_interrupt_vector_handler():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:122
}

/* The metal_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_interrupt_vector_handler(void) {
20402d28:	715d                	addi	sp,sp,-80
20402d2a:	c686                	sw	ra,76(sp)
20402d2c:	c496                	sw	t0,72(sp)
20402d2e:	c29a                	sw	t1,68(sp)
20402d30:	c09e                	sw	t2,64(sp)
20402d32:	de22                	sw	s0,60(sp)
20402d34:	dc2a                	sw	a0,56(sp)
20402d36:	da2e                	sw	a1,52(sp)
20402d38:	d832                	sw	a2,48(sp)
20402d3a:	d636                	sw	a3,44(sp)
20402d3c:	d43a                	sw	a4,40(sp)
20402d3e:	d23e                	sw	a5,36(sp)
20402d40:	d042                	sw	a6,32(sp)
20402d42:	ce46                	sw	a7,28(sp)
20402d44:	cc72                	sw	t3,24(sp)
20402d46:	ca76                	sw	t4,20(sp)
20402d48:	c87a                	sw	t5,16(sp)
20402d4a:	c67e                	sw	t6,12(sp)
20402d4c:	0880                	addi	s0,sp,80
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:123
    metal_shutdown(300);
20402d4e:	12c00513          	li	a0,300
20402d52:	34f030ef          	jal	ra,204068a0 <metal_shutdown>

20402d56 <metal_software_interrupt_vector_handler>:
metal_software_interrupt_vector_handler():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:128
}

/* The metal_software_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_software_interrupt_vector_handler(void) {
20402d56:	711d                	addi	sp,sp,-96
20402d58:	ce86                	sw	ra,92(sp)
20402d5a:	cc96                	sw	t0,88(sp)
20402d5c:	ca9a                	sw	t1,84(sp)
20402d5e:	c89e                	sw	t2,80(sp)
20402d60:	c6a2                	sw	s0,76(sp)
20402d62:	c4aa                	sw	a0,72(sp)
20402d64:	c2ae                	sw	a1,68(sp)
20402d66:	c0b2                	sw	a2,64(sp)
20402d68:	de36                	sw	a3,60(sp)
20402d6a:	dc3a                	sw	a4,56(sp)
20402d6c:	da3e                	sw	a5,52(sp)
20402d6e:	d842                	sw	a6,48(sp)
20402d70:	d646                	sw	a7,44(sp)
20402d72:	d472                	sw	t3,40(sp)
20402d74:	d276                	sw	t4,36(sp)
20402d76:	d07a                	sw	t5,32(sp)
20402d78:	ce7e                	sw	t6,28(sp)
20402d7a:	1080                	addi	s0,sp,96
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:129
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_SW);
20402d7c:	3d3d                	jal	20402bba <__metal_myhart_id>
20402d7e:	872a                	mv	a4,a0
20402d80:	800017b7          	lui	a5,0x80001
20402d84:	070a                	slli	a4,a4,0x2
20402d86:	e3878793          	addi	a5,a5,-456 # 80000e38 <metal_segment_heap_target_end+0xfffff338>
20402d8a:	97ba                	add	a5,a5,a4
20402d8c:	439c                	lw	a5,0(a5)
20402d8e:	faf42623          	sw	a5,-84(s0)
20402d92:	fac42783          	lw	a5,-84(s0)
20402d96:	c785                	beqz	a5,20402dbe <metal_software_interrupt_vector_handler+0x68>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:129 (discriminator 1)
20402d98:	fac42503          	lw	a0,-84(s0)
20402d9c:	3345                	jal	20402b3c <__metal_driver_cpu_interrupt_controller>
20402d9e:	faa42423          	sw	a0,-88(s0)
20402da2:	fa842783          	lw	a5,-88(s0)
20402da6:	0e07a783          	lw	a5,224(a5)
20402daa:	faf42223          	sw	a5,-92(s0)
20402dae:	fa842783          	lw	a5,-88(s0)
20402db2:	0d87a783          	lw	a5,216(a5)
20402db6:	fa442583          	lw	a1,-92(s0)
20402dba:	450d                	li	a0,3
20402dbc:	9782                	jalr	a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:130
}
20402dbe:	0001                	nop
20402dc0:	40f6                	lw	ra,92(sp)
20402dc2:	42e6                	lw	t0,88(sp)
20402dc4:	4356                	lw	t1,84(sp)
20402dc6:	43c6                	lw	t2,80(sp)
20402dc8:	4436                	lw	s0,76(sp)
20402dca:	4526                	lw	a0,72(sp)
20402dcc:	4596                	lw	a1,68(sp)
20402dce:	4606                	lw	a2,64(sp)
20402dd0:	56f2                	lw	a3,60(sp)
20402dd2:	5762                	lw	a4,56(sp)
20402dd4:	57d2                	lw	a5,52(sp)
20402dd6:	5842                	lw	a6,48(sp)
20402dd8:	58b2                	lw	a7,44(sp)
20402dda:	5e22                	lw	t3,40(sp)
20402ddc:	5e92                	lw	t4,36(sp)
20402dde:	5f02                	lw	t5,32(sp)
20402de0:	4ff2                	lw	t6,28(sp)
20402de2:	6125                	addi	sp,sp,96
20402de4:	30200073          	mret

20402de8 <__metal_default_sw_handler>:
__metal_default_sw_handler():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:132

void __metal_default_sw_handler(int id, void *priv) {
20402de8:	7179                	addi	sp,sp,-48
20402dea:	d606                	sw	ra,44(sp)
20402dec:	d422                	sw	s0,40(sp)
20402dee:	1800                	addi	s0,sp,48
20402df0:	fca42e23          	sw	a0,-36(s0)
20402df4:	fcb42c23          	sw	a1,-40(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:135
    uintptr_t mcause;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402df8:	33c9                	jal	20402bba <__metal_myhart_id>
20402dfa:	872a                	mv	a4,a0
20402dfc:	800017b7          	lui	a5,0x80001
20402e00:	070a                	slli	a4,a4,0x2
20402e02:	e3878793          	addi	a5,a5,-456 # 80000e38 <metal_segment_heap_target_end+0xfffff338>
20402e06:	97ba                	add	a5,a5,a4
20402e08:	439c                	lw	a5,0(a5)
20402e0a:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:137

    __asm__ volatile("csrr %0, mcause" : "=r"(mcause));
20402e0e:	342027f3          	csrr	a5,mcause
20402e12:	fef42423          	sw	a5,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:138
    if (cpu) {
20402e16:	fec42783          	lw	a5,-20(s0)
20402e1a:	c795                	beqz	a5,20402e46 <__metal_default_sw_handler+0x5e>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:140
        intc = (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402e1c:	fec42503          	lw	a0,-20(s0)
20402e20:	3b31                	jal	20402b3c <__metal_driver_cpu_interrupt_controller>
20402e22:	fea42223          	sw	a0,-28(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:141
        intc->metal_exception_table[mcause & METAL_MCAUSE_CAUSE](
20402e26:	fe842783          	lw	a5,-24(s0)
20402e2a:	3ff7f793          	andi	a5,a5,1023
20402e2e:	fe442703          	lw	a4,-28(s0)
20402e32:	0e878793          	addi	a5,a5,232
20402e36:	078a                	slli	a5,a5,0x2
20402e38:	97ba                	add	a5,a5,a4
20402e3a:	439c                	lw	a5,0(a5)
20402e3c:	fdc42583          	lw	a1,-36(s0)
20402e40:	fec42503          	lw	a0,-20(s0)
20402e44:	9782                	jalr	a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:144
            (struct metal_cpu *)cpu, id);
    }
}
20402e46:	0001                	nop
20402e48:	50b2                	lw	ra,44(sp)
20402e4a:	5422                	lw	s0,40(sp)
20402e4c:	6145                	addi	sp,sp,48
20402e4e:	8082                	ret

20402e50 <metal_timer_interrupt_vector_handler>:
metal_timer_interrupt_vector_handler():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:148

/* The metal_timer_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_timer_interrupt_vector_handler(void) {
20402e50:	711d                	addi	sp,sp,-96
20402e52:	ce86                	sw	ra,92(sp)
20402e54:	cc96                	sw	t0,88(sp)
20402e56:	ca9a                	sw	t1,84(sp)
20402e58:	c89e                	sw	t2,80(sp)
20402e5a:	c6a2                	sw	s0,76(sp)
20402e5c:	c4aa                	sw	a0,72(sp)
20402e5e:	c2ae                	sw	a1,68(sp)
20402e60:	c0b2                	sw	a2,64(sp)
20402e62:	de36                	sw	a3,60(sp)
20402e64:	dc3a                	sw	a4,56(sp)
20402e66:	da3e                	sw	a5,52(sp)
20402e68:	d842                	sw	a6,48(sp)
20402e6a:	d646                	sw	a7,44(sp)
20402e6c:	d472                	sw	t3,40(sp)
20402e6e:	d276                	sw	t4,36(sp)
20402e70:	d07a                	sw	t5,32(sp)
20402e72:	ce7e                	sw	t6,28(sp)
20402e74:	1080                	addi	s0,sp,96
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:149
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_TMR);
20402e76:	3391                	jal	20402bba <__metal_myhart_id>
20402e78:	872a                	mv	a4,a0
20402e7a:	800017b7          	lui	a5,0x80001
20402e7e:	070a                	slli	a4,a4,0x2
20402e80:	e3878793          	addi	a5,a5,-456 # 80000e38 <metal_segment_heap_target_end+0xfffff338>
20402e84:	97ba                	add	a5,a5,a4
20402e86:	439c                	lw	a5,0(a5)
20402e88:	faf42623          	sw	a5,-84(s0)
20402e8c:	fac42783          	lw	a5,-84(s0)
20402e90:	c785                	beqz	a5,20402eb8 <metal_timer_interrupt_vector_handler+0x68>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:149 (discriminator 1)
20402e92:	fac42503          	lw	a0,-84(s0)
20402e96:	315d                	jal	20402b3c <__metal_driver_cpu_interrupt_controller>
20402e98:	faa42423          	sw	a0,-88(s0)
20402e9c:	fa842783          	lw	a5,-88(s0)
20402ea0:	1407a783          	lw	a5,320(a5)
20402ea4:	faf42223          	sw	a5,-92(s0)
20402ea8:	fa842783          	lw	a5,-88(s0)
20402eac:	1387a783          	lw	a5,312(a5)
20402eb0:	fa442583          	lw	a1,-92(s0)
20402eb4:	451d                	li	a0,7
20402eb6:	9782                	jalr	a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:150
}
20402eb8:	0001                	nop
20402eba:	40f6                	lw	ra,92(sp)
20402ebc:	42e6                	lw	t0,88(sp)
20402ebe:	4356                	lw	t1,84(sp)
20402ec0:	43c6                	lw	t2,80(sp)
20402ec2:	4436                	lw	s0,76(sp)
20402ec4:	4526                	lw	a0,72(sp)
20402ec6:	4596                	lw	a1,68(sp)
20402ec8:	4606                	lw	a2,64(sp)
20402eca:	56f2                	lw	a3,60(sp)
20402ecc:	5762                	lw	a4,56(sp)
20402ece:	57d2                	lw	a5,52(sp)
20402ed0:	5842                	lw	a6,48(sp)
20402ed2:	58b2                	lw	a7,44(sp)
20402ed4:	5e22                	lw	t3,40(sp)
20402ed6:	5e92                	lw	t4,36(sp)
20402ed8:	5f02                	lw	t5,32(sp)
20402eda:	4ff2                	lw	t6,28(sp)
20402edc:	6125                	addi	sp,sp,96
20402ede:	30200073          	mret

20402ee2 <__metal_default_beu_handler>:
__metal_default_beu_handler():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:152

void __metal_default_beu_handler(int id, void *priv) {}
20402ee2:	1101                	addi	sp,sp,-32
20402ee4:	ce22                	sw	s0,28(sp)
20402ee6:	1000                	addi	s0,sp,32
20402ee8:	fea42623          	sw	a0,-20(s0)
20402eec:	feb42423          	sw	a1,-24(s0)
20402ef0:	0001                	nop
20402ef2:	4472                	lw	s0,28(sp)
20402ef4:	6105                	addi	sp,sp,32
20402ef6:	8082                	ret

20402ef8 <__metal_default_timer_handler>:
__metal_default_timer_handler():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:154

void __metal_default_timer_handler(int id, void *priv) {
20402ef8:	7179                	addi	sp,sp,-48
20402efa:	d606                	sw	ra,44(sp)
20402efc:	d422                	sw	s0,40(sp)
20402efe:	1800                	addi	s0,sp,48
20402f00:	fca42e23          	sw	a0,-36(s0)
20402f04:	fcb42c23          	sw	a1,-40(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:155
    struct metal_cpu *cpu = __metal_driver_cpu_get(__metal_myhart_id());
20402f08:	394d                	jal	20402bba <__metal_myhart_id>
20402f0a:	87aa                	mv	a5,a0
20402f0c:	853e                	mv	a0,a5
20402f0e:	39b5                	jal	20402b8a <__metal_driver_cpu_get>
20402f10:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:156
    unsigned long long time = __metal_driver_cpu_mtime_get(cpu);
20402f14:	fec42503          	lw	a0,-20(s0)
20402f18:	284010ef          	jal	ra,2040419c <__metal_driver_cpu_mtime_get>
20402f1c:	fea42023          	sw	a0,-32(s0)
20402f20:	feb42223          	sw	a1,-28(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:159

    /* Set a 10 cycle timer */
    __metal_driver_cpu_mtimecmp_set(cpu, time + 10);
20402f24:	fe042703          	lw	a4,-32(s0)
20402f28:	fe442783          	lw	a5,-28(s0)
20402f2c:	4529                	li	a0,10
20402f2e:	4581                	li	a1,0
20402f30:	00a70633          	add	a2,a4,a0
20402f34:	8832                	mv	a6,a2
20402f36:	00e83833          	sltu	a6,a6,a4
20402f3a:	00b786b3          	add	a3,a5,a1
20402f3e:	00d807b3          	add	a5,a6,a3
20402f42:	86be                	mv	a3,a5
20402f44:	8732                	mv	a4,a2
20402f46:	87b6                	mv	a5,a3
20402f48:	85ba                	mv	a1,a4
20402f4a:	863e                	mv	a2,a5
20402f4c:	fec42503          	lw	a0,-20(s0)
20402f50:	2b2010ef          	jal	ra,20404202 <__metal_driver_cpu_mtimecmp_set>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:160
}
20402f54:	0001                	nop
20402f56:	50b2                	lw	ra,44(sp)
20402f58:	5422                	lw	s0,40(sp)
20402f5a:	6145                	addi	sp,sp,48
20402f5c:	8082                	ret
	...

20402f80 <__metal_exception_handler>:
__metal_exception_handler():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:169
metal_external_interrupt_vector_handler(void) {
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_EXT);
}

void __metal_exception_handler(void) __attribute__((interrupt, aligned(128)));
void __metal_exception_handler(void) {
20402f80:	7119                	addi	sp,sp,-128
20402f82:	de86                	sw	ra,124(sp)
20402f84:	dc96                	sw	t0,120(sp)
20402f86:	da9a                	sw	t1,116(sp)
20402f88:	d89e                	sw	t2,112(sp)
20402f8a:	d6a2                	sw	s0,108(sp)
20402f8c:	d4aa                	sw	a0,104(sp)
20402f8e:	d2ae                	sw	a1,100(sp)
20402f90:	d0b2                	sw	a2,96(sp)
20402f92:	ceb6                	sw	a3,92(sp)
20402f94:	ccba                	sw	a4,88(sp)
20402f96:	cabe                	sw	a5,84(sp)
20402f98:	c8c2                	sw	a6,80(sp)
20402f9a:	c6c6                	sw	a7,76(sp)
20402f9c:	c4f2                	sw	t3,72(sp)
20402f9e:	c2f6                	sw	t4,68(sp)
20402fa0:	c0fa                	sw	t5,64(sp)
20402fa2:	de7e                	sw	t6,60(sp)
20402fa4:	0100                	addi	s0,sp,128
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:174
    int id;
    void *priv;
    uintptr_t mcause, mepc, mtval, mtvec;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402fa6:	3911                	jal	20402bba <__metal_myhart_id>
20402fa8:	872a                	mv	a4,a0
20402faa:	800017b7          	lui	a5,0x80001
20402fae:	070a                	slli	a4,a4,0x2
20402fb0:	e3878793          	addi	a5,a5,-456 # 80000e38 <metal_segment_heap_target_end+0xfffff338>
20402fb4:	97ba                	add	a5,a5,a4
20402fb6:	439c                	lw	a5,0(a5)
20402fb8:	faf42623          	sw	a5,-84(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:176

    __asm__ volatile("csrr %0, mcause" : "=r"(mcause));
20402fbc:	342027f3          	csrr	a5,mcause
20402fc0:	faf42423          	sw	a5,-88(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:177
    __asm__ volatile("csrr %0, mepc" : "=r"(mepc));
20402fc4:	341027f3          	csrr	a5,mepc
20402fc8:	faf42223          	sw	a5,-92(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:178
    __asm__ volatile("csrr %0, mtval" : "=r"(mtval));
20402fcc:	343027f3          	csrr	a5,mtval
20402fd0:	faf42023          	sw	a5,-96(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:179
    __asm__ volatile("csrr %0, mtvec" : "=r"(mtvec));
20402fd4:	305027f3          	csrr	a5,mtvec
20402fd8:	f8f42e23          	sw	a5,-100(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:181

    if (cpu) {
20402fdc:	fac42783          	lw	a5,-84(s0)
20402fe0:	cbfd                	beqz	a5,204030d6 <__metal_exception_handler+0x156>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:183
        intc = (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402fe2:	fac42503          	lw	a0,-84(s0)
20402fe6:	b57ff0ef          	jal	ra,20402b3c <__metal_driver_cpu_interrupt_controller>
20402fea:	f8a42c23          	sw	a0,-104(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:184
        id = mcause & METAL_MCAUSE_CAUSE;
20402fee:	fa842783          	lw	a5,-88(s0)
20402ff2:	3ff7f793          	andi	a5,a5,1023
20402ff6:	f8f42a23          	sw	a5,-108(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:185
        if (mcause & METAL_MCAUSE_INTR) {
20402ffa:	fa842783          	lw	a5,-88(s0)
20402ffe:	0a07de63          	bgez	a5,204030ba <__metal_exception_handler+0x13a>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:186
            if (id == METAL_INTERRUPT_ID_BEU) {
20403002:	f9442703          	lw	a4,-108(s0)
20403006:	08000793          	li	a5,128
2040300a:	02f71263          	bne	a4,a5,2040302e <__metal_exception_handler+0xae>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:187
                priv = intc->metal_int_beu.exint_data;
2040300e:	f9842783          	lw	a5,-104(s0)
20403012:	3987a783          	lw	a5,920(a5)
20403016:	f8f42623          	sw	a5,-116(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:188
                intc->metal_int_beu.handler(id, priv);
2040301a:	f9842783          	lw	a5,-104(s0)
2040301e:	3907a783          	lw	a5,912(a5)
20403022:	f8c42583          	lw	a1,-116(s0)
20403026:	f9442503          	lw	a0,-108(s0)
2040302a:	9782                	jalr	a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:189
                return;
2040302c:	a06d                	j	204030d6 <__metal_exception_handler+0x156>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:191
            }
            if ((id < METAL_INTERRUPT_ID_CSW) ||
2040302e:	f9442703          	lw	a4,-108(s0)
20403032:	47ad                	li	a5,11
20403034:	00e7d763          	bge	a5,a4,20403042 <__metal_exception_handler+0xc2>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:192 (discriminator 1)
                ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_DIRECT)) {
20403038:	f9c42783          	lw	a5,-100(s0)
2040303c:	03f7f793          	andi	a5,a5,63
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:191 (discriminator 1)
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20403040:	ef9d                	bnez	a5,2040307e <__metal_exception_handler+0xfe>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:193
                priv = intc->metal_int_table[id].exint_data;
20403042:	f9842683          	lw	a3,-104(s0)
20403046:	f9442703          	lw	a4,-108(s0)
2040304a:	87ba                	mv	a5,a4
2040304c:	0786                	slli	a5,a5,0x1
2040304e:	97ba                	add	a5,a5,a4
20403050:	078e                	slli	a5,a5,0x3
20403052:	97b6                	add	a5,a5,a3
20403054:	0987a783          	lw	a5,152(a5)
20403058:	f8f42623          	sw	a5,-116(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:194
                intc->metal_int_table[id].handler(id, priv);
2040305c:	f9842683          	lw	a3,-104(s0)
20403060:	f9442703          	lw	a4,-108(s0)
20403064:	87ba                	mv	a5,a4
20403066:	0786                	slli	a5,a5,0x1
20403068:	97ba                	add	a5,a5,a4
2040306a:	078e                	slli	a5,a5,0x3
2040306c:	97b6                	add	a5,a5,a3
2040306e:	0907a783          	lw	a5,144(a5)
20403072:	f8c42583          	lw	a1,-116(s0)
20403076:	f9442503          	lw	a0,-108(s0)
2040307a:	9782                	jalr	a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:195
                return;
2040307c:	a8a9                	j	204030d6 <__metal_exception_handler+0x156>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:197
            }
            if ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_CLIC) {
2040307e:	f9c42783          	lw	a5,-100(s0)
20403082:	03f7f713          	andi	a4,a5,63
20403086:	4789                	li	a5,2
20403088:	04f71763          	bne	a4,a5,204030d6 <__metal_exception_handler+0x156>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:201
                uintptr_t mtvt;
                metal_interrupt_handler_t mtvt_handler;

                __asm__ volatile("csrr %0, 0x307" : "=r"(mtvt));
2040308c:	307027f3          	csrr	a5,mtvt
20403090:	f8f42823          	sw	a5,-112(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:202
                priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403094:	f9842783          	lw	a5,-104(s0)
20403098:	0dc7a783          	lw	a5,220(a5)
2040309c:	f8f42623          	sw	a5,-116(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:203
                mtvt_handler = (metal_interrupt_handler_t) * (uintptr_t *)mtvt;
204030a0:	f9042783          	lw	a5,-112(s0)
204030a4:	439c                	lw	a5,0(a5)
204030a6:	f8f42423          	sw	a5,-120(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:204
                mtvt_handler(id, priv);
204030aa:	f8842783          	lw	a5,-120(s0)
204030ae:	f8c42583          	lw	a1,-116(s0)
204030b2:	f9442503          	lw	a0,-108(s0)
204030b6:	9782                	jalr	a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:205
                return;
204030b8:	a839                	j	204030d6 <__metal_exception_handler+0x156>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:208
            }
        } else {
            intc->metal_exception_table[id]((struct metal_cpu *)cpu, id);
204030ba:	f9842703          	lw	a4,-104(s0)
204030be:	f9442783          	lw	a5,-108(s0)
204030c2:	0e878793          	addi	a5,a5,232
204030c6:	078a                	slli	a5,a5,0x2
204030c8:	97ba                	add	a5,a5,a4
204030ca:	439c                	lw	a5,0(a5)
204030cc:	f9442583          	lw	a1,-108(s0)
204030d0:	fac42503          	lw	a0,-84(s0)
204030d4:	9782                	jalr	a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:211
        }
    }
}
204030d6:	50f6                	lw	ra,124(sp)
204030d8:	52e6                	lw	t0,120(sp)
204030da:	5356                	lw	t1,116(sp)
204030dc:	53c6                	lw	t2,112(sp)
204030de:	5436                	lw	s0,108(sp)
204030e0:	5526                	lw	a0,104(sp)
204030e2:	5596                	lw	a1,100(sp)
204030e4:	5606                	lw	a2,96(sp)
204030e6:	46f6                	lw	a3,92(sp)
204030e8:	4766                	lw	a4,88(sp)
204030ea:	47d6                	lw	a5,84(sp)
204030ec:	4846                	lw	a6,80(sp)
204030ee:	48b6                	lw	a7,76(sp)
204030f0:	4e26                	lw	t3,72(sp)
204030f2:	4e96                	lw	t4,68(sp)
204030f4:	4f06                	lw	t5,64(sp)
204030f6:	5ff2                	lw	t6,60(sp)
204030f8:	6109                	addi	sp,sp,128
204030fa:	30200073          	mret
	...

20403178 <metal_lc0_interrupt_vector_handler>:
metal_lc0_interrupt_vector_handler():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:214

/* The metal_lc0_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc0_interrupt_vector_handler(void) {
20403178:	711d                	addi	sp,sp,-96
2040317a:	ce86                	sw	ra,92(sp)
2040317c:	cc96                	sw	t0,88(sp)
2040317e:	ca9a                	sw	t1,84(sp)
20403180:	c89e                	sw	t2,80(sp)
20403182:	c6a2                	sw	s0,76(sp)
20403184:	c4aa                	sw	a0,72(sp)
20403186:	c2ae                	sw	a1,68(sp)
20403188:	c0b2                	sw	a2,64(sp)
2040318a:	de36                	sw	a3,60(sp)
2040318c:	dc3a                	sw	a4,56(sp)
2040318e:	da3e                	sw	a5,52(sp)
20403190:	d842                	sw	a6,48(sp)
20403192:	d646                	sw	a7,44(sp)
20403194:	d472                	sw	t3,40(sp)
20403196:	d276                	sw	t4,36(sp)
20403198:	d07a                	sw	t5,32(sp)
2040319a:	ce7e                	sw	t6,28(sp)
2040319c:	1080                	addi	s0,sp,96
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:215
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC0);
2040319e:	a1dff0ef          	jal	ra,20402bba <__metal_myhart_id>
204031a2:	872a                	mv	a4,a0
204031a4:	800017b7          	lui	a5,0x80001
204031a8:	070a                	slli	a4,a4,0x2
204031aa:	e3878793          	addi	a5,a5,-456 # 80000e38 <metal_segment_heap_target_end+0xfffff338>
204031ae:	97ba                	add	a5,a5,a4
204031b0:	439c                	lw	a5,0(a5)
204031b2:	faf42623          	sw	a5,-84(s0)
204031b6:	fac42783          	lw	a5,-84(s0)
204031ba:	c78d                	beqz	a5,204031e4 <metal_lc0_interrupt_vector_handler+0x6c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:215 (discriminator 1)
204031bc:	fac42503          	lw	a0,-84(s0)
204031c0:	97dff0ef          	jal	ra,20402b3c <__metal_driver_cpu_interrupt_controller>
204031c4:	faa42423          	sw	a0,-88(s0)
204031c8:	fa842783          	lw	a5,-88(s0)
204031cc:	2187a783          	lw	a5,536(a5)
204031d0:	faf42223          	sw	a5,-92(s0)
204031d4:	fa842783          	lw	a5,-88(s0)
204031d8:	2107a783          	lw	a5,528(a5)
204031dc:	fa442583          	lw	a1,-92(s0)
204031e0:	4541                	li	a0,16
204031e2:	9782                	jalr	a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:216
}
204031e4:	0001                	nop
204031e6:	40f6                	lw	ra,92(sp)
204031e8:	42e6                	lw	t0,88(sp)
204031ea:	4356                	lw	t1,84(sp)
204031ec:	43c6                	lw	t2,80(sp)
204031ee:	4436                	lw	s0,76(sp)
204031f0:	4526                	lw	a0,72(sp)
204031f2:	4596                	lw	a1,68(sp)
204031f4:	4606                	lw	a2,64(sp)
204031f6:	56f2                	lw	a3,60(sp)
204031f8:	5762                	lw	a4,56(sp)
204031fa:	57d2                	lw	a5,52(sp)
204031fc:	5842                	lw	a6,48(sp)
204031fe:	58b2                	lw	a7,44(sp)
20403200:	5e22                	lw	t3,40(sp)
20403202:	5e92                	lw	t4,36(sp)
20403204:	5f02                	lw	t5,32(sp)
20403206:	4ff2                	lw	t6,28(sp)
20403208:	6125                	addi	sp,sp,96
2040320a:	30200073          	mret

2040320e <metal_lc1_interrupt_vector_handler>:
metal_lc1_interrupt_vector_handler():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:219

/* The metal_lc1_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc1_interrupt_vector_handler(void) {
2040320e:	711d                	addi	sp,sp,-96
20403210:	ce86                	sw	ra,92(sp)
20403212:	cc96                	sw	t0,88(sp)
20403214:	ca9a                	sw	t1,84(sp)
20403216:	c89e                	sw	t2,80(sp)
20403218:	c6a2                	sw	s0,76(sp)
2040321a:	c4aa                	sw	a0,72(sp)
2040321c:	c2ae                	sw	a1,68(sp)
2040321e:	c0b2                	sw	a2,64(sp)
20403220:	de36                	sw	a3,60(sp)
20403222:	dc3a                	sw	a4,56(sp)
20403224:	da3e                	sw	a5,52(sp)
20403226:	d842                	sw	a6,48(sp)
20403228:	d646                	sw	a7,44(sp)
2040322a:	d472                	sw	t3,40(sp)
2040322c:	d276                	sw	t4,36(sp)
2040322e:	d07a                	sw	t5,32(sp)
20403230:	ce7e                	sw	t6,28(sp)
20403232:	1080                	addi	s0,sp,96
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:220
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC1);
20403234:	987ff0ef          	jal	ra,20402bba <__metal_myhart_id>
20403238:	872a                	mv	a4,a0
2040323a:	800017b7          	lui	a5,0x80001
2040323e:	070a                	slli	a4,a4,0x2
20403240:	e3878793          	addi	a5,a5,-456 # 80000e38 <metal_segment_heap_target_end+0xfffff338>
20403244:	97ba                	add	a5,a5,a4
20403246:	439c                	lw	a5,0(a5)
20403248:	faf42623          	sw	a5,-84(s0)
2040324c:	fac42783          	lw	a5,-84(s0)
20403250:	c78d                	beqz	a5,2040327a <metal_lc1_interrupt_vector_handler+0x6c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:220 (discriminator 1)
20403252:	fac42503          	lw	a0,-84(s0)
20403256:	8e7ff0ef          	jal	ra,20402b3c <__metal_driver_cpu_interrupt_controller>
2040325a:	faa42423          	sw	a0,-88(s0)
2040325e:	fa842783          	lw	a5,-88(s0)
20403262:	2307a783          	lw	a5,560(a5)
20403266:	faf42223          	sw	a5,-92(s0)
2040326a:	fa842783          	lw	a5,-88(s0)
2040326e:	2287a783          	lw	a5,552(a5)
20403272:	fa442583          	lw	a1,-92(s0)
20403276:	4545                	li	a0,17
20403278:	9782                	jalr	a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:221
}
2040327a:	0001                	nop
2040327c:	40f6                	lw	ra,92(sp)
2040327e:	42e6                	lw	t0,88(sp)
20403280:	4356                	lw	t1,84(sp)
20403282:	43c6                	lw	t2,80(sp)
20403284:	4436                	lw	s0,76(sp)
20403286:	4526                	lw	a0,72(sp)
20403288:	4596                	lw	a1,68(sp)
2040328a:	4606                	lw	a2,64(sp)
2040328c:	56f2                	lw	a3,60(sp)
2040328e:	5762                	lw	a4,56(sp)
20403290:	57d2                	lw	a5,52(sp)
20403292:	5842                	lw	a6,48(sp)
20403294:	58b2                	lw	a7,44(sp)
20403296:	5e22                	lw	t3,40(sp)
20403298:	5e92                	lw	t4,36(sp)
2040329a:	5f02                	lw	t5,32(sp)
2040329c:	4ff2                	lw	t6,28(sp)
2040329e:	6125                	addi	sp,sp,96
204032a0:	30200073          	mret

204032a4 <metal_lc2_interrupt_vector_handler>:
metal_lc2_interrupt_vector_handler():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:224

/* The metal_lc2_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc2_interrupt_vector_handler(void) {
204032a4:	711d                	addi	sp,sp,-96
204032a6:	ce86                	sw	ra,92(sp)
204032a8:	cc96                	sw	t0,88(sp)
204032aa:	ca9a                	sw	t1,84(sp)
204032ac:	c89e                	sw	t2,80(sp)
204032ae:	c6a2                	sw	s0,76(sp)
204032b0:	c4aa                	sw	a0,72(sp)
204032b2:	c2ae                	sw	a1,68(sp)
204032b4:	c0b2                	sw	a2,64(sp)
204032b6:	de36                	sw	a3,60(sp)
204032b8:	dc3a                	sw	a4,56(sp)
204032ba:	da3e                	sw	a5,52(sp)
204032bc:	d842                	sw	a6,48(sp)
204032be:	d646                	sw	a7,44(sp)
204032c0:	d472                	sw	t3,40(sp)
204032c2:	d276                	sw	t4,36(sp)
204032c4:	d07a                	sw	t5,32(sp)
204032c6:	ce7e                	sw	t6,28(sp)
204032c8:	1080                	addi	s0,sp,96
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:225
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC2);
204032ca:	8f1ff0ef          	jal	ra,20402bba <__metal_myhart_id>
204032ce:	872a                	mv	a4,a0
204032d0:	800017b7          	lui	a5,0x80001
204032d4:	070a                	slli	a4,a4,0x2
204032d6:	e3878793          	addi	a5,a5,-456 # 80000e38 <metal_segment_heap_target_end+0xfffff338>
204032da:	97ba                	add	a5,a5,a4
204032dc:	439c                	lw	a5,0(a5)
204032de:	faf42623          	sw	a5,-84(s0)
204032e2:	fac42783          	lw	a5,-84(s0)
204032e6:	c78d                	beqz	a5,20403310 <metal_lc2_interrupt_vector_handler+0x6c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:225 (discriminator 1)
204032e8:	fac42503          	lw	a0,-84(s0)
204032ec:	851ff0ef          	jal	ra,20402b3c <__metal_driver_cpu_interrupt_controller>
204032f0:	faa42423          	sw	a0,-88(s0)
204032f4:	fa842783          	lw	a5,-88(s0)
204032f8:	2487a783          	lw	a5,584(a5)
204032fc:	faf42223          	sw	a5,-92(s0)
20403300:	fa842783          	lw	a5,-88(s0)
20403304:	2407a783          	lw	a5,576(a5)
20403308:	fa442583          	lw	a1,-92(s0)
2040330c:	4549                	li	a0,18
2040330e:	9782                	jalr	a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:226
}
20403310:	0001                	nop
20403312:	40f6                	lw	ra,92(sp)
20403314:	42e6                	lw	t0,88(sp)
20403316:	4356                	lw	t1,84(sp)
20403318:	43c6                	lw	t2,80(sp)
2040331a:	4436                	lw	s0,76(sp)
2040331c:	4526                	lw	a0,72(sp)
2040331e:	4596                	lw	a1,68(sp)
20403320:	4606                	lw	a2,64(sp)
20403322:	56f2                	lw	a3,60(sp)
20403324:	5762                	lw	a4,56(sp)
20403326:	57d2                	lw	a5,52(sp)
20403328:	5842                	lw	a6,48(sp)
2040332a:	58b2                	lw	a7,44(sp)
2040332c:	5e22                	lw	t3,40(sp)
2040332e:	5e92                	lw	t4,36(sp)
20403330:	5f02                	lw	t5,32(sp)
20403332:	4ff2                	lw	t6,28(sp)
20403334:	6125                	addi	sp,sp,96
20403336:	30200073          	mret

2040333a <metal_lc3_interrupt_vector_handler>:
metal_lc3_interrupt_vector_handler():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:229

/* The metal_lc3_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc3_interrupt_vector_handler(void) {
2040333a:	711d                	addi	sp,sp,-96
2040333c:	ce86                	sw	ra,92(sp)
2040333e:	cc96                	sw	t0,88(sp)
20403340:	ca9a                	sw	t1,84(sp)
20403342:	c89e                	sw	t2,80(sp)
20403344:	c6a2                	sw	s0,76(sp)
20403346:	c4aa                	sw	a0,72(sp)
20403348:	c2ae                	sw	a1,68(sp)
2040334a:	c0b2                	sw	a2,64(sp)
2040334c:	de36                	sw	a3,60(sp)
2040334e:	dc3a                	sw	a4,56(sp)
20403350:	da3e                	sw	a5,52(sp)
20403352:	d842                	sw	a6,48(sp)
20403354:	d646                	sw	a7,44(sp)
20403356:	d472                	sw	t3,40(sp)
20403358:	d276                	sw	t4,36(sp)
2040335a:	d07a                	sw	t5,32(sp)
2040335c:	ce7e                	sw	t6,28(sp)
2040335e:	1080                	addi	s0,sp,96
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:230
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC3);
20403360:	85bff0ef          	jal	ra,20402bba <__metal_myhart_id>
20403364:	872a                	mv	a4,a0
20403366:	800017b7          	lui	a5,0x80001
2040336a:	070a                	slli	a4,a4,0x2
2040336c:	e3878793          	addi	a5,a5,-456 # 80000e38 <metal_segment_heap_target_end+0xfffff338>
20403370:	97ba                	add	a5,a5,a4
20403372:	439c                	lw	a5,0(a5)
20403374:	faf42623          	sw	a5,-84(s0)
20403378:	fac42783          	lw	a5,-84(s0)
2040337c:	c78d                	beqz	a5,204033a6 <metal_lc3_interrupt_vector_handler+0x6c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:230 (discriminator 1)
2040337e:	fac42503          	lw	a0,-84(s0)
20403382:	fbaff0ef          	jal	ra,20402b3c <__metal_driver_cpu_interrupt_controller>
20403386:	faa42423          	sw	a0,-88(s0)
2040338a:	fa842783          	lw	a5,-88(s0)
2040338e:	2607a783          	lw	a5,608(a5)
20403392:	faf42223          	sw	a5,-92(s0)
20403396:	fa842783          	lw	a5,-88(s0)
2040339a:	2587a783          	lw	a5,600(a5)
2040339e:	fa442583          	lw	a1,-92(s0)
204033a2:	454d                	li	a0,19
204033a4:	9782                	jalr	a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:231
}
204033a6:	0001                	nop
204033a8:	40f6                	lw	ra,92(sp)
204033aa:	42e6                	lw	t0,88(sp)
204033ac:	4356                	lw	t1,84(sp)
204033ae:	43c6                	lw	t2,80(sp)
204033b0:	4436                	lw	s0,76(sp)
204033b2:	4526                	lw	a0,72(sp)
204033b4:	4596                	lw	a1,68(sp)
204033b6:	4606                	lw	a2,64(sp)
204033b8:	56f2                	lw	a3,60(sp)
204033ba:	5762                	lw	a4,56(sp)
204033bc:	57d2                	lw	a5,52(sp)
204033be:	5842                	lw	a6,48(sp)
204033c0:	58b2                	lw	a7,44(sp)
204033c2:	5e22                	lw	t3,40(sp)
204033c4:	5e92                	lw	t4,36(sp)
204033c6:	5f02                	lw	t5,32(sp)
204033c8:	4ff2                	lw	t6,28(sp)
204033ca:	6125                	addi	sp,sp,96
204033cc:	30200073          	mret

204033d0 <metal_lc4_interrupt_vector_handler>:
metal_lc4_interrupt_vector_handler():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:234

/* The metal_lc4_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc4_interrupt_vector_handler(void) {
204033d0:	711d                	addi	sp,sp,-96
204033d2:	ce86                	sw	ra,92(sp)
204033d4:	cc96                	sw	t0,88(sp)
204033d6:	ca9a                	sw	t1,84(sp)
204033d8:	c89e                	sw	t2,80(sp)
204033da:	c6a2                	sw	s0,76(sp)
204033dc:	c4aa                	sw	a0,72(sp)
204033de:	c2ae                	sw	a1,68(sp)
204033e0:	c0b2                	sw	a2,64(sp)
204033e2:	de36                	sw	a3,60(sp)
204033e4:	dc3a                	sw	a4,56(sp)
204033e6:	da3e                	sw	a5,52(sp)
204033e8:	d842                	sw	a6,48(sp)
204033ea:	d646                	sw	a7,44(sp)
204033ec:	d472                	sw	t3,40(sp)
204033ee:	d276                	sw	t4,36(sp)
204033f0:	d07a                	sw	t5,32(sp)
204033f2:	ce7e                	sw	t6,28(sp)
204033f4:	1080                	addi	s0,sp,96
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:235
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC4);
204033f6:	fc4ff0ef          	jal	ra,20402bba <__metal_myhart_id>
204033fa:	872a                	mv	a4,a0
204033fc:	800017b7          	lui	a5,0x80001
20403400:	070a                	slli	a4,a4,0x2
20403402:	e3878793          	addi	a5,a5,-456 # 80000e38 <metal_segment_heap_target_end+0xfffff338>
20403406:	97ba                	add	a5,a5,a4
20403408:	439c                	lw	a5,0(a5)
2040340a:	faf42623          	sw	a5,-84(s0)
2040340e:	fac42783          	lw	a5,-84(s0)
20403412:	c78d                	beqz	a5,2040343c <metal_lc4_interrupt_vector_handler+0x6c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:235 (discriminator 1)
20403414:	fac42503          	lw	a0,-84(s0)
20403418:	f24ff0ef          	jal	ra,20402b3c <__metal_driver_cpu_interrupt_controller>
2040341c:	faa42423          	sw	a0,-88(s0)
20403420:	fa842783          	lw	a5,-88(s0)
20403424:	2787a783          	lw	a5,632(a5)
20403428:	faf42223          	sw	a5,-92(s0)
2040342c:	fa842783          	lw	a5,-88(s0)
20403430:	2707a783          	lw	a5,624(a5)
20403434:	fa442583          	lw	a1,-92(s0)
20403438:	4551                	li	a0,20
2040343a:	9782                	jalr	a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:236
}
2040343c:	0001                	nop
2040343e:	40f6                	lw	ra,92(sp)
20403440:	42e6                	lw	t0,88(sp)
20403442:	4356                	lw	t1,84(sp)
20403444:	43c6                	lw	t2,80(sp)
20403446:	4436                	lw	s0,76(sp)
20403448:	4526                	lw	a0,72(sp)
2040344a:	4596                	lw	a1,68(sp)
2040344c:	4606                	lw	a2,64(sp)
2040344e:	56f2                	lw	a3,60(sp)
20403450:	5762                	lw	a4,56(sp)
20403452:	57d2                	lw	a5,52(sp)
20403454:	5842                	lw	a6,48(sp)
20403456:	58b2                	lw	a7,44(sp)
20403458:	5e22                	lw	t3,40(sp)
2040345a:	5e92                	lw	t4,36(sp)
2040345c:	5f02                	lw	t5,32(sp)
2040345e:	4ff2                	lw	t6,28(sp)
20403460:	6125                	addi	sp,sp,96
20403462:	30200073          	mret

20403466 <metal_lc5_interrupt_vector_handler>:
metal_lc5_interrupt_vector_handler():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:239

/* The metal_lc5_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc5_interrupt_vector_handler(void) {
20403466:	711d                	addi	sp,sp,-96
20403468:	ce86                	sw	ra,92(sp)
2040346a:	cc96                	sw	t0,88(sp)
2040346c:	ca9a                	sw	t1,84(sp)
2040346e:	c89e                	sw	t2,80(sp)
20403470:	c6a2                	sw	s0,76(sp)
20403472:	c4aa                	sw	a0,72(sp)
20403474:	c2ae                	sw	a1,68(sp)
20403476:	c0b2                	sw	a2,64(sp)
20403478:	de36                	sw	a3,60(sp)
2040347a:	dc3a                	sw	a4,56(sp)
2040347c:	da3e                	sw	a5,52(sp)
2040347e:	d842                	sw	a6,48(sp)
20403480:	d646                	sw	a7,44(sp)
20403482:	d472                	sw	t3,40(sp)
20403484:	d276                	sw	t4,36(sp)
20403486:	d07a                	sw	t5,32(sp)
20403488:	ce7e                	sw	t6,28(sp)
2040348a:	1080                	addi	s0,sp,96
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:240
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC5);
2040348c:	f2eff0ef          	jal	ra,20402bba <__metal_myhart_id>
20403490:	872a                	mv	a4,a0
20403492:	800017b7          	lui	a5,0x80001
20403496:	070a                	slli	a4,a4,0x2
20403498:	e3878793          	addi	a5,a5,-456 # 80000e38 <metal_segment_heap_target_end+0xfffff338>
2040349c:	97ba                	add	a5,a5,a4
2040349e:	439c                	lw	a5,0(a5)
204034a0:	faf42623          	sw	a5,-84(s0)
204034a4:	fac42783          	lw	a5,-84(s0)
204034a8:	c78d                	beqz	a5,204034d2 <metal_lc5_interrupt_vector_handler+0x6c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:240 (discriminator 1)
204034aa:	fac42503          	lw	a0,-84(s0)
204034ae:	e8eff0ef          	jal	ra,20402b3c <__metal_driver_cpu_interrupt_controller>
204034b2:	faa42423          	sw	a0,-88(s0)
204034b6:	fa842783          	lw	a5,-88(s0)
204034ba:	2907a783          	lw	a5,656(a5)
204034be:	faf42223          	sw	a5,-92(s0)
204034c2:	fa842783          	lw	a5,-88(s0)
204034c6:	2887a783          	lw	a5,648(a5)
204034ca:	fa442583          	lw	a1,-92(s0)
204034ce:	4555                	li	a0,21
204034d0:	9782                	jalr	a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:241
}
204034d2:	0001                	nop
204034d4:	40f6                	lw	ra,92(sp)
204034d6:	42e6                	lw	t0,88(sp)
204034d8:	4356                	lw	t1,84(sp)
204034da:	43c6                	lw	t2,80(sp)
204034dc:	4436                	lw	s0,76(sp)
204034de:	4526                	lw	a0,72(sp)
204034e0:	4596                	lw	a1,68(sp)
204034e2:	4606                	lw	a2,64(sp)
204034e4:	56f2                	lw	a3,60(sp)
204034e6:	5762                	lw	a4,56(sp)
204034e8:	57d2                	lw	a5,52(sp)
204034ea:	5842                	lw	a6,48(sp)
204034ec:	58b2                	lw	a7,44(sp)
204034ee:	5e22                	lw	t3,40(sp)
204034f0:	5e92                	lw	t4,36(sp)
204034f2:	5f02                	lw	t5,32(sp)
204034f4:	4ff2                	lw	t6,28(sp)
204034f6:	6125                	addi	sp,sp,96
204034f8:	30200073          	mret

204034fc <metal_lc6_interrupt_vector_handler>:
metal_lc6_interrupt_vector_handler():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:244

/* The metal_lc6_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc6_interrupt_vector_handler(void) {
204034fc:	711d                	addi	sp,sp,-96
204034fe:	ce86                	sw	ra,92(sp)
20403500:	cc96                	sw	t0,88(sp)
20403502:	ca9a                	sw	t1,84(sp)
20403504:	c89e                	sw	t2,80(sp)
20403506:	c6a2                	sw	s0,76(sp)
20403508:	c4aa                	sw	a0,72(sp)
2040350a:	c2ae                	sw	a1,68(sp)
2040350c:	c0b2                	sw	a2,64(sp)
2040350e:	de36                	sw	a3,60(sp)
20403510:	dc3a                	sw	a4,56(sp)
20403512:	da3e                	sw	a5,52(sp)
20403514:	d842                	sw	a6,48(sp)
20403516:	d646                	sw	a7,44(sp)
20403518:	d472                	sw	t3,40(sp)
2040351a:	d276                	sw	t4,36(sp)
2040351c:	d07a                	sw	t5,32(sp)
2040351e:	ce7e                	sw	t6,28(sp)
20403520:	1080                	addi	s0,sp,96
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:245
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC6);
20403522:	e98ff0ef          	jal	ra,20402bba <__metal_myhart_id>
20403526:	872a                	mv	a4,a0
20403528:	800017b7          	lui	a5,0x80001
2040352c:	070a                	slli	a4,a4,0x2
2040352e:	e3878793          	addi	a5,a5,-456 # 80000e38 <metal_segment_heap_target_end+0xfffff338>
20403532:	97ba                	add	a5,a5,a4
20403534:	439c                	lw	a5,0(a5)
20403536:	faf42623          	sw	a5,-84(s0)
2040353a:	fac42783          	lw	a5,-84(s0)
2040353e:	c78d                	beqz	a5,20403568 <metal_lc6_interrupt_vector_handler+0x6c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:245 (discriminator 1)
20403540:	fac42503          	lw	a0,-84(s0)
20403544:	df8ff0ef          	jal	ra,20402b3c <__metal_driver_cpu_interrupt_controller>
20403548:	faa42423          	sw	a0,-88(s0)
2040354c:	fa842783          	lw	a5,-88(s0)
20403550:	2a87a783          	lw	a5,680(a5)
20403554:	faf42223          	sw	a5,-92(s0)
20403558:	fa842783          	lw	a5,-88(s0)
2040355c:	2a07a783          	lw	a5,672(a5)
20403560:	fa442583          	lw	a1,-92(s0)
20403564:	4559                	li	a0,22
20403566:	9782                	jalr	a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:246
}
20403568:	0001                	nop
2040356a:	40f6                	lw	ra,92(sp)
2040356c:	42e6                	lw	t0,88(sp)
2040356e:	4356                	lw	t1,84(sp)
20403570:	43c6                	lw	t2,80(sp)
20403572:	4436                	lw	s0,76(sp)
20403574:	4526                	lw	a0,72(sp)
20403576:	4596                	lw	a1,68(sp)
20403578:	4606                	lw	a2,64(sp)
2040357a:	56f2                	lw	a3,60(sp)
2040357c:	5762                	lw	a4,56(sp)
2040357e:	57d2                	lw	a5,52(sp)
20403580:	5842                	lw	a6,48(sp)
20403582:	58b2                	lw	a7,44(sp)
20403584:	5e22                	lw	t3,40(sp)
20403586:	5e92                	lw	t4,36(sp)
20403588:	5f02                	lw	t5,32(sp)
2040358a:	4ff2                	lw	t6,28(sp)
2040358c:	6125                	addi	sp,sp,96
2040358e:	30200073          	mret

20403592 <metal_lc7_interrupt_vector_handler>:
metal_lc7_interrupt_vector_handler():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:249

/* The metal_lc7_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc7_interrupt_vector_handler(void) {
20403592:	711d                	addi	sp,sp,-96
20403594:	ce86                	sw	ra,92(sp)
20403596:	cc96                	sw	t0,88(sp)
20403598:	ca9a                	sw	t1,84(sp)
2040359a:	c89e                	sw	t2,80(sp)
2040359c:	c6a2                	sw	s0,76(sp)
2040359e:	c4aa                	sw	a0,72(sp)
204035a0:	c2ae                	sw	a1,68(sp)
204035a2:	c0b2                	sw	a2,64(sp)
204035a4:	de36                	sw	a3,60(sp)
204035a6:	dc3a                	sw	a4,56(sp)
204035a8:	da3e                	sw	a5,52(sp)
204035aa:	d842                	sw	a6,48(sp)
204035ac:	d646                	sw	a7,44(sp)
204035ae:	d472                	sw	t3,40(sp)
204035b0:	d276                	sw	t4,36(sp)
204035b2:	d07a                	sw	t5,32(sp)
204035b4:	ce7e                	sw	t6,28(sp)
204035b6:	1080                	addi	s0,sp,96
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:250
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC7);
204035b8:	e02ff0ef          	jal	ra,20402bba <__metal_myhart_id>
204035bc:	872a                	mv	a4,a0
204035be:	800017b7          	lui	a5,0x80001
204035c2:	070a                	slli	a4,a4,0x2
204035c4:	e3878793          	addi	a5,a5,-456 # 80000e38 <metal_segment_heap_target_end+0xfffff338>
204035c8:	97ba                	add	a5,a5,a4
204035ca:	439c                	lw	a5,0(a5)
204035cc:	faf42623          	sw	a5,-84(s0)
204035d0:	fac42783          	lw	a5,-84(s0)
204035d4:	c78d                	beqz	a5,204035fe <metal_lc7_interrupt_vector_handler+0x6c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:250 (discriminator 1)
204035d6:	fac42503          	lw	a0,-84(s0)
204035da:	d62ff0ef          	jal	ra,20402b3c <__metal_driver_cpu_interrupt_controller>
204035de:	faa42423          	sw	a0,-88(s0)
204035e2:	fa842783          	lw	a5,-88(s0)
204035e6:	2c07a783          	lw	a5,704(a5)
204035ea:	faf42223          	sw	a5,-92(s0)
204035ee:	fa842783          	lw	a5,-88(s0)
204035f2:	2b87a783          	lw	a5,696(a5)
204035f6:	fa442583          	lw	a1,-92(s0)
204035fa:	455d                	li	a0,23
204035fc:	9782                	jalr	a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:251
}
204035fe:	0001                	nop
20403600:	40f6                	lw	ra,92(sp)
20403602:	42e6                	lw	t0,88(sp)
20403604:	4356                	lw	t1,84(sp)
20403606:	43c6                	lw	t2,80(sp)
20403608:	4436                	lw	s0,76(sp)
2040360a:	4526                	lw	a0,72(sp)
2040360c:	4596                	lw	a1,68(sp)
2040360e:	4606                	lw	a2,64(sp)
20403610:	56f2                	lw	a3,60(sp)
20403612:	5762                	lw	a4,56(sp)
20403614:	57d2                	lw	a5,52(sp)
20403616:	5842                	lw	a6,48(sp)
20403618:	58b2                	lw	a7,44(sp)
2040361a:	5e22                	lw	t3,40(sp)
2040361c:	5e92                	lw	t4,36(sp)
2040361e:	5f02                	lw	t5,32(sp)
20403620:	4ff2                	lw	t6,28(sp)
20403622:	6125                	addi	sp,sp,96
20403624:	30200073          	mret

20403628 <metal_lc8_interrupt_vector_handler>:
metal_lc8_interrupt_vector_handler():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:254

/* The metal_lc8_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc8_interrupt_vector_handler(void) {
20403628:	711d                	addi	sp,sp,-96
2040362a:	ce86                	sw	ra,92(sp)
2040362c:	cc96                	sw	t0,88(sp)
2040362e:	ca9a                	sw	t1,84(sp)
20403630:	c89e                	sw	t2,80(sp)
20403632:	c6a2                	sw	s0,76(sp)
20403634:	c4aa                	sw	a0,72(sp)
20403636:	c2ae                	sw	a1,68(sp)
20403638:	c0b2                	sw	a2,64(sp)
2040363a:	de36                	sw	a3,60(sp)
2040363c:	dc3a                	sw	a4,56(sp)
2040363e:	da3e                	sw	a5,52(sp)
20403640:	d842                	sw	a6,48(sp)
20403642:	d646                	sw	a7,44(sp)
20403644:	d472                	sw	t3,40(sp)
20403646:	d276                	sw	t4,36(sp)
20403648:	d07a                	sw	t5,32(sp)
2040364a:	ce7e                	sw	t6,28(sp)
2040364c:	1080                	addi	s0,sp,96
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:255
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC8);
2040364e:	d6cff0ef          	jal	ra,20402bba <__metal_myhart_id>
20403652:	872a                	mv	a4,a0
20403654:	800017b7          	lui	a5,0x80001
20403658:	070a                	slli	a4,a4,0x2
2040365a:	e3878793          	addi	a5,a5,-456 # 80000e38 <metal_segment_heap_target_end+0xfffff338>
2040365e:	97ba                	add	a5,a5,a4
20403660:	439c                	lw	a5,0(a5)
20403662:	faf42623          	sw	a5,-84(s0)
20403666:	fac42783          	lw	a5,-84(s0)
2040366a:	c78d                	beqz	a5,20403694 <metal_lc8_interrupt_vector_handler+0x6c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:255 (discriminator 1)
2040366c:	fac42503          	lw	a0,-84(s0)
20403670:	cccff0ef          	jal	ra,20402b3c <__metal_driver_cpu_interrupt_controller>
20403674:	faa42423          	sw	a0,-88(s0)
20403678:	fa842783          	lw	a5,-88(s0)
2040367c:	2d87a783          	lw	a5,728(a5)
20403680:	faf42223          	sw	a5,-92(s0)
20403684:	fa842783          	lw	a5,-88(s0)
20403688:	2d07a783          	lw	a5,720(a5)
2040368c:	fa442583          	lw	a1,-92(s0)
20403690:	4561                	li	a0,24
20403692:	9782                	jalr	a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:256
}
20403694:	0001                	nop
20403696:	40f6                	lw	ra,92(sp)
20403698:	42e6                	lw	t0,88(sp)
2040369a:	4356                	lw	t1,84(sp)
2040369c:	43c6                	lw	t2,80(sp)
2040369e:	4436                	lw	s0,76(sp)
204036a0:	4526                	lw	a0,72(sp)
204036a2:	4596                	lw	a1,68(sp)
204036a4:	4606                	lw	a2,64(sp)
204036a6:	56f2                	lw	a3,60(sp)
204036a8:	5762                	lw	a4,56(sp)
204036aa:	57d2                	lw	a5,52(sp)
204036ac:	5842                	lw	a6,48(sp)
204036ae:	58b2                	lw	a7,44(sp)
204036b0:	5e22                	lw	t3,40(sp)
204036b2:	5e92                	lw	t4,36(sp)
204036b4:	5f02                	lw	t5,32(sp)
204036b6:	4ff2                	lw	t6,28(sp)
204036b8:	6125                	addi	sp,sp,96
204036ba:	30200073          	mret

204036be <metal_lc9_interrupt_vector_handler>:
metal_lc9_interrupt_vector_handler():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:259

/* The metal_lc9_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc9_interrupt_vector_handler(void) {
204036be:	711d                	addi	sp,sp,-96
204036c0:	ce86                	sw	ra,92(sp)
204036c2:	cc96                	sw	t0,88(sp)
204036c4:	ca9a                	sw	t1,84(sp)
204036c6:	c89e                	sw	t2,80(sp)
204036c8:	c6a2                	sw	s0,76(sp)
204036ca:	c4aa                	sw	a0,72(sp)
204036cc:	c2ae                	sw	a1,68(sp)
204036ce:	c0b2                	sw	a2,64(sp)
204036d0:	de36                	sw	a3,60(sp)
204036d2:	dc3a                	sw	a4,56(sp)
204036d4:	da3e                	sw	a5,52(sp)
204036d6:	d842                	sw	a6,48(sp)
204036d8:	d646                	sw	a7,44(sp)
204036da:	d472                	sw	t3,40(sp)
204036dc:	d276                	sw	t4,36(sp)
204036de:	d07a                	sw	t5,32(sp)
204036e0:	ce7e                	sw	t6,28(sp)
204036e2:	1080                	addi	s0,sp,96
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:260
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC9);
204036e4:	cd6ff0ef          	jal	ra,20402bba <__metal_myhart_id>
204036e8:	872a                	mv	a4,a0
204036ea:	800017b7          	lui	a5,0x80001
204036ee:	070a                	slli	a4,a4,0x2
204036f0:	e3878793          	addi	a5,a5,-456 # 80000e38 <metal_segment_heap_target_end+0xfffff338>
204036f4:	97ba                	add	a5,a5,a4
204036f6:	439c                	lw	a5,0(a5)
204036f8:	faf42623          	sw	a5,-84(s0)
204036fc:	fac42783          	lw	a5,-84(s0)
20403700:	c78d                	beqz	a5,2040372a <metal_lc9_interrupt_vector_handler+0x6c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:260 (discriminator 1)
20403702:	fac42503          	lw	a0,-84(s0)
20403706:	c36ff0ef          	jal	ra,20402b3c <__metal_driver_cpu_interrupt_controller>
2040370a:	faa42423          	sw	a0,-88(s0)
2040370e:	fa842783          	lw	a5,-88(s0)
20403712:	2f07a783          	lw	a5,752(a5)
20403716:	faf42223          	sw	a5,-92(s0)
2040371a:	fa842783          	lw	a5,-88(s0)
2040371e:	2e87a783          	lw	a5,744(a5)
20403722:	fa442583          	lw	a1,-92(s0)
20403726:	4565                	li	a0,25
20403728:	9782                	jalr	a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:261
}
2040372a:	0001                	nop
2040372c:	40f6                	lw	ra,92(sp)
2040372e:	42e6                	lw	t0,88(sp)
20403730:	4356                	lw	t1,84(sp)
20403732:	43c6                	lw	t2,80(sp)
20403734:	4436                	lw	s0,76(sp)
20403736:	4526                	lw	a0,72(sp)
20403738:	4596                	lw	a1,68(sp)
2040373a:	4606                	lw	a2,64(sp)
2040373c:	56f2                	lw	a3,60(sp)
2040373e:	5762                	lw	a4,56(sp)
20403740:	57d2                	lw	a5,52(sp)
20403742:	5842                	lw	a6,48(sp)
20403744:	58b2                	lw	a7,44(sp)
20403746:	5e22                	lw	t3,40(sp)
20403748:	5e92                	lw	t4,36(sp)
2040374a:	5f02                	lw	t5,32(sp)
2040374c:	4ff2                	lw	t6,28(sp)
2040374e:	6125                	addi	sp,sp,96
20403750:	30200073          	mret

20403754 <metal_lc10_interrupt_vector_handler>:
metal_lc10_interrupt_vector_handler():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:265

/* The metal_lc10_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_lc10_interrupt_vector_handler(void) {
20403754:	711d                	addi	sp,sp,-96
20403756:	ce86                	sw	ra,92(sp)
20403758:	cc96                	sw	t0,88(sp)
2040375a:	ca9a                	sw	t1,84(sp)
2040375c:	c89e                	sw	t2,80(sp)
2040375e:	c6a2                	sw	s0,76(sp)
20403760:	c4aa                	sw	a0,72(sp)
20403762:	c2ae                	sw	a1,68(sp)
20403764:	c0b2                	sw	a2,64(sp)
20403766:	de36                	sw	a3,60(sp)
20403768:	dc3a                	sw	a4,56(sp)
2040376a:	da3e                	sw	a5,52(sp)
2040376c:	d842                	sw	a6,48(sp)
2040376e:	d646                	sw	a7,44(sp)
20403770:	d472                	sw	t3,40(sp)
20403772:	d276                	sw	t4,36(sp)
20403774:	d07a                	sw	t5,32(sp)
20403776:	ce7e                	sw	t6,28(sp)
20403778:	1080                	addi	s0,sp,96
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:266
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC10);
2040377a:	c40ff0ef          	jal	ra,20402bba <__metal_myhart_id>
2040377e:	872a                	mv	a4,a0
20403780:	800017b7          	lui	a5,0x80001
20403784:	070a                	slli	a4,a4,0x2
20403786:	e3878793          	addi	a5,a5,-456 # 80000e38 <metal_segment_heap_target_end+0xfffff338>
2040378a:	97ba                	add	a5,a5,a4
2040378c:	439c                	lw	a5,0(a5)
2040378e:	faf42623          	sw	a5,-84(s0)
20403792:	fac42783          	lw	a5,-84(s0)
20403796:	c78d                	beqz	a5,204037c0 <metal_lc10_interrupt_vector_handler+0x6c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:266 (discriminator 1)
20403798:	fac42503          	lw	a0,-84(s0)
2040379c:	ba0ff0ef          	jal	ra,20402b3c <__metal_driver_cpu_interrupt_controller>
204037a0:	faa42423          	sw	a0,-88(s0)
204037a4:	fa842783          	lw	a5,-88(s0)
204037a8:	3087a783          	lw	a5,776(a5)
204037ac:	faf42223          	sw	a5,-92(s0)
204037b0:	fa842783          	lw	a5,-88(s0)
204037b4:	3007a783          	lw	a5,768(a5)
204037b8:	fa442583          	lw	a1,-92(s0)
204037bc:	4569                	li	a0,26
204037be:	9782                	jalr	a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:267
}
204037c0:	0001                	nop
204037c2:	40f6                	lw	ra,92(sp)
204037c4:	42e6                	lw	t0,88(sp)
204037c6:	4356                	lw	t1,84(sp)
204037c8:	43c6                	lw	t2,80(sp)
204037ca:	4436                	lw	s0,76(sp)
204037cc:	4526                	lw	a0,72(sp)
204037ce:	4596                	lw	a1,68(sp)
204037d0:	4606                	lw	a2,64(sp)
204037d2:	56f2                	lw	a3,60(sp)
204037d4:	5762                	lw	a4,56(sp)
204037d6:	57d2                	lw	a5,52(sp)
204037d8:	5842                	lw	a6,48(sp)
204037da:	58b2                	lw	a7,44(sp)
204037dc:	5e22                	lw	t3,40(sp)
204037de:	5e92                	lw	t4,36(sp)
204037e0:	5f02                	lw	t5,32(sp)
204037e2:	4ff2                	lw	t6,28(sp)
204037e4:	6125                	addi	sp,sp,96
204037e6:	30200073          	mret

204037ea <metal_lc11_interrupt_vector_handler>:
metal_lc11_interrupt_vector_handler():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:271

/* The metal_lc11_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_lc11_interrupt_vector_handler(void) {
204037ea:	711d                	addi	sp,sp,-96
204037ec:	ce86                	sw	ra,92(sp)
204037ee:	cc96                	sw	t0,88(sp)
204037f0:	ca9a                	sw	t1,84(sp)
204037f2:	c89e                	sw	t2,80(sp)
204037f4:	c6a2                	sw	s0,76(sp)
204037f6:	c4aa                	sw	a0,72(sp)
204037f8:	c2ae                	sw	a1,68(sp)
204037fa:	c0b2                	sw	a2,64(sp)
204037fc:	de36                	sw	a3,60(sp)
204037fe:	dc3a                	sw	a4,56(sp)
20403800:	da3e                	sw	a5,52(sp)
20403802:	d842                	sw	a6,48(sp)
20403804:	d646                	sw	a7,44(sp)
20403806:	d472                	sw	t3,40(sp)
20403808:	d276                	sw	t4,36(sp)
2040380a:	d07a                	sw	t5,32(sp)
2040380c:	ce7e                	sw	t6,28(sp)
2040380e:	1080                	addi	s0,sp,96
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:272
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC11);
20403810:	baaff0ef          	jal	ra,20402bba <__metal_myhart_id>
20403814:	872a                	mv	a4,a0
20403816:	800017b7          	lui	a5,0x80001
2040381a:	070a                	slli	a4,a4,0x2
2040381c:	e3878793          	addi	a5,a5,-456 # 80000e38 <metal_segment_heap_target_end+0xfffff338>
20403820:	97ba                	add	a5,a5,a4
20403822:	439c                	lw	a5,0(a5)
20403824:	faf42623          	sw	a5,-84(s0)
20403828:	fac42783          	lw	a5,-84(s0)
2040382c:	c78d                	beqz	a5,20403856 <metal_lc11_interrupt_vector_handler+0x6c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:272 (discriminator 1)
2040382e:	fac42503          	lw	a0,-84(s0)
20403832:	b0aff0ef          	jal	ra,20402b3c <__metal_driver_cpu_interrupt_controller>
20403836:	faa42423          	sw	a0,-88(s0)
2040383a:	fa842783          	lw	a5,-88(s0)
2040383e:	3207a783          	lw	a5,800(a5)
20403842:	faf42223          	sw	a5,-92(s0)
20403846:	fa842783          	lw	a5,-88(s0)
2040384a:	3187a783          	lw	a5,792(a5)
2040384e:	fa442583          	lw	a1,-92(s0)
20403852:	456d                	li	a0,27
20403854:	9782                	jalr	a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:273
}
20403856:	0001                	nop
20403858:	40f6                	lw	ra,92(sp)
2040385a:	42e6                	lw	t0,88(sp)
2040385c:	4356                	lw	t1,84(sp)
2040385e:	43c6                	lw	t2,80(sp)
20403860:	4436                	lw	s0,76(sp)
20403862:	4526                	lw	a0,72(sp)
20403864:	4596                	lw	a1,68(sp)
20403866:	4606                	lw	a2,64(sp)
20403868:	56f2                	lw	a3,60(sp)
2040386a:	5762                	lw	a4,56(sp)
2040386c:	57d2                	lw	a5,52(sp)
2040386e:	5842                	lw	a6,48(sp)
20403870:	58b2                	lw	a7,44(sp)
20403872:	5e22                	lw	t3,40(sp)
20403874:	5e92                	lw	t4,36(sp)
20403876:	5f02                	lw	t5,32(sp)
20403878:	4ff2                	lw	t6,28(sp)
2040387a:	6125                	addi	sp,sp,96
2040387c:	30200073          	mret

20403880 <metal_lc12_interrupt_vector_handler>:
metal_lc12_interrupt_vector_handler():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:277

/* The metal_lc12_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_lc12_interrupt_vector_handler(void) {
20403880:	711d                	addi	sp,sp,-96
20403882:	ce86                	sw	ra,92(sp)
20403884:	cc96                	sw	t0,88(sp)
20403886:	ca9a                	sw	t1,84(sp)
20403888:	c89e                	sw	t2,80(sp)
2040388a:	c6a2                	sw	s0,76(sp)
2040388c:	c4aa                	sw	a0,72(sp)
2040388e:	c2ae                	sw	a1,68(sp)
20403890:	c0b2                	sw	a2,64(sp)
20403892:	de36                	sw	a3,60(sp)
20403894:	dc3a                	sw	a4,56(sp)
20403896:	da3e                	sw	a5,52(sp)
20403898:	d842                	sw	a6,48(sp)
2040389a:	d646                	sw	a7,44(sp)
2040389c:	d472                	sw	t3,40(sp)
2040389e:	d276                	sw	t4,36(sp)
204038a0:	d07a                	sw	t5,32(sp)
204038a2:	ce7e                	sw	t6,28(sp)
204038a4:	1080                	addi	s0,sp,96
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:278
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC12);
204038a6:	b14ff0ef          	jal	ra,20402bba <__metal_myhart_id>
204038aa:	872a                	mv	a4,a0
204038ac:	800017b7          	lui	a5,0x80001
204038b0:	070a                	slli	a4,a4,0x2
204038b2:	e3878793          	addi	a5,a5,-456 # 80000e38 <metal_segment_heap_target_end+0xfffff338>
204038b6:	97ba                	add	a5,a5,a4
204038b8:	439c                	lw	a5,0(a5)
204038ba:	faf42623          	sw	a5,-84(s0)
204038be:	fac42783          	lw	a5,-84(s0)
204038c2:	c78d                	beqz	a5,204038ec <metal_lc12_interrupt_vector_handler+0x6c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:278 (discriminator 1)
204038c4:	fac42503          	lw	a0,-84(s0)
204038c8:	a74ff0ef          	jal	ra,20402b3c <__metal_driver_cpu_interrupt_controller>
204038cc:	faa42423          	sw	a0,-88(s0)
204038d0:	fa842783          	lw	a5,-88(s0)
204038d4:	3387a783          	lw	a5,824(a5)
204038d8:	faf42223          	sw	a5,-92(s0)
204038dc:	fa842783          	lw	a5,-88(s0)
204038e0:	3307a783          	lw	a5,816(a5)
204038e4:	fa442583          	lw	a1,-92(s0)
204038e8:	4571                	li	a0,28
204038ea:	9782                	jalr	a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:279
}
204038ec:	0001                	nop
204038ee:	40f6                	lw	ra,92(sp)
204038f0:	42e6                	lw	t0,88(sp)
204038f2:	4356                	lw	t1,84(sp)
204038f4:	43c6                	lw	t2,80(sp)
204038f6:	4436                	lw	s0,76(sp)
204038f8:	4526                	lw	a0,72(sp)
204038fa:	4596                	lw	a1,68(sp)
204038fc:	4606                	lw	a2,64(sp)
204038fe:	56f2                	lw	a3,60(sp)
20403900:	5762                	lw	a4,56(sp)
20403902:	57d2                	lw	a5,52(sp)
20403904:	5842                	lw	a6,48(sp)
20403906:	58b2                	lw	a7,44(sp)
20403908:	5e22                	lw	t3,40(sp)
2040390a:	5e92                	lw	t4,36(sp)
2040390c:	5f02                	lw	t5,32(sp)
2040390e:	4ff2                	lw	t6,28(sp)
20403910:	6125                	addi	sp,sp,96
20403912:	30200073          	mret

20403916 <metal_lc13_interrupt_vector_handler>:
metal_lc13_interrupt_vector_handler():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:283

/* The metal_lc13_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_lc13_interrupt_vector_handler(void) {
20403916:	711d                	addi	sp,sp,-96
20403918:	ce86                	sw	ra,92(sp)
2040391a:	cc96                	sw	t0,88(sp)
2040391c:	ca9a                	sw	t1,84(sp)
2040391e:	c89e                	sw	t2,80(sp)
20403920:	c6a2                	sw	s0,76(sp)
20403922:	c4aa                	sw	a0,72(sp)
20403924:	c2ae                	sw	a1,68(sp)
20403926:	c0b2                	sw	a2,64(sp)
20403928:	de36                	sw	a3,60(sp)
2040392a:	dc3a                	sw	a4,56(sp)
2040392c:	da3e                	sw	a5,52(sp)
2040392e:	d842                	sw	a6,48(sp)
20403930:	d646                	sw	a7,44(sp)
20403932:	d472                	sw	t3,40(sp)
20403934:	d276                	sw	t4,36(sp)
20403936:	d07a                	sw	t5,32(sp)
20403938:	ce7e                	sw	t6,28(sp)
2040393a:	1080                	addi	s0,sp,96
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:284
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC13);
2040393c:	a7eff0ef          	jal	ra,20402bba <__metal_myhart_id>
20403940:	872a                	mv	a4,a0
20403942:	800017b7          	lui	a5,0x80001
20403946:	070a                	slli	a4,a4,0x2
20403948:	e3878793          	addi	a5,a5,-456 # 80000e38 <metal_segment_heap_target_end+0xfffff338>
2040394c:	97ba                	add	a5,a5,a4
2040394e:	439c                	lw	a5,0(a5)
20403950:	faf42623          	sw	a5,-84(s0)
20403954:	fac42783          	lw	a5,-84(s0)
20403958:	c78d                	beqz	a5,20403982 <metal_lc13_interrupt_vector_handler+0x6c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:284 (discriminator 1)
2040395a:	fac42503          	lw	a0,-84(s0)
2040395e:	9deff0ef          	jal	ra,20402b3c <__metal_driver_cpu_interrupt_controller>
20403962:	faa42423          	sw	a0,-88(s0)
20403966:	fa842783          	lw	a5,-88(s0)
2040396a:	3507a783          	lw	a5,848(a5)
2040396e:	faf42223          	sw	a5,-92(s0)
20403972:	fa842783          	lw	a5,-88(s0)
20403976:	3487a783          	lw	a5,840(a5)
2040397a:	fa442583          	lw	a1,-92(s0)
2040397e:	4575                	li	a0,29
20403980:	9782                	jalr	a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:285
}
20403982:	0001                	nop
20403984:	40f6                	lw	ra,92(sp)
20403986:	42e6                	lw	t0,88(sp)
20403988:	4356                	lw	t1,84(sp)
2040398a:	43c6                	lw	t2,80(sp)
2040398c:	4436                	lw	s0,76(sp)
2040398e:	4526                	lw	a0,72(sp)
20403990:	4596                	lw	a1,68(sp)
20403992:	4606                	lw	a2,64(sp)
20403994:	56f2                	lw	a3,60(sp)
20403996:	5762                	lw	a4,56(sp)
20403998:	57d2                	lw	a5,52(sp)
2040399a:	5842                	lw	a6,48(sp)
2040399c:	58b2                	lw	a7,44(sp)
2040399e:	5e22                	lw	t3,40(sp)
204039a0:	5e92                	lw	t4,36(sp)
204039a2:	5f02                	lw	t5,32(sp)
204039a4:	4ff2                	lw	t6,28(sp)
204039a6:	6125                	addi	sp,sp,96
204039a8:	30200073          	mret

204039ac <metal_lc14_interrupt_vector_handler>:
metal_lc14_interrupt_vector_handler():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:289

/* The metal_lc14_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_lc14_interrupt_vector_handler(void) {
204039ac:	711d                	addi	sp,sp,-96
204039ae:	ce86                	sw	ra,92(sp)
204039b0:	cc96                	sw	t0,88(sp)
204039b2:	ca9a                	sw	t1,84(sp)
204039b4:	c89e                	sw	t2,80(sp)
204039b6:	c6a2                	sw	s0,76(sp)
204039b8:	c4aa                	sw	a0,72(sp)
204039ba:	c2ae                	sw	a1,68(sp)
204039bc:	c0b2                	sw	a2,64(sp)
204039be:	de36                	sw	a3,60(sp)
204039c0:	dc3a                	sw	a4,56(sp)
204039c2:	da3e                	sw	a5,52(sp)
204039c4:	d842                	sw	a6,48(sp)
204039c6:	d646                	sw	a7,44(sp)
204039c8:	d472                	sw	t3,40(sp)
204039ca:	d276                	sw	t4,36(sp)
204039cc:	d07a                	sw	t5,32(sp)
204039ce:	ce7e                	sw	t6,28(sp)
204039d0:	1080                	addi	s0,sp,96
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:290
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC14);
204039d2:	9e8ff0ef          	jal	ra,20402bba <__metal_myhart_id>
204039d6:	872a                	mv	a4,a0
204039d8:	800017b7          	lui	a5,0x80001
204039dc:	070a                	slli	a4,a4,0x2
204039de:	e3878793          	addi	a5,a5,-456 # 80000e38 <metal_segment_heap_target_end+0xfffff338>
204039e2:	97ba                	add	a5,a5,a4
204039e4:	439c                	lw	a5,0(a5)
204039e6:	faf42623          	sw	a5,-84(s0)
204039ea:	fac42783          	lw	a5,-84(s0)
204039ee:	c78d                	beqz	a5,20403a18 <metal_lc14_interrupt_vector_handler+0x6c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:290 (discriminator 1)
204039f0:	fac42503          	lw	a0,-84(s0)
204039f4:	948ff0ef          	jal	ra,20402b3c <__metal_driver_cpu_interrupt_controller>
204039f8:	faa42423          	sw	a0,-88(s0)
204039fc:	fa842783          	lw	a5,-88(s0)
20403a00:	3687a783          	lw	a5,872(a5)
20403a04:	faf42223          	sw	a5,-92(s0)
20403a08:	fa842783          	lw	a5,-88(s0)
20403a0c:	3607a783          	lw	a5,864(a5)
20403a10:	fa442583          	lw	a1,-92(s0)
20403a14:	4579                	li	a0,30
20403a16:	9782                	jalr	a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:291
}
20403a18:	0001                	nop
20403a1a:	40f6                	lw	ra,92(sp)
20403a1c:	42e6                	lw	t0,88(sp)
20403a1e:	4356                	lw	t1,84(sp)
20403a20:	43c6                	lw	t2,80(sp)
20403a22:	4436                	lw	s0,76(sp)
20403a24:	4526                	lw	a0,72(sp)
20403a26:	4596                	lw	a1,68(sp)
20403a28:	4606                	lw	a2,64(sp)
20403a2a:	56f2                	lw	a3,60(sp)
20403a2c:	5762                	lw	a4,56(sp)
20403a2e:	57d2                	lw	a5,52(sp)
20403a30:	5842                	lw	a6,48(sp)
20403a32:	58b2                	lw	a7,44(sp)
20403a34:	5e22                	lw	t3,40(sp)
20403a36:	5e92                	lw	t4,36(sp)
20403a38:	5f02                	lw	t5,32(sp)
20403a3a:	4ff2                	lw	t6,28(sp)
20403a3c:	6125                	addi	sp,sp,96
20403a3e:	30200073          	mret

20403a42 <metal_lc15_interrupt_vector_handler>:
metal_lc15_interrupt_vector_handler():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:295

/* The metal_lc15_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_lc15_interrupt_vector_handler(void) {
20403a42:	711d                	addi	sp,sp,-96
20403a44:	ce86                	sw	ra,92(sp)
20403a46:	cc96                	sw	t0,88(sp)
20403a48:	ca9a                	sw	t1,84(sp)
20403a4a:	c89e                	sw	t2,80(sp)
20403a4c:	c6a2                	sw	s0,76(sp)
20403a4e:	c4aa                	sw	a0,72(sp)
20403a50:	c2ae                	sw	a1,68(sp)
20403a52:	c0b2                	sw	a2,64(sp)
20403a54:	de36                	sw	a3,60(sp)
20403a56:	dc3a                	sw	a4,56(sp)
20403a58:	da3e                	sw	a5,52(sp)
20403a5a:	d842                	sw	a6,48(sp)
20403a5c:	d646                	sw	a7,44(sp)
20403a5e:	d472                	sw	t3,40(sp)
20403a60:	d276                	sw	t4,36(sp)
20403a62:	d07a                	sw	t5,32(sp)
20403a64:	ce7e                	sw	t6,28(sp)
20403a66:	1080                	addi	s0,sp,96
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:296
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC15);
20403a68:	952ff0ef          	jal	ra,20402bba <__metal_myhart_id>
20403a6c:	872a                	mv	a4,a0
20403a6e:	800017b7          	lui	a5,0x80001
20403a72:	070a                	slli	a4,a4,0x2
20403a74:	e3878793          	addi	a5,a5,-456 # 80000e38 <metal_segment_heap_target_end+0xfffff338>
20403a78:	97ba                	add	a5,a5,a4
20403a7a:	439c                	lw	a5,0(a5)
20403a7c:	faf42623          	sw	a5,-84(s0)
20403a80:	fac42783          	lw	a5,-84(s0)
20403a84:	c78d                	beqz	a5,20403aae <metal_lc15_interrupt_vector_handler+0x6c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:296 (discriminator 1)
20403a86:	fac42503          	lw	a0,-84(s0)
20403a8a:	8b2ff0ef          	jal	ra,20402b3c <__metal_driver_cpu_interrupt_controller>
20403a8e:	faa42423          	sw	a0,-88(s0)
20403a92:	fa842783          	lw	a5,-88(s0)
20403a96:	3807a783          	lw	a5,896(a5)
20403a9a:	faf42223          	sw	a5,-92(s0)
20403a9e:	fa842783          	lw	a5,-88(s0)
20403aa2:	3787a783          	lw	a5,888(a5)
20403aa6:	fa442583          	lw	a1,-92(s0)
20403aaa:	457d                	li	a0,31
20403aac:	9782                	jalr	a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:297
}
20403aae:	0001                	nop
20403ab0:	40f6                	lw	ra,92(sp)
20403ab2:	42e6                	lw	t0,88(sp)
20403ab4:	4356                	lw	t1,84(sp)
20403ab6:	43c6                	lw	t2,80(sp)
20403ab8:	4436                	lw	s0,76(sp)
20403aba:	4526                	lw	a0,72(sp)
20403abc:	4596                	lw	a1,68(sp)
20403abe:	4606                	lw	a2,64(sp)
20403ac0:	56f2                	lw	a3,60(sp)
20403ac2:	5762                	lw	a4,56(sp)
20403ac4:	57d2                	lw	a5,52(sp)
20403ac6:	5842                	lw	a6,48(sp)
20403ac8:	58b2                	lw	a7,44(sp)
20403aca:	5e22                	lw	t3,40(sp)
20403acc:	5e92                	lw	t4,36(sp)
20403ace:	5f02                	lw	t5,32(sp)
20403ad0:	4ff2                	lw	t6,28(sp)
20403ad2:	6125                	addi	sp,sp,96
20403ad4:	30200073          	mret

20403ad8 <__metal_controller_interrupt_vector_mode>:
__metal_controller_interrupt_vector_mode():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:299

metal_vector_mode __metal_controller_interrupt_vector_mode(void) {
20403ad8:	1101                	addi	sp,sp,-32
20403ada:	ce22                	sw	s0,28(sp)
20403adc:	1000                	addi	s0,sp,32
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:302
    uintptr_t val;

    __asm__ volatile("csrr %0, mtvec" : "=r"(val));
20403ade:	305027f3          	csrr	a5,mtvec
20403ae2:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:303
    val &= METAL_MTVEC_MASK;
20403ae6:	fec42783          	lw	a5,-20(s0)
20403aea:	03f7f793          	andi	a5,a5,63
20403aee:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:305

    switch (val) {
20403af2:	fec42703          	lw	a4,-20(s0)
20403af6:	478d                	li	a5,3
20403af8:	02f70363          	beq	a4,a5,20403b1e <__metal_controller_interrupt_vector_mode+0x46>
20403afc:	fec42703          	lw	a4,-20(s0)
20403b00:	478d                	li	a5,3
20403b02:	02e7e263          	bltu	a5,a4,20403b26 <__metal_controller_interrupt_vector_mode+0x4e>
20403b06:	fec42703          	lw	a4,-20(s0)
20403b0a:	4785                	li	a5,1
20403b0c:	00f70b63          	beq	a4,a5,20403b22 <__metal_controller_interrupt_vector_mode+0x4a>
20403b10:	fec42703          	lw	a4,-20(s0)
20403b14:	4789                	li	a5,2
20403b16:	00f71863          	bne	a4,a5,20403b26 <__metal_controller_interrupt_vector_mode+0x4e>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:307
    case METAL_MTVEC_CLIC:
        return METAL_SELECTIVE_VECTOR_MODE;
20403b1a:	478d                	li	a5,3
20403b1c:	a031                	j	20403b28 <__metal_controller_interrupt_vector_mode+0x50>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:309
    case METAL_MTVEC_CLIC_VECTORED:
        return METAL_HARDWARE_VECTOR_MODE;
20403b1e:	4791                	li	a5,4
20403b20:	a021                	j	20403b28 <__metal_controller_interrupt_vector_mode+0x50>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:311
    case METAL_MTVEC_VECTORED:
        return METAL_VECTOR_MODE;
20403b22:	4785                	li	a5,1
20403b24:	a011                	j	20403b28 <__metal_controller_interrupt_vector_mode+0x50>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:313
    }
    return METAL_DIRECT_MODE;
20403b26:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:314
}
20403b28:	853e                	mv	a0,a5
20403b2a:	4472                	lw	s0,28(sp)
20403b2c:	6105                	addi	sp,sp,32
20403b2e:	8082                	ret

20403b30 <__metal_controller_interrupt_vector>:
__metal_controller_interrupt_vector():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:317

void __metal_controller_interrupt_vector(metal_vector_mode mode,
                                         void *vec_table) {
20403b30:	7179                	addi	sp,sp,-48
20403b32:	d622                	sw	s0,44(sp)
20403b34:	1800                	addi	s0,sp,48
20403b36:	fca42e23          	sw	a0,-36(s0)
20403b3a:	fcb42c23          	sw	a1,-40(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:320
    uintptr_t trap_entry, val;

    __asm__ volatile("csrr %0, mtvec" : "=r"(val));
20403b3e:	305027f3          	csrr	a5,mtvec
20403b42:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:321
    val &= ~(METAL_MTVEC_CLIC_VECTORED | METAL_MTVEC_CLIC_RESERVED);
20403b46:	fec42783          	lw	a5,-20(s0)
20403b4a:	fc07f793          	andi	a5,a5,-64
20403b4e:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:322
    trap_entry = (uintptr_t)vec_table;
20403b52:	fd842783          	lw	a5,-40(s0)
20403b56:	fef42423          	sw	a5,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:324

    switch (mode) {
20403b5a:	fdc42703          	lw	a4,-36(s0)
20403b5e:	4791                	li	a5,4
20403b60:	04f70563          	beq	a4,a5,20403baa <__metal_controller_interrupt_vector+0x7a>
20403b64:	fdc42703          	lw	a4,-36(s0)
20403b68:	4791                	li	a5,4
20403b6a:	06e7e863          	bltu	a5,a4,20403bda <__metal_controller_interrupt_vector+0xaa>
20403b6e:	fdc42703          	lw	a4,-36(s0)
20403b72:	478d                	li	a5,3
20403b74:	06e7e363          	bltu	a5,a4,20403bda <__metal_controller_interrupt_vector+0xaa>
20403b78:	fdc42703          	lw	a4,-36(s0)
20403b7c:	4789                	li	a5,2
20403b7e:	00f77b63          	bgeu	a4,a5,20403b94 <__metal_controller_interrupt_vector+0x64>
20403b82:	fdc42783          	lw	a5,-36(s0)
20403b86:	c7a1                	beqz	a5,20403bce <__metal_controller_interrupt_vector+0x9e>
20403b88:	fdc42703          	lw	a4,-36(s0)
20403b8c:	4785                	li	a5,1
20403b8e:	02f70963          	beq	a4,a5,20403bc0 <__metal_controller_interrupt_vector+0x90>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:344
    case METAL_DIRECT_MODE:
        __asm__ volatile(
            "csrw mtvec, %0" ::"r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
        break;
    }
}
20403b92:	a0a1                	j	20403bda <__metal_controller_interrupt_vector+0xaa>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:327
        __asm__ volatile("csrw 0x307, %0" ::"r"(trap_entry));
20403b94:	fe842783          	lw	a5,-24(s0)
20403b98:	30779073          	csrw	mtvt,a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:328
        __asm__ volatile("csrw mtvec, %0" ::"r"(val | METAL_MTVEC_CLIC));
20403b9c:	fec42783          	lw	a5,-20(s0)
20403ba0:	0027e793          	ori	a5,a5,2
20403ba4:	30579073          	csrw	mtvec,a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:329
        break;
20403ba8:	a80d                	j	20403bda <__metal_controller_interrupt_vector+0xaa>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:331
        __asm__ volatile("csrw 0x307, %0" ::"r"(trap_entry));
20403baa:	fe842783          	lw	a5,-24(s0)
20403bae:	30779073          	csrw	mtvt,a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:333
            "csrw mtvec, %0" ::"r"(val | METAL_MTVEC_CLIC_VECTORED));
20403bb2:	fec42783          	lw	a5,-20(s0)
20403bb6:	0037e793          	ori	a5,a5,3
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:332
        __asm__ volatile(
20403bba:	30579073          	csrw	mtvec,a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:334
        break;
20403bbe:	a831                	j	20403bda <__metal_controller_interrupt_vector+0xaa>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:337
            "csrw mtvec, %0" ::"r"(trap_entry | METAL_MTVEC_VECTORED));
20403bc0:	fe842783          	lw	a5,-24(s0)
20403bc4:	0017e793          	ori	a5,a5,1
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:336
        __asm__ volatile(
20403bc8:	30579073          	csrw	mtvec,a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:338
        break;
20403bcc:	a039                	j	20403bda <__metal_controller_interrupt_vector+0xaa>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:341
            "csrw mtvec, %0" ::"r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
20403bce:	fe842783          	lw	a5,-24(s0)
20403bd2:	9bf1                	andi	a5,a5,-4
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:340
        __asm__ volatile(
20403bd4:	30579073          	csrw	mtvec,a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:342
        break;
20403bd8:	0001                	nop
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:344
}
20403bda:	0001                	nop
20403bdc:	5432                	lw	s0,44(sp)
20403bde:	6145                	addi	sp,sp,48
20403be0:	8082                	ret

20403be2 <__metal_valid_interrupt_id>:
__metal_valid_interrupt_id():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:346

int __metal_valid_interrupt_id(int id) {
20403be2:	1101                	addi	sp,sp,-32
20403be4:	ce22                	sw	s0,28(sp)
20403be6:	1000                	addi	s0,sp,32
20403be8:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:347
    switch (id) {
20403bec:	fec42703          	lw	a4,-20(s0)
20403bf0:	47fd                	li	a5,31
20403bf2:	02e7c663          	blt	a5,a4,20403c1e <__metal_valid_interrupt_id+0x3c>
20403bf6:	fec42703          	lw	a4,-20(s0)
20403bfa:	478d                	li	a5,3
20403bfc:	02f74963          	blt	a4,a5,20403c2e <__metal_valid_interrupt_id+0x4c>
20403c00:	fec42783          	lw	a5,-20(s0)
20403c04:	4705                	li	a4,1
20403c06:	00f71733          	sll	a4,a4,a5
20403c0a:	77c5                	lui	a5,0xffff1
20403c0c:	88878793          	addi	a5,a5,-1912 # ffff0888 <metal_segment_heap_target_end+0x7ffeed88>
20403c10:	8ff9                	and	a5,a5,a4
20403c12:	00f037b3          	snez	a5,a5
20403c16:	0ff7f793          	zext.b	a5,a5
20403c1a:	eb81                	bnez	a5,20403c2a <__metal_valid_interrupt_id+0x48>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:370
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
    case METAL_INTERRUPT_ID_BEU:
        return 1;
    default:
        break;
20403c1c:	a809                	j	20403c2e <__metal_valid_interrupt_id+0x4c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:347
    switch (id) {
20403c1e:	fec42703          	lw	a4,-20(s0)
20403c22:	08000793          	li	a5,128
20403c26:	00f71463          	bne	a4,a5,20403c2e <__metal_valid_interrupt_id+0x4c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:368
        return 1;
20403c2a:	4785                	li	a5,1
20403c2c:	a019                	j	20403c32 <__metal_valid_interrupt_id+0x50>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:370
        break;
20403c2e:	0001                	nop
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:373
    }

    return 0;
20403c30:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:374
}
20403c32:	853e                	mv	a0,a5
20403c34:	4472                	lw	s0,28(sp)
20403c36:	6105                	addi	sp,sp,32
20403c38:	8082                	ret

20403c3a <__metal_local_interrupt_enable>:
__metal_local_interrupt_enable():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:377

int __metal_local_interrupt_enable(struct metal_interrupt *controller,
                                   metal_interrupt_id_e id, int enable) {
20403c3a:	7179                	addi	sp,sp,-48
20403c3c:	d606                	sw	ra,44(sp)
20403c3e:	d422                	sw	s0,40(sp)
20403c40:	1800                	addi	s0,sp,48
20403c42:	fca42e23          	sw	a0,-36(s0)
20403c46:	fcb42c23          	sw	a1,-40(s0)
20403c4a:	fcc42a23          	sw	a2,-44(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:378
    int rc = 0;
20403c4e:	fe042623          	sw	zero,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:380

    if (!controller) {
20403c52:	fdc42783          	lw	a5,-36(s0)
20403c56:	e399                	bnez	a5,20403c5c <__metal_local_interrupt_enable+0x22>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:381
        return -1;
20403c58:	57fd                	li	a5,-1
20403c5a:	a849                	j	20403cec <__metal_local_interrupt_enable+0xb2>
20403c5c:	fd842703          	lw	a4,-40(s0)
20403c60:	47fd                	li	a5,31
20403c62:	08e7e063          	bltu	a5,a4,20403ce2 <__metal_local_interrupt_enable+0xa8>
20403c66:	fd842783          	lw	a5,-40(s0)
20403c6a:	00279713          	slli	a4,a5,0x2
20403c6e:	204007b7          	lui	a5,0x20400
20403c72:	45478793          	addi	a5,a5,1108 # 20400454 <__metal_driver_vtable_riscv_clint0+0x64>
20403c76:	97ba                	add	a5,a5,a4
20403c78:	439c                	lw	a5,0(a5)
20403c7a:	8782                	jr	a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:386
    }

    switch (id) {
    case METAL_INTERRUPT_ID_BASE:
        if (enable) {
20403c7c:	fd442783          	lw	a5,-44(s0)
20403c80:	c781                	beqz	a5,20403c88 <__metal_local_interrupt_enable+0x4e>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:387
            __metal_interrupt_global_enable();
20403c82:	f53fe0ef          	jal	ra,20402bd4 <__metal_interrupt_global_enable>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:391
        } else {
            __metal_interrupt_global_disable();
        }
        break;
20403c86:	a08d                	j	20403ce8 <__metal_local_interrupt_enable+0xae>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:389
            __metal_interrupt_global_disable();
20403c88:	f65fe0ef          	jal	ra,20402bec <__metal_interrupt_global_disable>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:391
        break;
20403c8c:	a8b1                	j	20403ce8 <__metal_local_interrupt_enable+0xae>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:393
    case METAL_INTERRUPT_ID_SW:
        if (enable) {
20403c8e:	fd442783          	lw	a5,-44(s0)
20403c92:	c781                	beqz	a5,20403c9a <__metal_local_interrupt_enable+0x60>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:394
            __metal_interrupt_software_enable();
20403c94:	f71fe0ef          	jal	ra,20402c04 <__metal_interrupt_software_enable>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:398
        } else {
            __metal_interrupt_software_disable();
        }
        break;
20403c98:	a881                	j	20403ce8 <__metal_local_interrupt_enable+0xae>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:396
            __metal_interrupt_software_disable();
20403c9a:	f83fe0ef          	jal	ra,20402c1c <__metal_interrupt_software_disable>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:398
        break;
20403c9e:	a0a9                	j	20403ce8 <__metal_local_interrupt_enable+0xae>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:400
    case METAL_INTERRUPT_ID_TMR:
        if (enable) {
20403ca0:	fd442783          	lw	a5,-44(s0)
20403ca4:	c781                	beqz	a5,20403cac <__metal_local_interrupt_enable+0x72>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:401
            __metal_interrupt_timer_enable();
20403ca6:	f8ffe0ef          	jal	ra,20402c34 <__metal_interrupt_timer_enable>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:405
        } else {
            __metal_interrupt_timer_disable();
        }
        break;
20403caa:	a83d                	j	20403ce8 <__metal_local_interrupt_enable+0xae>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:403
            __metal_interrupt_timer_disable();
20403cac:	fa3fe0ef          	jal	ra,20402c4e <__metal_interrupt_timer_disable>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:405
        break;
20403cb0:	a825                	j	20403ce8 <__metal_local_interrupt_enable+0xae>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:407
    case METAL_INTERRUPT_ID_EXT:
        if (enable) {
20403cb2:	fd442783          	lw	a5,-44(s0)
20403cb6:	c781                	beqz	a5,20403cbe <__metal_local_interrupt_enable+0x84>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:408
            __metal_interrupt_external_enable();
20403cb8:	fb1fe0ef          	jal	ra,20402c68 <__metal_interrupt_external_enable>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:412
        } else {
            __metal_interrupt_external_disable();
        }
        break;
20403cbc:	a035                	j	20403ce8 <__metal_local_interrupt_enable+0xae>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:410
            __metal_interrupt_external_disable();
20403cbe:	fc7fe0ef          	jal	ra,20402c84 <__metal_interrupt_external_disable>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:412
        break;
20403cc2:	a01d                	j	20403ce8 <__metal_local_interrupt_enable+0xae>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:429
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        if (enable) {
20403cc4:	fd442783          	lw	a5,-44(s0)
20403cc8:	c799                	beqz	a5,20403cd6 <__metal_local_interrupt_enable+0x9c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:430
            __metal_interrupt_local_enable(id);
20403cca:	fd842783          	lw	a5,-40(s0)
20403cce:	853e                	mv	a0,a5
20403cd0:	fd1fe0ef          	jal	ra,20402ca0 <__metal_interrupt_local_enable>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:434
        } else {
            __metal_interrupt_local_disable(id);
        }
        break;
20403cd4:	a811                	j	20403ce8 <__metal_local_interrupt_enable+0xae>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:432
            __metal_interrupt_local_disable(id);
20403cd6:	fd842783          	lw	a5,-40(s0)
20403cda:	853e                	mv	a0,a5
20403cdc:	ff1fe0ef          	jal	ra,20402ccc <__metal_interrupt_local_disable>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:434
        break;
20403ce0:	a021                	j	20403ce8 <__metal_local_interrupt_enable+0xae>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:436
    default:
        rc = -1;
20403ce2:	57fd                	li	a5,-1
20403ce4:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:438
    }
    return rc;
20403ce8:	fec42783          	lw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:439
}
20403cec:	853e                	mv	a0,a5
20403cee:	50b2                	lw	ra,44(sp)
20403cf0:	5422                	lw	s0,40(sp)
20403cf2:	6145                	addi	sp,sp,48
20403cf4:	8082                	ret

20403cf6 <__metal_exception_register>:
__metal_exception_register():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:442

int __metal_exception_register(struct metal_interrupt *controller, int ecode,
                               metal_exception_handler_t isr) {
20403cf6:	7179                	addi	sp,sp,-48
20403cf8:	d622                	sw	s0,44(sp)
20403cfa:	1800                	addi	s0,sp,48
20403cfc:	fca42e23          	sw	a0,-36(s0)
20403d00:	fcb42c23          	sw	a1,-40(s0)
20403d04:	fcc42a23          	sw	a2,-44(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:443
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403d08:	fdc42783          	lw	a5,-36(s0)
20403d0c:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:445

    if ((ecode < METAL_MAX_EXCEPTION_CODE) && isr) {
20403d10:	fd842703          	lw	a4,-40(s0)
20403d14:	47ad                	li	a5,11
20403d16:	02e7c263          	blt	a5,a4,20403d3a <__metal_exception_register+0x44>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:445 (discriminator 1)
20403d1a:	fd442783          	lw	a5,-44(s0)
20403d1e:	cf91                	beqz	a5,20403d3a <__metal_exception_register+0x44>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:446
        intc->metal_exception_table[ecode] = isr;
20403d20:	fec42703          	lw	a4,-20(s0)
20403d24:	fd842783          	lw	a5,-40(s0)
20403d28:	0e878793          	addi	a5,a5,232
20403d2c:	078a                	slli	a5,a5,0x2
20403d2e:	97ba                	add	a5,a5,a4
20403d30:	fd442703          	lw	a4,-44(s0)
20403d34:	c398                	sw	a4,0(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:447
        return 0;
20403d36:	4781                	li	a5,0
20403d38:	a011                	j	20403d3c <__metal_exception_register+0x46>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:449
    }
    return -1;
20403d3a:	57fd                	li	a5,-1
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:450
}
20403d3c:	853e                	mv	a0,a5
20403d3e:	5432                	lw	s0,44(sp)
20403d40:	6145                	addi	sp,sp,48
20403d42:	8082                	ret

20403d44 <__metal_driver_riscv_cpu_controller_interrupt_init>:
__metal_driver_riscv_cpu_controller_interrupt_init():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:454

extern void early_trap_vector(void);
void __metal_driver_riscv_cpu_controller_interrupt_init(
    struct metal_interrupt *controller) {
20403d44:	7179                	addi	sp,sp,-48
20403d46:	d606                	sw	ra,44(sp)
20403d48:	d422                	sw	s0,40(sp)
20403d4a:	1800                	addi	s0,sp,48
20403d4c:	fca42e23          	sw	a0,-36(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:455
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403d50:	fdc42783          	lw	a5,-36(s0)
20403d54:	fef42223          	sw	a5,-28(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:457

    if (!intc->init_done) {
20403d58:	fe442783          	lw	a5,-28(s0)
20403d5c:	43dc                	lw	a5,4(a5)
20403d5e:	efdd                	bnez	a5,20403e1c <__metal_driver_riscv_cpu_controller_interrupt_init+0xd8>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:459
        /* Default to use direct interrupt, setup sw cb table*/
        for (int i = 0; i < METAL_MAX_MI; i++) {
20403d60:	fe042623          	sw	zero,-20(s0)
20403d64:	a0b9                	j	20403db2 <__metal_driver_riscv_cpu_controller_interrupt_init+0x6e>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:460 (discriminator 3)
            intc->metal_int_table[i].handler = NULL;
20403d66:	fe442683          	lw	a3,-28(s0)
20403d6a:	fec42703          	lw	a4,-20(s0)
20403d6e:	87ba                	mv	a5,a4
20403d70:	0786                	slli	a5,a5,0x1
20403d72:	97ba                	add	a5,a5,a4
20403d74:	078e                	slli	a5,a5,0x3
20403d76:	97b6                	add	a5,a5,a3
20403d78:	0807a823          	sw	zero,144(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:461 (discriminator 3)
            intc->metal_int_table[i].sub_int = NULL;
20403d7c:	fe442683          	lw	a3,-28(s0)
20403d80:	fec42703          	lw	a4,-20(s0)
20403d84:	87ba                	mv	a5,a4
20403d86:	0786                	slli	a5,a5,0x1
20403d88:	97ba                	add	a5,a5,a4
20403d8a:	078e                	slli	a5,a5,0x3
20403d8c:	97b6                	add	a5,a5,a3
20403d8e:	0807aa23          	sw	zero,148(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:462 (discriminator 3)
            intc->metal_int_table[i].exint_data = NULL;
20403d92:	fe442683          	lw	a3,-28(s0)
20403d96:	fec42703          	lw	a4,-20(s0)
20403d9a:	87ba                	mv	a5,a4
20403d9c:	0786                	slli	a5,a5,0x1
20403d9e:	97ba                	add	a5,a5,a4
20403da0:	078e                	slli	a5,a5,0x3
20403da2:	97b6                	add	a5,a5,a3
20403da4:	0807ac23          	sw	zero,152(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:459 (discriminator 3)
        for (int i = 0; i < METAL_MAX_MI; i++) {
20403da8:	fec42783          	lw	a5,-20(s0)
20403dac:	0785                	addi	a5,a5,1
20403dae:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:459 (discriminator 1)
20403db2:	fec42703          	lw	a4,-20(s0)
20403db6:	47fd                	li	a5,31
20403db8:	fae7d7e3          	bge	a5,a4,20403d66 <__metal_driver_riscv_cpu_controller_interrupt_init+0x22>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:465
        }

        for (int i = 0; i < METAL_MAX_ME; i++) {
20403dbc:	fe042423          	sw	zero,-24(s0)
20403dc0:	a01d                	j	20403de6 <__metal_driver_riscv_cpu_controller_interrupt_init+0xa2>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:466 (discriminator 3)
            intc->metal_exception_table[i] = __metal_default_exception_handler;
20403dc2:	fe442703          	lw	a4,-28(s0)
20403dc6:	fe842783          	lw	a5,-24(s0)
20403dca:	0e878793          	addi	a5,a5,232
20403dce:	078a                	slli	a5,a5,0x2
20403dd0:	97ba                	add	a5,a5,a4
20403dd2:	20403737          	lui	a4,0x20403
20403dd6:	cf870713          	addi	a4,a4,-776 # 20402cf8 <__metal_default_exception_handler>
20403dda:	c398                	sw	a4,0(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:465 (discriminator 3)
        for (int i = 0; i < METAL_MAX_ME; i++) {
20403ddc:	fe842783          	lw	a5,-24(s0)
20403de0:	0785                	addi	a5,a5,1
20403de2:	fef42423          	sw	a5,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:465 (discriminator 1)
20403de6:	fe842703          	lw	a4,-24(s0)
20403dea:	47ad                	li	a5,11
20403dec:	fce7dbe3          	bge	a5,a4,20403dc2 <__metal_driver_riscv_cpu_controller_interrupt_init+0x7e>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:475
         * Set the real trap handler if the value of mtvec is equal to
         * early_trap_vector. If mtvec is not equal to early_trap_vector,
         * that means user has own trap handler, then we don't overwrite it.
         */
        uintptr_t mtvec;
        __asm__ volatile("csrr %0, mtvec" : "=r"(mtvec));
20403df0:	305027f3          	csrr	a5,mtvec
20403df4:	fef42023          	sw	a5,-32(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:476
        if (mtvec == (uintptr_t)&early_trap_vector) {
20403df8:	204007b7          	lui	a5,0x20400
20403dfc:	13478793          	addi	a5,a5,308 # 20400134 <early_trap_vector>
20403e00:	fe042703          	lw	a4,-32(s0)
20403e04:	00f71863          	bne	a4,a5,20403e14 <__metal_driver_riscv_cpu_controller_interrupt_init+0xd0>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:477
            __metal_controller_interrupt_vector(
20403e08:	204037b7          	lui	a5,0x20403
20403e0c:	f8078593          	addi	a1,a5,-128 # 20402f80 <__metal_exception_handler>
20403e10:	4501                	li	a0,0
20403e12:	3b39                	jal	20403b30 <__metal_controller_interrupt_vector>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:481
                METAL_DIRECT_MODE,
                (void *)(uintptr_t)&__metal_exception_handler);
        }
        intc->init_done = 1;
20403e14:	fe442783          	lw	a5,-28(s0)
20403e18:	4705                	li	a4,1
20403e1a:	c3d8                	sw	a4,4(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:483
    }
}
20403e1c:	0001                	nop
20403e1e:	50b2                	lw	ra,44(sp)
20403e20:	5422                	lw	s0,40(sp)
20403e22:	6145                	addi	sp,sp,48
20403e24:	8082                	ret

20403e26 <__metal_driver_riscv_cpu_controller_interrupt_register>:
__metal_driver_riscv_cpu_controller_interrupt_register():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:487

int __metal_driver_riscv_cpu_controller_interrupt_register(
    struct metal_interrupt *controller, int id, metal_interrupt_handler_t isr,
    void *priv) {
20403e26:	7179                	addi	sp,sp,-48
20403e28:	d606                	sw	ra,44(sp)
20403e2a:	d422                	sw	s0,40(sp)
20403e2c:	1800                	addi	s0,sp,48
20403e2e:	fca42e23          	sw	a0,-36(s0)
20403e32:	fcb42c23          	sw	a1,-40(s0)
20403e36:	fcc42a23          	sw	a2,-44(s0)
20403e3a:	fcd42823          	sw	a3,-48(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:488
    int rc = 0;
20403e3e:	fe042623          	sw	zero,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:489
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403e42:	fdc42783          	lw	a5,-36(s0)
20403e46:	fef42423          	sw	a5,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:491

    if (!__metal_valid_interrupt_id(id)) {
20403e4a:	fd842503          	lw	a0,-40(s0)
20403e4e:	3b51                	jal	20403be2 <__metal_valid_interrupt_id>
20403e50:	87aa                	mv	a5,a0
20403e52:	e399                	bnez	a5,20403e58 <__metal_driver_riscv_cpu_controller_interrupt_register+0x32>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:492
        return -11;
20403e54:	57d5                	li	a5,-11
20403e56:	a25d                	j	20403ffc <__metal_driver_riscv_cpu_controller_interrupt_register+0x1d6>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:494
    }
    if ((id == METAL_INTERRUPT_ID_BEU) &&
20403e58:	fd842703          	lw	a4,-40(s0)
20403e5c:	08000793          	li	a5,128
20403e60:	00f71763          	bne	a4,a5,20403e6e <__metal_driver_riscv_cpu_controller_interrupt_register+0x48>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:495 (discriminator 1)
        (__metal_controller_interrupt_vector_mode() != METAL_DIRECT_MODE)) {
20403e64:	3995                	jal	20403ad8 <__metal_controller_interrupt_vector_mode>
20403e66:	87aa                	mv	a5,a0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:494 (discriminator 1)
    if ((id == METAL_INTERRUPT_ID_BEU) &&
20403e68:	c399                	beqz	a5,20403e6e <__metal_driver_riscv_cpu_controller_interrupt_register+0x48>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:498
        /* Only allow registration of the bus error unit interrupt if
         * interrupt vectoring if off */
        return -13;
20403e6a:	57cd                	li	a5,-13
20403e6c:	aa41                	j	20403ffc <__metal_driver_riscv_cpu_controller_interrupt_register+0x1d6>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:501
    }

    if (isr) {
20403e6e:	fd442783          	lw	a5,-44(s0)
20403e72:	cfb9                	beqz	a5,20403ed0 <__metal_driver_riscv_cpu_controller_interrupt_register+0xaa>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:502
        if (id == METAL_INTERRUPT_ID_BEU) {
20403e74:	fd842703          	lw	a4,-40(s0)
20403e78:	08000793          	li	a5,128
20403e7c:	00f71f63          	bne	a4,a5,20403e9a <__metal_driver_riscv_cpu_controller_interrupt_register+0x74>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:503
            intc->metal_int_beu.handler = isr;
20403e80:	fe842783          	lw	a5,-24(s0)
20403e84:	fd442703          	lw	a4,-44(s0)
20403e88:	38e7a823          	sw	a4,912(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:504
            intc->metal_int_beu.exint_data = priv;
20403e8c:	fe842783          	lw	a5,-24(s0)
20403e90:	fd042703          	lw	a4,-48(s0)
20403e94:	38e7ac23          	sw	a4,920(a5)
20403e98:	a285                	j	20403ff8 <__metal_driver_riscv_cpu_controller_interrupt_register+0x1d2>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:506
        } else {
            intc->metal_int_table[id].handler = isr;
20403e9a:	fe842683          	lw	a3,-24(s0)
20403e9e:	fd842703          	lw	a4,-40(s0)
20403ea2:	87ba                	mv	a5,a4
20403ea4:	0786                	slli	a5,a5,0x1
20403ea6:	97ba                	add	a5,a5,a4
20403ea8:	078e                	slli	a5,a5,0x3
20403eaa:	97b6                	add	a5,a5,a3
20403eac:	fd442703          	lw	a4,-44(s0)
20403eb0:	08e7a823          	sw	a4,144(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:507
            intc->metal_int_table[id].exint_data = priv;
20403eb4:	fe842683          	lw	a3,-24(s0)
20403eb8:	fd842703          	lw	a4,-40(s0)
20403ebc:	87ba                	mv	a5,a4
20403ebe:	0786                	slli	a5,a5,0x1
20403ec0:	97ba                	add	a5,a5,a4
20403ec2:	078e                	slli	a5,a5,0x3
20403ec4:	97b6                	add	a5,a5,a3
20403ec6:	fd042703          	lw	a4,-48(s0)
20403eca:	08e7ac23          	sw	a4,152(a5)
20403ece:	a22d                	j	20403ff8 <__metal_driver_riscv_cpu_controller_interrupt_register+0x1d2>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:510
        }
    } else {
        switch (id) {
20403ed0:	fd842703          	lw	a4,-40(s0)
20403ed4:	08000793          	li	a5,128
20403ed8:	0cf70163          	beq	a4,a5,20403f9a <__metal_driver_riscv_cpu_controller_interrupt_register+0x174>
20403edc:	fd842703          	lw	a4,-40(s0)
20403ee0:	08000793          	li	a5,128
20403ee4:	10e7c763          	blt	a5,a4,20403ff2 <__metal_driver_riscv_cpu_controller_interrupt_register+0x1cc>
20403ee8:	fd842703          	lw	a4,-40(s0)
20403eec:	47fd                	li	a5,31
20403eee:	10e7c263          	blt	a5,a4,20403ff2 <__metal_driver_riscv_cpu_controller_interrupt_register+0x1cc>
20403ef2:	fd842703          	lw	a4,-40(s0)
20403ef6:	47c1                	li	a5,16
20403ef8:	0cf75063          	bge	a4,a5,20403fb8 <__metal_driver_riscv_cpu_controller_interrupt_register+0x192>
20403efc:	fd842703          	lw	a4,-40(s0)
20403f00:	47ad                	li	a5,11
20403f02:	0af70b63          	beq	a4,a5,20403fb8 <__metal_driver_riscv_cpu_controller_interrupt_register+0x192>
20403f06:	fd842703          	lw	a4,-40(s0)
20403f0a:	47ad                	li	a5,11
20403f0c:	0ee7c363          	blt	a5,a4,20403ff2 <__metal_driver_riscv_cpu_controller_interrupt_register+0x1cc>
20403f10:	fd842703          	lw	a4,-40(s0)
20403f14:	478d                	li	a5,3
20403f16:	00f70863          	beq	a4,a5,20403f26 <__metal_driver_riscv_cpu_controller_interrupt_register+0x100>
20403f1a:	fd842703          	lw	a4,-40(s0)
20403f1e:	479d                	li	a5,7
20403f20:	04f70063          	beq	a4,a5,20403f60 <__metal_driver_riscv_cpu_controller_interrupt_register+0x13a>
20403f24:	a0f9                	j	20403ff2 <__metal_driver_riscv_cpu_controller_interrupt_register+0x1cc>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:512
        case METAL_INTERRUPT_ID_SW:
            intc->metal_int_table[id].handler = __metal_default_sw_handler;
20403f26:	fe842683          	lw	a3,-24(s0)
20403f2a:	fd842703          	lw	a4,-40(s0)
20403f2e:	87ba                	mv	a5,a4
20403f30:	0786                	slli	a5,a5,0x1
20403f32:	97ba                	add	a5,a5,a4
20403f34:	078e                	slli	a5,a5,0x3
20403f36:	97b6                	add	a5,a5,a3
20403f38:	20403737          	lui	a4,0x20403
20403f3c:	de870713          	addi	a4,a4,-536 # 20402de8 <__metal_default_sw_handler>
20403f40:	08e7a823          	sw	a4,144(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:513
            intc->metal_int_table[id].sub_int = priv;
20403f44:	fe842683          	lw	a3,-24(s0)
20403f48:	fd842703          	lw	a4,-40(s0)
20403f4c:	87ba                	mv	a5,a4
20403f4e:	0786                	slli	a5,a5,0x1
20403f50:	97ba                	add	a5,a5,a4
20403f52:	078e                	slli	a5,a5,0x3
20403f54:	97b6                	add	a5,a5,a3
20403f56:	fd042703          	lw	a4,-48(s0)
20403f5a:	08e7aa23          	sw	a4,148(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:514
            break;
20403f5e:	a869                	j	20403ff8 <__metal_driver_riscv_cpu_controller_interrupt_register+0x1d2>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:516
        case METAL_INTERRUPT_ID_TMR:
            intc->metal_int_table[id].handler = __metal_default_timer_handler;
20403f60:	fe842683          	lw	a3,-24(s0)
20403f64:	fd842703          	lw	a4,-40(s0)
20403f68:	87ba                	mv	a5,a4
20403f6a:	0786                	slli	a5,a5,0x1
20403f6c:	97ba                	add	a5,a5,a4
20403f6e:	078e                	slli	a5,a5,0x3
20403f70:	97b6                	add	a5,a5,a3
20403f72:	20403737          	lui	a4,0x20403
20403f76:	ef870713          	addi	a4,a4,-264 # 20402ef8 <__metal_default_timer_handler>
20403f7a:	08e7a823          	sw	a4,144(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:517
            intc->metal_int_table[id].sub_int = priv;
20403f7e:	fe842683          	lw	a3,-24(s0)
20403f82:	fd842703          	lw	a4,-40(s0)
20403f86:	87ba                	mv	a5,a4
20403f88:	0786                	slli	a5,a5,0x1
20403f8a:	97ba                	add	a5,a5,a4
20403f8c:	078e                	slli	a5,a5,0x3
20403f8e:	97b6                	add	a5,a5,a3
20403f90:	fd042703          	lw	a4,-48(s0)
20403f94:	08e7aa23          	sw	a4,148(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:518
            break;
20403f98:	a085                	j	20403ff8 <__metal_driver_riscv_cpu_controller_interrupt_register+0x1d2>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:520
        case METAL_INTERRUPT_ID_BEU:
            intc->metal_int_beu.handler = __metal_default_beu_handler;
20403f9a:	fe842783          	lw	a5,-24(s0)
20403f9e:	20403737          	lui	a4,0x20403
20403fa2:	ee270713          	addi	a4,a4,-286 # 20402ee2 <__metal_default_beu_handler>
20403fa6:	38e7a823          	sw	a4,912(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:521
            intc->metal_int_beu.exint_data = priv;
20403faa:	fe842783          	lw	a5,-24(s0)
20403fae:	fd042703          	lw	a4,-48(s0)
20403fb2:	38e7ac23          	sw	a4,920(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:522
            break;
20403fb6:	a089                	j	20403ff8 <__metal_driver_riscv_cpu_controller_interrupt_register+0x1d2>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:540
        case METAL_INTERRUPT_ID_LC11:
        case METAL_INTERRUPT_ID_LC12:
        case METAL_INTERRUPT_ID_LC13:
        case METAL_INTERRUPT_ID_LC14:
        case METAL_INTERRUPT_ID_LC15:
            intc->metal_int_table[id].handler =
20403fb8:	fe842683          	lw	a3,-24(s0)
20403fbc:	fd842703          	lw	a4,-40(s0)
20403fc0:	87ba                	mv	a5,a4
20403fc2:	0786                	slli	a5,a5,0x1
20403fc4:	97ba                	add	a5,a5,a4
20403fc6:	078e                	slli	a5,a5,0x3
20403fc8:	97b6                	add	a5,a5,a3
20403fca:	20403737          	lui	a4,0x20403
20403fce:	d1070713          	addi	a4,a4,-752 # 20402d10 <__metal_default_interrupt_handler>
20403fd2:	08e7a823          	sw	a4,144(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:542
                __metal_default_interrupt_handler;
            intc->metal_int_table[id].sub_int = priv;
20403fd6:	fe842683          	lw	a3,-24(s0)
20403fda:	fd842703          	lw	a4,-40(s0)
20403fde:	87ba                	mv	a5,a4
20403fe0:	0786                	slli	a5,a5,0x1
20403fe2:	97ba                	add	a5,a5,a4
20403fe4:	078e                	slli	a5,a5,0x3
20403fe6:	97b6                	add	a5,a5,a3
20403fe8:	fd042703          	lw	a4,-48(s0)
20403fec:	08e7aa23          	sw	a4,148(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:543
            break;
20403ff0:	a021                	j	20403ff8 <__metal_driver_riscv_cpu_controller_interrupt_register+0x1d2>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:545
        default:
            rc = -12;
20403ff2:	57d1                	li	a5,-12
20403ff4:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:548
        }
    }
    return rc;
20403ff8:	fec42783          	lw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:549
}
20403ffc:	853e                	mv	a0,a5
20403ffe:	50b2                	lw	ra,44(sp)
20404000:	5422                	lw	s0,40(sp)
20404002:	6145                	addi	sp,sp,48
20404004:	8082                	ret

20404006 <__metal_driver_riscv_cpu_controller_interrupt_enable>:
__metal_driver_riscv_cpu_controller_interrupt_enable():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:552

int __metal_driver_riscv_cpu_controller_interrupt_enable(
    struct metal_interrupt *controller, int id) {
20404006:	1101                	addi	sp,sp,-32
20404008:	ce06                	sw	ra,28(sp)
2040400a:	cc22                	sw	s0,24(sp)
2040400c:	1000                	addi	s0,sp,32
2040400e:	fea42623          	sw	a0,-20(s0)
20404012:	feb42423          	sw	a1,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:553
    return __metal_local_interrupt_enable(controller, id, METAL_ENABLE);
20404016:	fe842783          	lw	a5,-24(s0)
2040401a:	4605                	li	a2,1
2040401c:	85be                	mv	a1,a5
2040401e:	fec42503          	lw	a0,-20(s0)
20404022:	3921                	jal	20403c3a <__metal_local_interrupt_enable>
20404024:	87aa                	mv	a5,a0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:554
}
20404026:	853e                	mv	a0,a5
20404028:	40f2                	lw	ra,28(sp)
2040402a:	4462                	lw	s0,24(sp)
2040402c:	6105                	addi	sp,sp,32
2040402e:	8082                	ret

20404030 <__metal_driver_riscv_cpu_controller_interrupt_disable>:
__metal_driver_riscv_cpu_controller_interrupt_disable():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:557

int __metal_driver_riscv_cpu_controller_interrupt_disable(
    struct metal_interrupt *controller, int id) {
20404030:	1101                	addi	sp,sp,-32
20404032:	ce06                	sw	ra,28(sp)
20404034:	cc22                	sw	s0,24(sp)
20404036:	1000                	addi	s0,sp,32
20404038:	fea42623          	sw	a0,-20(s0)
2040403c:	feb42423          	sw	a1,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:558
    return __metal_local_interrupt_enable(controller, id, METAL_DISABLE);
20404040:	fe842783          	lw	a5,-24(s0)
20404044:	4601                	li	a2,0
20404046:	85be                	mv	a1,a5
20404048:	fec42503          	lw	a0,-20(s0)
2040404c:	36fd                	jal	20403c3a <__metal_local_interrupt_enable>
2040404e:	87aa                	mv	a5,a0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:559
}
20404050:	853e                	mv	a0,a5
20404052:	40f2                	lw	ra,28(sp)
20404054:	4462                	lw	s0,24(sp)
20404056:	6105                	addi	sp,sp,32
20404058:	8082                	ret

2040405a <__metal_driver_riscv_cpu_controller_get_vector_mode>:
__metal_driver_riscv_cpu_controller_get_vector_mode():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:591
    }
    return -1;
}

metal_vector_mode __metal_driver_riscv_cpu_controller_get_vector_mode(
    struct metal_interrupt *controller) {
2040405a:	1101                	addi	sp,sp,-32
2040405c:	ce06                	sw	ra,28(sp)
2040405e:	cc22                	sw	s0,24(sp)
20404060:	1000                	addi	s0,sp,32
20404062:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:592
    return __metal_controller_interrupt_vector_mode();
20404066:	a73ff0ef          	jal	ra,20403ad8 <__metal_controller_interrupt_vector_mode>
2040406a:	87aa                	mv	a5,a0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:593
}
2040406c:	853e                	mv	a0,a5
2040406e:	40f2                	lw	ra,28(sp)
20404070:	4462                	lw	s0,24(sp)
20404072:	6105                	addi	sp,sp,32
20404074:	8082                	ret

20404076 <__metal_driver_riscv_cpu_controller_set_vector_mode>:
__metal_driver_riscv_cpu_controller_set_vector_mode():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:596

int __metal_driver_riscv_cpu_controller_set_vector_mode(
    struct metal_interrupt *controller, metal_vector_mode mode) {
20404076:	1101                	addi	sp,sp,-32
20404078:	ce06                	sw	ra,28(sp)
2040407a:	cc22                	sw	s0,24(sp)
2040407c:	1000                	addi	s0,sp,32
2040407e:	fea42623          	sw	a0,-20(s0)
20404082:	feb42423          	sw	a1,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:598

    if (mode == METAL_DIRECT_MODE) {
20404086:	fe842783          	lw	a5,-24(s0)
2040408a:	eb99                	bnez	a5,204040a0 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x2a>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:599
        __metal_controller_interrupt_vector(
2040408c:	204037b7          	lui	a5,0x20403
20404090:	f8078593          	addi	a1,a5,-128 # 20402f80 <__metal_exception_handler>
20404094:	fe842503          	lw	a0,-24(s0)
20404098:	a99ff0ef          	jal	ra,20403b30 <__metal_controller_interrupt_vector>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:601
            mode, (void *)(uintptr_t)&__metal_exception_handler);
        return 0;
2040409c:	4781                	li	a5,0
2040409e:	a00d                	j	204040c0 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x4a>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:603
    }
    if (mode == METAL_VECTOR_MODE) {
204040a0:	fe842703          	lw	a4,-24(s0)
204040a4:	4785                	li	a5,1
204040a6:	00f71c63          	bne	a4,a5,204040be <__metal_driver_riscv_cpu_controller_set_vector_mode+0x48>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:604
        __metal_controller_interrupt_vector(
204040aa:	204077b7          	lui	a5,0x20407
204040ae:	90078593          	addi	a1,a5,-1792 # 20406900 <__metal_vector_table>
204040b2:	fe842503          	lw	a0,-24(s0)
204040b6:	a7bff0ef          	jal	ra,20403b30 <__metal_controller_interrupt_vector>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:606
            mode, (void *)(uintptr_t)__metal_vector_table);
        return 0;
204040ba:	4781                	li	a5,0
204040bc:	a011                	j	204040c0 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x4a>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:608
    }
    return -1;
204040be:	57fd                	li	a5,-1
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:609
}
204040c0:	853e                	mv	a0,a5
204040c2:	40f2                	lw	ra,28(sp)
204040c4:	4462                	lw	s0,24(sp)
204040c6:	6105                	addi	sp,sp,32
204040c8:	8082                	ret

204040ca <__metal_driver_riscv_cpu_controller_command_request>:
__metal_driver_riscv_cpu_controller_command_request():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:612

int __metal_driver_riscv_cpu_controller_command_request(
    struct metal_interrupt *controller, int cmd, void *data) {
204040ca:	1101                	addi	sp,sp,-32
204040cc:	ce22                	sw	s0,28(sp)
204040ce:	1000                	addi	s0,sp,32
204040d0:	fea42623          	sw	a0,-20(s0)
204040d4:	feb42423          	sw	a1,-24(s0)
204040d8:	fec42223          	sw	a2,-28(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:615
    /* NOP for now, unless local interrupt lines the like of clic, clint, plic
     */
    return 0;
204040dc:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:616
}
204040de:	853e                	mv	a0,a5
204040e0:	4472                	lw	s0,28(sp)
204040e2:	6105                	addi	sp,sp,32
204040e4:	8082                	ret

204040e6 <__metal_driver_cpu_mcycle_get>:
__metal_driver_cpu_mcycle_get():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:620

/* CPU driver !!! */

unsigned long long __metal_driver_cpu_mcycle_get(struct metal_cpu *cpu) {
204040e6:	7139                	addi	sp,sp,-64
204040e8:	de22                	sw	s0,60(sp)
204040ea:	0080                	addi	s0,sp,64
204040ec:	fca42623          	sw	a0,-52(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:621
    unsigned long long val = 0;
204040f0:	4501                	li	a0,0
204040f2:	4581                	li	a1,0
204040f4:	fea42423          	sw	a0,-24(s0)
204040f8:	feb42623          	sw	a1,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:627 (discriminator 1)

#if __riscv_xlen == 32
    unsigned long hi, hi1, lo;

    do {
        __asm__ volatile("csrr %0, mcycleh" : "=r"(hi));
204040fc:	b80025f3          	csrr	a1,mcycleh
20404100:	feb42223          	sw	a1,-28(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:628 (discriminator 1)
        __asm__ volatile("csrr %0, mcycle" : "=r"(lo));
20404104:	b00025f3          	csrr	a1,mcycle
20404108:	feb42023          	sw	a1,-32(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:629 (discriminator 1)
        __asm__ volatile("csrr %0, mcycleh" : "=r"(hi1));
2040410c:	b80025f3          	csrr	a1,mcycleh
20404110:	fcb42e23          	sw	a1,-36(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:632 (discriminator 1)
        /* hi != hi1 means mcycle overflow during we get value,
         * so we must retry. */
    } while (hi != hi1);
20404114:	fe442503          	lw	a0,-28(s0)
20404118:	fdc42583          	lw	a1,-36(s0)
2040411c:	feb510e3          	bne	a0,a1,204040fc <__metal_driver_cpu_mcycle_get+0x16>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:634

    val = ((unsigned long long)hi << 32) | lo;
20404120:	fe442583          	lw	a1,-28(s0)
20404124:	882e                	mv	a6,a1
20404126:	4881                	li	a7,0
20404128:	00081793          	slli	a5,a6,0x0
2040412c:	4701                	li	a4,0
2040412e:	fe042583          	lw	a1,-32(s0)
20404132:	862e                	mv	a2,a1
20404134:	4681                	li	a3,0
20404136:	00c765b3          	or	a1,a4,a2
2040413a:	feb42423          	sw	a1,-24(s0)
2040413e:	8fd5                	or	a5,a5,a3
20404140:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:639
#else
    __asm__ volatile("csrr %0, mcycle" : "=r"(val));
#endif

    return val;
20404144:	fe842703          	lw	a4,-24(s0)
20404148:	fec42783          	lw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:640
}
2040414c:	853a                	mv	a0,a4
2040414e:	85be                	mv	a1,a5
20404150:	5472                	lw	s0,60(sp)
20404152:	6121                	addi	sp,sp,64
20404154:	8082                	ret

20404156 <__metal_driver_cpu_timebase_get>:
__metal_driver_cpu_timebase_get():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:642

unsigned long long __metal_driver_cpu_timebase_get(struct metal_cpu *cpu) {
20404156:	7179                	addi	sp,sp,-48
20404158:	d606                	sw	ra,44(sp)
2040415a:	d422                	sw	s0,40(sp)
2040415c:	d24a                	sw	s2,36(sp)
2040415e:	d04e                	sw	s3,32(sp)
20404160:	1800                	addi	s0,sp,48
20404162:	fca42e23          	sw	a0,-36(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:644
    int timebase;
    if (!cpu) {
20404166:	fdc42783          	lw	a5,-36(s0)
2040416a:	e781                	bnez	a5,20404172 <__metal_driver_cpu_timebase_get+0x1c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:645
        return 0;
2040416c:	4901                	li	s2,0
2040416e:	4981                	li	s3,0
20404170:	a821                	j	20404188 <__metal_driver_cpu_timebase_get+0x32>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:648
    }

    timebase = __metal_driver_cpu_timebase((struct metal_cpu *)cpu);
20404172:	fdc42503          	lw	a0,-36(s0)
20404176:	99dfe0ef          	jal	ra,20402b12 <__metal_driver_cpu_timebase>
2040417a:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:649
    return timebase;
2040417e:	fec42783          	lw	a5,-20(s0)
20404182:	893e                	mv	s2,a5
20404184:	87fd                	srai	a5,a5,0x1f
20404186:	89be                	mv	s3,a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:650
}
20404188:	874a                	mv	a4,s2
2040418a:	87ce                	mv	a5,s3
2040418c:	853a                	mv	a0,a4
2040418e:	85be                	mv	a1,a5
20404190:	50b2                	lw	ra,44(sp)
20404192:	5422                	lw	s0,40(sp)
20404194:	5912                	lw	s2,36(sp)
20404196:	5982                	lw	s3,32(sp)
20404198:	6145                	addi	sp,sp,48
2040419a:	8082                	ret

2040419c <__metal_driver_cpu_mtime_get>:
__metal_driver_cpu_mtime_get():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:652

unsigned long long __metal_driver_cpu_mtime_get(struct metal_cpu *cpu) {
2040419c:	7179                	addi	sp,sp,-48
2040419e:	d606                	sw	ra,44(sp)
204041a0:	d422                	sw	s0,40(sp)
204041a2:	1800                	addi	s0,sp,48
204041a4:	fca42e23          	sw	a0,-36(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:653
    unsigned long long time = 0;
204041a8:	4781                	li	a5,0
204041aa:	4801                	li	a6,0
204041ac:	fef42023          	sw	a5,-32(s0)
204041b0:	ff042223          	sw	a6,-28(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:657
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller(cpu);
204041b4:	fdc42503          	lw	a0,-36(s0)
204041b8:	985fe0ef          	jal	ra,20402b3c <__metal_driver_cpu_interrupt_controller>
204041bc:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:659

    if (intc) {
204041c0:	fec42783          	lw	a5,-20(s0)
204041c4:	c78d                	beqz	a5,204041ee <__metal_driver_cpu_mtime_get+0x52>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:660
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
204041c6:	fec42783          	lw	a5,-20(s0)
204041ca:	13c7a783          	lw	a5,316(a5)
204041ce:	fef42423          	sw	a5,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:661
        if (tmr_intc) {
204041d2:	fe842783          	lw	a5,-24(s0)
204041d6:	cf81                	beqz	a5,204041ee <__metal_driver_cpu_mtime_get+0x52>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:662
            tmr_intc->vtable->command_request(tmr_intc, METAL_TIMER_MTIME_GET,
204041d8:	fe842783          	lw	a5,-24(s0)
204041dc:	439c                	lw	a5,0(a5)
204041de:	47f8                	lw	a4,76(a5)
204041e0:	fe040793          	addi	a5,s0,-32
204041e4:	863e                	mv	a2,a5
204041e6:	4585                	li	a1,1
204041e8:	fe842503          	lw	a0,-24(s0)
204041ec:	9702                	jalr	a4
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:666
                                              &time);
        }
    }
    return time;
204041ee:	fe042703          	lw	a4,-32(s0)
204041f2:	fe442783          	lw	a5,-28(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:667
}
204041f6:	853a                	mv	a0,a4
204041f8:	85be                	mv	a1,a5
204041fa:	50b2                	lw	ra,44(sp)
204041fc:	5422                	lw	s0,40(sp)
204041fe:	6145                	addi	sp,sp,48
20404200:	8082                	ret

20404202 <__metal_driver_cpu_mtimecmp_set>:
__metal_driver_cpu_mtimecmp_set():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:670

int __metal_driver_cpu_mtimecmp_set(struct metal_cpu *cpu,
                                    unsigned long long time) {
20404202:	7179                	addi	sp,sp,-48
20404204:	d606                	sw	ra,44(sp)
20404206:	d422                	sw	s0,40(sp)
20404208:	d226                	sw	s1,36(sp)
2040420a:	1800                	addi	s0,sp,48
2040420c:	fca42e23          	sw	a0,-36(s0)
20404210:	fcb42823          	sw	a1,-48(s0)
20404214:	fcc42a23          	sw	a2,-44(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:671
    int rc = -1;
20404218:	57fd                	li	a5,-1
2040421a:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:675
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller(cpu);
2040421e:	fdc42503          	lw	a0,-36(s0)
20404222:	91bfe0ef          	jal	ra,20402b3c <__metal_driver_cpu_interrupt_controller>
20404226:	fea42423          	sw	a0,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:677

    if (intc) {
2040422a:	fe842783          	lw	a5,-24(s0)
2040422e:	cf8d                	beqz	a5,20404268 <__metal_driver_cpu_mtimecmp_set+0x66>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:678
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20404230:	fe842783          	lw	a5,-24(s0)
20404234:	13c7a783          	lw	a5,316(a5)
20404238:	fef42223          	sw	a5,-28(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:679
        if (tmr_intc) {
2040423c:	fe442783          	lw	a5,-28(s0)
20404240:	c785                	beqz	a5,20404268 <__metal_driver_cpu_mtimecmp_set+0x66>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:680
            rc = tmr_intc->vtable->mtimecmp_set(
20404242:	fe442783          	lw	a5,-28(s0)
20404246:	439c                	lw	a5,0(a5)
20404248:	4ba4                	lw	s1,80(a5)
2040424a:	fdc42503          	lw	a0,-36(s0)
2040424e:	8a1fe0ef          	jal	ra,20402aee <__metal_driver_cpu_hartid>
20404252:	87aa                	mv	a5,a0
20404254:	fd042603          	lw	a2,-48(s0)
20404258:	fd442683          	lw	a3,-44(s0)
2040425c:	85be                	mv	a1,a5
2040425e:	fe442503          	lw	a0,-28(s0)
20404262:	9482                	jalr	s1
20404264:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:684
                tmr_intc, __metal_driver_cpu_hartid(cpu), time);
        }
    }
    return rc;
20404268:	fec42783          	lw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:685
}
2040426c:	853e                	mv	a0,a5
2040426e:	50b2                	lw	ra,44(sp)
20404270:	5422                	lw	s0,40(sp)
20404272:	5492                	lw	s1,36(sp)
20404274:	6145                	addi	sp,sp,48
20404276:	8082                	ret

20404278 <__metal_driver_cpu_timer_controller_interrupt>:
__metal_driver_cpu_timer_controller_interrupt():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:688

struct metal_interrupt *
__metal_driver_cpu_timer_controller_interrupt(struct metal_cpu *cpu) {
20404278:	1101                	addi	sp,sp,-32
2040427a:	ce22                	sw	s0,28(sp)
2040427c:	1000                	addi	s0,sp,32
2040427e:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:690
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20404282:	800017b7          	lui	a5,0x80001
20404286:	e3c78793          	addi	a5,a5,-452 # 80000e3c <metal_segment_heap_target_end+0xfffff33c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:699
#else
#pragma message("There is no interrupt controller for Timer interrupt")
    return NULL;
#endif
#endif
}
2040428a:	853e                	mv	a0,a5
2040428c:	4472                	lw	s0,28(sp)
2040428e:	6105                	addi	sp,sp,32
20404290:	8082                	ret

20404292 <__metal_driver_cpu_get_timer_interrupt_id>:
__metal_driver_cpu_get_timer_interrupt_id():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:701

int __metal_driver_cpu_get_timer_interrupt_id(struct metal_cpu *cpu) {
20404292:	1101                	addi	sp,sp,-32
20404294:	ce22                	sw	s0,28(sp)
20404296:	1000                	addi	s0,sp,32
20404298:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:702
    return METAL_INTERRUPT_ID_TMR;
2040429c:	479d                	li	a5,7
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:703
}
2040429e:	853e                	mv	a0,a5
204042a0:	4472                	lw	s0,28(sp)
204042a2:	6105                	addi	sp,sp,32
204042a4:	8082                	ret

204042a6 <__metal_driver_cpu_sw_controller_interrupt>:
__metal_driver_cpu_sw_controller_interrupt():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:706

struct metal_interrupt *
__metal_driver_cpu_sw_controller_interrupt(struct metal_cpu *cpu) {
204042a6:	1101                	addi	sp,sp,-32
204042a8:	ce22                	sw	s0,28(sp)
204042aa:	1000                	addi	s0,sp,32
204042ac:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:708
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
204042b0:	800017b7          	lui	a5,0x80001
204042b4:	e3c78793          	addi	a5,a5,-452 # 80000e3c <metal_segment_heap_target_end+0xfffff33c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:717
#else
#pragma message("There is no interrupt controller for Software interrupt")
    return NULL;
#endif
#endif
}
204042b8:	853e                	mv	a0,a5
204042ba:	4472                	lw	s0,28(sp)
204042bc:	6105                	addi	sp,sp,32
204042be:	8082                	ret

204042c0 <__metal_driver_cpu_get_sw_interrupt_id>:
__metal_driver_cpu_get_sw_interrupt_id():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:719

int __metal_driver_cpu_get_sw_interrupt_id(struct metal_cpu *cpu) {
204042c0:	1101                	addi	sp,sp,-32
204042c2:	ce22                	sw	s0,28(sp)
204042c4:	1000                	addi	s0,sp,32
204042c6:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:720
    return METAL_INTERRUPT_ID_SW;
204042ca:	478d                	li	a5,3
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:721
}
204042cc:	853e                	mv	a0,a5
204042ce:	4472                	lw	s0,28(sp)
204042d0:	6105                	addi	sp,sp,32
204042d2:	8082                	ret

204042d4 <__metal_driver_cpu_set_sw_ipi>:
__metal_driver_cpu_set_sw_ipi():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:723

int __metal_driver_cpu_set_sw_ipi(struct metal_cpu *cpu, int hartid) {
204042d4:	7179                	addi	sp,sp,-48
204042d6:	d606                	sw	ra,44(sp)
204042d8:	d422                	sw	s0,40(sp)
204042da:	1800                	addi	s0,sp,48
204042dc:	fca42e23          	sw	a0,-36(s0)
204042e0:	fcb42c23          	sw	a1,-40(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:724
    int rc = -1;
204042e4:	57fd                	li	a5,-1
204042e6:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:728
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller(cpu);
204042ea:	fdc42503          	lw	a0,-36(s0)
204042ee:	84ffe0ef          	jal	ra,20402b3c <__metal_driver_cpu_interrupt_controller>
204042f2:	fea42423          	sw	a0,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:730

    if (intc) {
204042f6:	fe842783          	lw	a5,-24(s0)
204042fa:	c79d                	beqz	a5,20404328 <__metal_driver_cpu_set_sw_ipi+0x54>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:731
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
204042fc:	fe842783          	lw	a5,-24(s0)
20404300:	0dc7a783          	lw	a5,220(a5)
20404304:	fef42223          	sw	a5,-28(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:732
        if (sw_intc) {
20404308:	fe442783          	lw	a5,-28(s0)
2040430c:	cf91                	beqz	a5,20404328 <__metal_driver_cpu_set_sw_ipi+0x54>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:733
            rc = sw_intc->vtable->command_request(
2040430e:	fe442783          	lw	a5,-28(s0)
20404312:	439c                	lw	a5,0(a5)
20404314:	47f8                	lw	a4,76(a5)
20404316:	fd840793          	addi	a5,s0,-40
2040431a:	863e                	mv	a2,a5
2040431c:	458d                	li	a1,3
2040431e:	fe442503          	lw	a0,-28(s0)
20404322:	9702                	jalr	a4
20404324:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:737
                sw_intc, METAL_SOFTWARE_IPI_SET, &hartid);
        }
    }
    return rc;
20404328:	fec42783          	lw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:738
}
2040432c:	853e                	mv	a0,a5
2040432e:	50b2                	lw	ra,44(sp)
20404330:	5422                	lw	s0,40(sp)
20404332:	6145                	addi	sp,sp,48
20404334:	8082                	ret

20404336 <__metal_driver_cpu_clear_sw_ipi>:
__metal_driver_cpu_clear_sw_ipi():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:740

int __metal_driver_cpu_clear_sw_ipi(struct metal_cpu *cpu, int hartid) {
20404336:	7179                	addi	sp,sp,-48
20404338:	d606                	sw	ra,44(sp)
2040433a:	d422                	sw	s0,40(sp)
2040433c:	1800                	addi	s0,sp,48
2040433e:	fca42e23          	sw	a0,-36(s0)
20404342:	fcb42c23          	sw	a1,-40(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:741
    int rc = -1;
20404346:	57fd                	li	a5,-1
20404348:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:745
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller(cpu);
2040434c:	fdc42503          	lw	a0,-36(s0)
20404350:	fecfe0ef          	jal	ra,20402b3c <__metal_driver_cpu_interrupt_controller>
20404354:	fea42423          	sw	a0,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:747

    if (intc) {
20404358:	fe842783          	lw	a5,-24(s0)
2040435c:	c79d                	beqz	a5,2040438a <__metal_driver_cpu_clear_sw_ipi+0x54>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:748
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
2040435e:	fe842783          	lw	a5,-24(s0)
20404362:	0dc7a783          	lw	a5,220(a5)
20404366:	fef42223          	sw	a5,-28(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:749
        if (sw_intc) {
2040436a:	fe442783          	lw	a5,-28(s0)
2040436e:	cf91                	beqz	a5,2040438a <__metal_driver_cpu_clear_sw_ipi+0x54>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:750
            rc = sw_intc->vtable->command_request(
20404370:	fe442783          	lw	a5,-28(s0)
20404374:	439c                	lw	a5,0(a5)
20404376:	47f8                	lw	a4,76(a5)
20404378:	fd840793          	addi	a5,s0,-40
2040437c:	863e                	mv	a2,a5
2040437e:	4589                	li	a1,2
20404380:	fe442503          	lw	a0,-28(s0)
20404384:	9702                	jalr	a4
20404386:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:754
                sw_intc, METAL_SOFTWARE_IPI_CLEAR, &hartid);
        }
    }
    return rc;
2040438a:	fec42783          	lw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:755
}
2040438e:	853e                	mv	a0,a5
20404390:	50b2                	lw	ra,44(sp)
20404392:	5422                	lw	s0,40(sp)
20404394:	6145                	addi	sp,sp,48
20404396:	8082                	ret

20404398 <__metal_driver_cpu_get_msip>:
__metal_driver_cpu_get_msip():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:757

int __metal_driver_cpu_get_msip(struct metal_cpu *cpu, int hartid) {
20404398:	7179                	addi	sp,sp,-48
2040439a:	d606                	sw	ra,44(sp)
2040439c:	d422                	sw	s0,40(sp)
2040439e:	1800                	addi	s0,sp,48
204043a0:	fca42e23          	sw	a0,-36(s0)
204043a4:	fcb42c23          	sw	a1,-40(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:758
    int rc = 0;
204043a8:	fe042623          	sw	zero,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:762
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller(cpu);
204043ac:	fdc42503          	lw	a0,-36(s0)
204043b0:	f8cfe0ef          	jal	ra,20402b3c <__metal_driver_cpu_interrupt_controller>
204043b4:	fea42423          	sw	a0,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:764

    if (intc) {
204043b8:	fe842783          	lw	a5,-24(s0)
204043bc:	c79d                	beqz	a5,204043ea <__metal_driver_cpu_get_msip+0x52>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:765
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
204043be:	fe842783          	lw	a5,-24(s0)
204043c2:	0dc7a783          	lw	a5,220(a5)
204043c6:	fef42223          	sw	a5,-28(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:766
        if (sw_intc) {
204043ca:	fe442783          	lw	a5,-28(s0)
204043ce:	cf91                	beqz	a5,204043ea <__metal_driver_cpu_get_msip+0x52>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:767
            rc = sw_intc->vtable->command_request(
204043d0:	fe442783          	lw	a5,-28(s0)
204043d4:	439c                	lw	a5,0(a5)
204043d6:	47f8                	lw	a4,76(a5)
204043d8:	fd840793          	addi	a5,s0,-40
204043dc:	863e                	mv	a2,a5
204043de:	4591                	li	a1,4
204043e0:	fe442503          	lw	a0,-28(s0)
204043e4:	9702                	jalr	a4
204043e6:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:771
                sw_intc, METAL_SOFTWARE_MSIP_GET, &hartid);
        }
    }
    return rc;
204043ea:	fec42783          	lw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:772
}
204043ee:	853e                	mv	a0,a5
204043f0:	50b2                	lw	ra,44(sp)
204043f2:	5422                	lw	s0,40(sp)
204043f4:	6145                	addi	sp,sp,48
204043f6:	8082                	ret

204043f8 <__metal_driver_cpu_controller_interrupt>:
__metal_driver_cpu_controller_interrupt():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:775

struct metal_interrupt *
__metal_driver_cpu_controller_interrupt(struct metal_cpu *cpu) {
204043f8:	1101                	addi	sp,sp,-32
204043fa:	ce06                	sw	ra,28(sp)
204043fc:	cc22                	sw	s0,24(sp)
204043fe:	1000                	addi	s0,sp,32
20404400:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:776
    return __metal_driver_cpu_interrupt_controller(cpu);
20404404:	fec42503          	lw	a0,-20(s0)
20404408:	f34fe0ef          	jal	ra,20402b3c <__metal_driver_cpu_interrupt_controller>
2040440c:	87aa                	mv	a5,a0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:777
}
2040440e:	853e                	mv	a0,a5
20404410:	40f2                	lw	ra,28(sp)
20404412:	4462                	lw	s0,24(sp)
20404414:	6105                	addi	sp,sp,32
20404416:	8082                	ret

20404418 <__metal_driver_cpu_exception_register>:
__metal_driver_cpu_exception_register():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:798
    }
    return -1;
}

int __metal_driver_cpu_exception_register(struct metal_cpu *cpu, int ecode,
                                          metal_exception_handler_t isr) {
20404418:	7179                	addi	sp,sp,-48
2040441a:	d606                	sw	ra,44(sp)
2040441c:	d422                	sw	s0,40(sp)
2040441e:	1800                	addi	s0,sp,48
20404420:	fca42e23          	sw	a0,-36(s0)
20404424:	fcb42c23          	sw	a1,-40(s0)
20404428:	fcc42a23          	sw	a2,-44(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:801
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller(cpu);
2040442c:	fdc42503          	lw	a0,-36(s0)
20404430:	f0cfe0ef          	jal	ra,20402b3c <__metal_driver_cpu_interrupt_controller>
20404434:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:803

    if (intc) {
20404438:	fec42783          	lw	a5,-20(s0)
2040443c:	cb99                	beqz	a5,20404452 <__metal_driver_cpu_exception_register+0x3a>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:804
        return __metal_exception_register((struct metal_interrupt *)intc, ecode,
2040443e:	fd442603          	lw	a2,-44(s0)
20404442:	fd842583          	lw	a1,-40(s0)
20404446:	fec42503          	lw	a0,-20(s0)
2040444a:	8adff0ef          	jal	ra,20403cf6 <__metal_exception_register>
2040444e:	87aa                	mv	a5,a0
20404450:	a011                	j	20404454 <__metal_driver_cpu_exception_register+0x3c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:807
                                          isr);
    }
    return -1;
20404452:	57fd                	li	a5,-1
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:808
}
20404454:	853e                	mv	a0,a5
20404456:	50b2                	lw	ra,44(sp)
20404458:	5422                	lw	s0,40(sp)
2040445a:	6145                	addi	sp,sp,48
2040445c:	8082                	ret

2040445e <__metal_driver_cpu_get_instruction_length>:
__metal_driver_cpu_get_instruction_length():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:811

int __metal_driver_cpu_get_instruction_length(struct metal_cpu *cpu,
                                              uintptr_t epc) {
2040445e:	1101                	addi	sp,sp,-32
20404460:	ce22                	sw	s0,28(sp)
20404462:	1000                	addi	s0,sp,32
20404464:	fea42623          	sw	a0,-20(s0)
20404468:	feb42423          	sw	a1,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:817
    /**
     * Per ISA compressed instruction has last two bits of opcode set.
     * The encoding '00' '01' '10' are used for compressed instruction.
     * Only enconding '11' isn't regarded as compressed instruction (>16b).
     */
    return ((*(unsigned short *)epc & METAL_INSN_LENGTH_MASK) ==
2040446c:	fe842783          	lw	a5,-24(s0)
20404470:	0007d783          	lhu	a5,0(a5)
20404474:	0037f713          	andi	a4,a5,3
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:820
            METAL_INSN_NOT_COMPRESSED)
               ? 4
               : 2;
20404478:	478d                	li	a5,3
2040447a:	00f71463          	bne	a4,a5,20404482 <__metal_driver_cpu_get_instruction_length+0x24>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:820 (discriminator 1)
2040447e:	4791                	li	a5,4
20404480:	a011                	j	20404484 <__metal_driver_cpu_get_instruction_length+0x26>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:820 (discriminator 2)
20404482:	4789                	li	a5,2
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:821 (discriminator 5)
}
20404484:	853e                	mv	a0,a5
20404486:	4472                	lw	s0,28(sp)
20404488:	6105                	addi	sp,sp,32
2040448a:	8082                	ret

2040448c <__metal_driver_cpu_get_exception_pc>:
__metal_driver_cpu_get_exception_pc():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:823

uintptr_t __metal_driver_cpu_get_exception_pc(struct metal_cpu *cpu) {
2040448c:	7179                	addi	sp,sp,-48
2040448e:	d622                	sw	s0,44(sp)
20404490:	1800                	addi	s0,sp,48
20404492:	fca42e23          	sw	a0,-36(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:825
    uintptr_t mepc;
    __asm__ volatile("csrr %0, mepc" : "=r"(mepc));
20404496:	341027f3          	csrr	a5,mepc
2040449a:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:826
    return mepc;
2040449e:	fec42783          	lw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:827
}
204044a2:	853e                	mv	a0,a5
204044a4:	5432                	lw	s0,44(sp)
204044a6:	6145                	addi	sp,sp,48
204044a8:	8082                	ret

204044aa <__metal_driver_cpu_set_exception_pc>:
__metal_driver_cpu_set_exception_pc():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:829

int __metal_driver_cpu_set_exception_pc(struct metal_cpu *cpu, uintptr_t mepc) {
204044aa:	1101                	addi	sp,sp,-32
204044ac:	ce22                	sw	s0,28(sp)
204044ae:	1000                	addi	s0,sp,32
204044b0:	fea42623          	sw	a0,-20(s0)
204044b4:	feb42423          	sw	a1,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:830
    __asm__ volatile("csrw mepc, %0" ::"r"(mepc));
204044b8:	fe842783          	lw	a5,-24(s0)
204044bc:	34179073          	csrw	mepc,a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:831
    return 0;
204044c0:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:832
}
204044c2:	853e                	mv	a0,a5
204044c4:	4472                	lw	s0,28(sp)
204044c6:	6105                	addi	sp,sp,32
204044c8:	8082                	ret

204044ca <__metal_driver_cpu_get_buserror>:
__metal_driver_cpu_get_buserror():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:834

struct metal_buserror *__metal_driver_cpu_get_buserror(struct metal_cpu *cpu) {
204044ca:	1101                	addi	sp,sp,-32
204044cc:	ce06                	sw	ra,28(sp)
204044ce:	cc22                	sw	s0,24(sp)
204044d0:	1000                	addi	s0,sp,32
204044d2:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:835
    return __metal_driver_cpu_buserror(cpu);
204044d6:	fec42503          	lw	a0,-20(s0)
204044da:	e8cfe0ef          	jal	ra,20402b66 <__metal_driver_cpu_buserror>
204044de:	87aa                	mv	a5,a0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_cpu.c:836
}
204044e0:	853e                	mv	a0,a5
204044e2:	40f2                	lw	ra,28(sp)
204044e4:	4462                	lw	s0,24(sp)
204044e6:	6105                	addi	sp,sp,32
204044e8:	8082                	ret

204044ea <__metal_driver_sifive_plic0_control_base>:
__metal_driver_sifive_plic0_control_base():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:314



/* --------------------- sifive_plic0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_plic0_control_base(struct metal_interrupt *controller)
{
204044ea:	1101                	addi	sp,sp,-32
204044ec:	ce22                	sw	s0,28(sp)
204044ee:	1000                	addi	s0,sp,32
204044f0:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:315
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
204044f4:	fec42703          	lw	a4,-20(s0)
204044f8:	800017b7          	lui	a5,0x80001
204044fc:	ae878793          	addi	a5,a5,-1304 # 80000ae8 <metal_segment_heap_target_end+0xffffefe8>
20404500:	00f71563          	bne	a4,a5,2040450a <__metal_driver_sifive_plic0_control_base+0x20>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:316
		return METAL_RISCV_PLIC0_C000000_BASE_ADDRESS;
20404504:	0c0007b7          	lui	a5,0xc000
20404508:	a011                	j	2040450c <__metal_driver_sifive_plic0_control_base+0x22>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:319
	}
	else {
		return 0;
2040450a:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:321
	}
}
2040450c:	853e                	mv	a0,a5
2040450e:	4472                	lw	s0,28(sp)
20404510:	6105                	addi	sp,sp,32
20404512:	8082                	ret

20404514 <__metal_driver_sifive_plic0_num_interrupts>:
__metal_driver_sifive_plic0_num_interrupts():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:334
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_plic0_num_interrupts(struct metal_interrupt *controller)
{
20404514:	1101                	addi	sp,sp,-32
20404516:	ce22                	sw	s0,28(sp)
20404518:	1000                	addi	s0,sp,32
2040451a:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:335
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
2040451e:	fec42703          	lw	a4,-20(s0)
20404522:	800017b7          	lui	a5,0x80001
20404526:	ae878793          	addi	a5,a5,-1304 # 80000ae8 <metal_segment_heap_target_end+0xffffefe8>
2040452a:	00f71463          	bne	a4,a5,20404532 <__metal_driver_sifive_plic0_num_interrupts+0x1e>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:336
		return METAL_RISCV_PLIC0_C000000_RISCV_NDEV;
2040452e:	47ed                	li	a5,27
20404530:	a011                	j	20404534 <__metal_driver_sifive_plic0_num_interrupts+0x20>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:339
	}
	else {
		return 0;
20404532:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:341
	}
}
20404534:	853e                	mv	a0,a5
20404536:	4472                	lw	s0,28(sp)
20404538:	6105                	addi	sp,sp,32
2040453a:	8082                	ret

2040453c <__metal_driver_sifive_plic0_max_priority>:
__metal_driver_sifive_plic0_max_priority():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:344

static __inline__ int __metal_driver_sifive_plic0_max_priority(struct metal_interrupt *controller)
{
2040453c:	1101                	addi	sp,sp,-32
2040453e:	ce22                	sw	s0,28(sp)
20404540:	1000                	addi	s0,sp,32
20404542:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:345
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20404546:	fec42703          	lw	a4,-20(s0)
2040454a:	800017b7          	lui	a5,0x80001
2040454e:	ae878793          	addi	a5,a5,-1304 # 80000ae8 <metal_segment_heap_target_end+0xffffefe8>
20404552:	00f71463          	bne	a4,a5,2040455a <__metal_driver_sifive_plic0_max_priority+0x1e>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:346
		return METAL_RISCV_PLIC0_C000000_RISCV_MAX_PRIORITY;
20404556:	479d                	li	a5,7
20404558:	a011                	j	2040455c <__metal_driver_sifive_plic0_max_priority+0x20>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:349
	}
	else {
		return 0;
2040455a:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:351
	}
}
2040455c:	853e                	mv	a0,a5
2040455e:	4472                	lw	s0,28(sp)
20404560:	6105                	addi	sp,sp,32
20404562:	8082                	ret

20404564 <__metal_driver_sifive_plic0_interrupt_parents>:
__metal_driver_sifive_plic0_interrupt_parents():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:354

static __inline__ struct metal_interrupt * __metal_driver_sifive_plic0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20404564:	1101                	addi	sp,sp,-32
20404566:	ce22                	sw	s0,28(sp)
20404568:	1000                	addi	s0,sp,32
2040456a:	fea42623          	sw	a0,-20(s0)
2040456e:	feb42423          	sw	a1,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:355
	if (idx == 0) {
20404572:	fe842783          	lw	a5,-24(s0)
20404576:	e791                	bnez	a5,20404582 <__metal_driver_sifive_plic0_interrupt_parents+0x1e>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:356
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20404578:	800007b7          	lui	a5,0x80000
2040457c:	71878793          	addi	a5,a5,1816 # 80000718 <metal_segment_heap_target_end+0xffffec18>
20404580:	a011                	j	20404584 <__metal_driver_sifive_plic0_interrupt_parents+0x20>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:359
	}
	else {
		return NULL;
20404582:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:361
	}
}
20404584:	853e                	mv	a0,a5
20404586:	4472                	lw	s0,28(sp)
20404588:	6105                	addi	sp,sp,32
2040458a:	8082                	ret

2040458c <__metal_driver_sifive_plic0_interrupt_lines>:
__metal_driver_sifive_plic0_interrupt_lines():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:364

static __inline__ int __metal_driver_sifive_plic0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
2040458c:	1101                	addi	sp,sp,-32
2040458e:	ce22                	sw	s0,28(sp)
20404590:	1000                	addi	s0,sp,32
20404592:	fea42623          	sw	a0,-20(s0)
20404596:	feb42423          	sw	a1,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:365
	if (idx == 0) {
2040459a:	fe842783          	lw	a5,-24(s0)
2040459e:	e399                	bnez	a5,204045a4 <__metal_driver_sifive_plic0_interrupt_lines+0x18>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:366
		return 11;
204045a0:	47ad                	li	a5,11
204045a2:	a011                	j	204045a6 <__metal_driver_sifive_plic0_interrupt_lines+0x1a>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:369
	}
	else {
		return 0;
204045a4:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:371
	}
}
204045a6:	853e                	mv	a0,a5
204045a8:	4472                	lw	s0,28(sp)
204045aa:	6105                	addi	sp,sp,32
204045ac:	8082                	ret

204045ae <__metal_driver_sifive_plic0_context_ids>:
__metal_driver_sifive_plic0_context_ids():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:374

static __inline__ int __metal_driver_sifive_plic0_context_ids(int hartid)
{
204045ae:	1101                	addi	sp,sp,-32
204045b0:	ce22                	sw	s0,28(sp)
204045b2:	1000                	addi	s0,sp,32
204045b4:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:375
	if (hartid == 0) {
204045b8:	fec42783          	lw	a5,-20(s0)
204045bc:	e399                	bnez	a5,204045c2 <__metal_driver_sifive_plic0_context_ids+0x14>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:376
		return 0;
204045be:	4781                	li	a5,0
204045c0:	a011                	j	204045c4 <__metal_driver_sifive_plic0_context_ids+0x16>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:379
	}
	else {
		return -1;
204045c2:	57fd                	li	a5,-1
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:381
	}
}
204045c4:	853e                	mv	a0,a5
204045c6:	4472                	lw	s0,28(sp)
204045c8:	6105                	addi	sp,sp,32
204045ca:	8082                	ret

204045cc <__metal_plic0_claim_interrupt>:
__metal_plic0_claim_interrupt():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:18
#include <metal/machine.h>
#include <metal/shutdown.h>

unsigned int
__metal_plic0_claim_interrupt(struct __metal_driver_riscv_plic0 *plic,
                              int context_id) {
204045cc:	7179                	addi	sp,sp,-48
204045ce:	d606                	sw	ra,44(sp)
204045d0:	d422                	sw	s0,40(sp)
204045d2:	1800                	addi	s0,sp,48
204045d4:	fca42e23          	sw	a0,-36(s0)
204045d8:	fcb42c23          	sw	a1,-40(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:19
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(
204045dc:	fdc42503          	lw	a0,-36(s0)
204045e0:	3729                	jal	204044ea <__metal_driver_sifive_plic0_control_base>
204045e2:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:21
        (struct metal_interrupt *)plic);
    return __METAL_ACCESS_ONCE(
204045e6:	fd842783          	lw	a5,-40(s0)
204045ea:	00c79713          	slli	a4,a5,0xc
204045ee:	fec42783          	lw	a5,-20(s0)
204045f2:	973e                	add	a4,a4,a5
204045f4:	002007b7          	lui	a5,0x200
204045f8:	0791                	addi	a5,a5,4
204045fa:	97ba                	add	a5,a5,a4
204045fc:	439c                	lw	a5,0(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:25
        (__metal_io_u32 *)(control_base + METAL_RISCV_PLIC0_CONTEXT_BASE +
                           (context_id * METAL_RISCV_PLIC0_CONTEXT_PER_HART) +
                           METAL_RISCV_PLIC0_CONTEXT_CLAIM));
}
204045fe:	853e                	mv	a0,a5
20404600:	50b2                	lw	ra,44(sp)
20404602:	5422                	lw	s0,40(sp)
20404604:	6145                	addi	sp,sp,48
20404606:	8082                	ret

20404608 <__metal_plic0_complete_interrupt>:
__metal_plic0_complete_interrupt():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:28

void __metal_plic0_complete_interrupt(struct __metal_driver_riscv_plic0 *plic,
                                      int context_id, unsigned int id) {
20404608:	7179                	addi	sp,sp,-48
2040460a:	d606                	sw	ra,44(sp)
2040460c:	d422                	sw	s0,40(sp)
2040460e:	1800                	addi	s0,sp,48
20404610:	fca42e23          	sw	a0,-36(s0)
20404614:	fcb42c23          	sw	a1,-40(s0)
20404618:	fcc42a23          	sw	a2,-44(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:29
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(
2040461c:	fdc42503          	lw	a0,-36(s0)
20404620:	35e9                	jal	204044ea <__metal_driver_sifive_plic0_control_base>
20404622:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:31
        (struct metal_interrupt *)plic);
    __METAL_ACCESS_ONCE(
20404626:	fd842783          	lw	a5,-40(s0)
2040462a:	00c79713          	slli	a4,a5,0xc
2040462e:	fec42783          	lw	a5,-20(s0)
20404632:	973e                	add	a4,a4,a5
20404634:	002007b7          	lui	a5,0x200
20404638:	0791                	addi	a5,a5,4
2040463a:	97ba                	add	a5,a5,a4
2040463c:	873e                	mv	a4,a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:34
        (__metal_io_u32 *)(control_base + METAL_RISCV_PLIC0_CONTEXT_BASE +
                           (context_id * METAL_RISCV_PLIC0_CONTEXT_PER_HART) +
                           METAL_RISCV_PLIC0_CONTEXT_CLAIM)) = id;
2040463e:	fd442783          	lw	a5,-44(s0)
20404642:	c31c                	sw	a5,0(a4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:35
}
20404644:	0001                	nop
20404646:	50b2                	lw	ra,44(sp)
20404648:	5422                	lw	s0,40(sp)
2040464a:	6145                	addi	sp,sp,48
2040464c:	8082                	ret

2040464e <__metal_plic0_set_threshold>:
__metal_plic0_set_threshold():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:38

int __metal_plic0_set_threshold(struct metal_interrupt *controller,
                                int context_id, unsigned int threshold) {
2040464e:	7179                	addi	sp,sp,-48
20404650:	d606                	sw	ra,44(sp)
20404652:	d422                	sw	s0,40(sp)
20404654:	1800                	addi	s0,sp,48
20404656:	fca42e23          	sw	a0,-36(s0)
2040465a:	fcb42c23          	sw	a1,-40(s0)
2040465e:	fcc42a23          	sw	a2,-44(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:40
    unsigned long control_base =
        __metal_driver_sifive_plic0_control_base(controller);
20404662:	fdc42503          	lw	a0,-36(s0)
20404666:	3551                	jal	204044ea <__metal_driver_sifive_plic0_control_base>
20404668:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:41
    __METAL_ACCESS_ONCE(
2040466c:	fd842783          	lw	a5,-40(s0)
20404670:	00c79713          	slli	a4,a5,0xc
20404674:	fec42783          	lw	a5,-20(s0)
20404678:	973e                	add	a4,a4,a5
2040467a:	002007b7          	lui	a5,0x200
2040467e:	97ba                	add	a5,a5,a4
20404680:	873e                	mv	a4,a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:44
        (__metal_io_u32 *)(control_base + METAL_RISCV_PLIC0_CONTEXT_BASE +
                           (context_id * METAL_RISCV_PLIC0_CONTEXT_PER_HART) +
                           METAL_RISCV_PLIC0_CONTEXT_THRESHOLD)) = threshold;
20404682:	fd442783          	lw	a5,-44(s0)
20404686:	c31c                	sw	a5,0(a4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:45
    return 0;
20404688:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:46
}
2040468a:	853e                	mv	a0,a5
2040468c:	50b2                	lw	ra,44(sp)
2040468e:	5422                	lw	s0,40(sp)
20404690:	6145                	addi	sp,sp,48
20404692:	8082                	ret

20404694 <__metal_plic0_get_threshold>:
__metal_plic0_get_threshold():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:49

unsigned int __metal_plic0_get_threshold(struct metal_interrupt *controller,
                                         int context_id) {
20404694:	7179                	addi	sp,sp,-48
20404696:	d606                	sw	ra,44(sp)
20404698:	d422                	sw	s0,40(sp)
2040469a:	1800                	addi	s0,sp,48
2040469c:	fca42e23          	sw	a0,-36(s0)
204046a0:	fcb42c23          	sw	a1,-40(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:51
    unsigned long control_base =
        __metal_driver_sifive_plic0_control_base(controller);
204046a4:	fdc42503          	lw	a0,-36(s0)
204046a8:	3589                	jal	204044ea <__metal_driver_sifive_plic0_control_base>
204046aa:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:52
    return __METAL_ACCESS_ONCE(
204046ae:	fd842783          	lw	a5,-40(s0)
204046b2:	00c79713          	slli	a4,a5,0xc
204046b6:	fec42783          	lw	a5,-20(s0)
204046ba:	973e                	add	a4,a4,a5
204046bc:	002007b7          	lui	a5,0x200
204046c0:	97ba                	add	a5,a5,a4
204046c2:	439c                	lw	a5,0(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:56
        (__metal_io_u32 *)(control_base + METAL_RISCV_PLIC0_CONTEXT_BASE +
                           (context_id * METAL_RISCV_PLIC0_CONTEXT_PER_HART) +
                           METAL_RISCV_PLIC0_CONTEXT_THRESHOLD));
}
204046c4:	853e                	mv	a0,a5
204046c6:	50b2                	lw	ra,44(sp)
204046c8:	5422                	lw	s0,40(sp)
204046ca:	6145                	addi	sp,sp,48
204046cc:	8082                	ret

204046ce <__metal_driver_riscv_plic0_set_priority>:
__metal_driver_riscv_plic0_set_priority():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:59

int __metal_driver_riscv_plic0_set_priority(struct metal_interrupt *controller,
                                            int id, unsigned int priority) {
204046ce:	7179                	addi	sp,sp,-48
204046d0:	d606                	sw	ra,44(sp)
204046d2:	d422                	sw	s0,40(sp)
204046d4:	1800                	addi	s0,sp,48
204046d6:	fca42e23          	sw	a0,-36(s0)
204046da:	fcb42c23          	sw	a1,-40(s0)
204046de:	fcc42a23          	sw	a2,-44(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:60
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(
204046e2:	fdc42503          	lw	a0,-36(s0)
204046e6:	3511                	jal	204044ea <__metal_driver_sifive_plic0_control_base>
204046e8:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:62
        (struct metal_interrupt *)controller);
    unsigned int max_priority = __metal_driver_sifive_plic0_max_priority(
204046ec:	fdc42503          	lw	a0,-36(s0)
204046f0:	35b1                	jal	2040453c <__metal_driver_sifive_plic0_max_priority>
204046f2:	87aa                	mv	a5,a0
204046f4:	fef42423          	sw	a5,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:64
        (struct metal_interrupt *)controller);
    if ((max_priority) && (priority < max_priority)) {
204046f8:	fe842783          	lw	a5,-24(s0)
204046fc:	c785                	beqz	a5,20404724 <__metal_driver_riscv_plic0_set_priority+0x56>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:64 (discriminator 1)
204046fe:	fd442703          	lw	a4,-44(s0)
20404702:	fe842783          	lw	a5,-24(s0)
20404706:	00f77f63          	bgeu	a4,a5,20404724 <__metal_driver_riscv_plic0_set_priority+0x56>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:65
        __METAL_ACCESS_ONCE(
2040470a:	fd842783          	lw	a5,-40(s0)
2040470e:	078a                	slli	a5,a5,0x2
20404710:	873e                	mv	a4,a5
20404712:	fec42783          	lw	a5,-20(s0)
20404716:	97ba                	add	a5,a5,a4
20404718:	873e                	mv	a4,a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:67
            (__metal_io_u32 *)(control_base + METAL_RISCV_PLIC0_PRIORITY_BASE +
                               (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT))) =
2040471a:	fd442783          	lw	a5,-44(s0)
2040471e:	c31c                	sw	a5,0(a4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:69
            priority;
        return 0;
20404720:	4781                	li	a5,0
20404722:	a011                	j	20404726 <__metal_driver_riscv_plic0_set_priority+0x58>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:71
    }
    return -1;
20404724:	57fd                	li	a5,-1
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:72
}
20404726:	853e                	mv	a0,a5
20404728:	50b2                	lw	ra,44(sp)
2040472a:	5422                	lw	s0,40(sp)
2040472c:	6145                	addi	sp,sp,48
2040472e:	8082                	ret

20404730 <__metal_driver_riscv_plic0_get_priority>:
__metal_driver_riscv_plic0_get_priority():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:76

unsigned int
__metal_driver_riscv_plic0_get_priority(struct metal_interrupt *controller,
                                        int id) {
20404730:	7179                	addi	sp,sp,-48
20404732:	d606                	sw	ra,44(sp)
20404734:	d422                	sw	s0,40(sp)
20404736:	1800                	addi	s0,sp,48
20404738:	fca42e23          	sw	a0,-36(s0)
2040473c:	fcb42c23          	sw	a1,-40(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:78
    unsigned long control_base =
        __metal_driver_sifive_plic0_control_base(controller);
20404740:	fdc42503          	lw	a0,-36(s0)
20404744:	335d                	jal	204044ea <__metal_driver_sifive_plic0_control_base>
20404746:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:80

    return __METAL_ACCESS_ONCE(
2040474a:	fd842783          	lw	a5,-40(s0)
2040474e:	078a                	slli	a5,a5,0x2
20404750:	873e                	mv	a4,a5
20404752:	fec42783          	lw	a5,-20(s0)
20404756:	97ba                	add	a5,a5,a4
20404758:	439c                	lw	a5,0(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:83
        (__metal_io_u32 *)(control_base + METAL_RISCV_PLIC0_PRIORITY_BASE +
                           (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT)));
}
2040475a:	853e                	mv	a0,a5
2040475c:	50b2                	lw	ra,44(sp)
2040475e:	5422                	lw	s0,40(sp)
20404760:	6145                	addi	sp,sp,48
20404762:	8082                	ret

20404764 <__metal_plic0_enable>:
__metal_plic0_enable():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:86

int __metal_plic0_enable(struct __metal_driver_riscv_plic0 *plic,
                         int context_id, int id, int enable) {
20404764:	7179                	addi	sp,sp,-48
20404766:	d606                	sw	ra,44(sp)
20404768:	d422                	sw	s0,40(sp)
2040476a:	1800                	addi	s0,sp,48
2040476c:	fca42e23          	sw	a0,-36(s0)
20404770:	fcb42c23          	sw	a1,-40(s0)
20404774:	fcc42a23          	sw	a2,-44(s0)
20404778:	fcd42823          	sw	a3,-48(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:88
    unsigned int current;
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(
2040477c:	fdc42503          	lw	a0,-36(s0)
20404780:	33ad                	jal	204044ea <__metal_driver_sifive_plic0_control_base>
20404782:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:91
        (struct metal_interrupt *)plic);

    current = __METAL_ACCESS_ONCE(
20404786:	fd842783          	lw	a5,-40(s0)
2040478a:	00779713          	slli	a4,a5,0x7
2040478e:	fec42783          	lw	a5,-20(s0)
20404792:	97ba                	add	a5,a5,a4
20404794:	fd442703          	lw	a4,-44(s0)
20404798:	8715                	srai	a4,a4,0x5
2040479a:	070a                	slli	a4,a4,0x2
2040479c:	973e                	add	a4,a4,a5
2040479e:	6789                	lui	a5,0x2
204047a0:	97ba                	add	a5,a5,a4
204047a2:	439c                	lw	a5,0(a5)
204047a4:	fef42423          	sw	a5,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:100
    __METAL_ACCESS_ONCE(
        (__metal_io_u32 *)(control_base + METAL_RISCV_PLIC0_ENABLE_BASE +
                           (context_id * METAL_RISCV_PLIC0_ENABLE_PER_HART) +
                           ((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
        enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
               : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
204047a8:	fd042783          	lw	a5,-48(s0)
204047ac:	cf81                	beqz	a5,204047c4 <__metal_plic0_enable+0x60>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:99 (discriminator 1)
        enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
204047ae:	fd442783          	lw	a5,-44(s0)
204047b2:	8bfd                	andi	a5,a5,31
204047b4:	4705                	li	a4,1
204047b6:	00f717b3          	sll	a5,a4,a5
204047ba:	873e                	mv	a4,a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:100 (discriminator 1)
               : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
204047bc:	fe842783          	lw	a5,-24(s0)
204047c0:	8fd9                	or	a5,a5,a4
204047c2:	a829                	j	204047dc <__metal_plic0_enable+0x78>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:100 (discriminator 2)
204047c4:	fd442783          	lw	a5,-44(s0)
204047c8:	8bfd                	andi	a5,a5,31
204047ca:	4705                	li	a4,1
204047cc:	00f717b3          	sll	a5,a4,a5
204047d0:	fff7c793          	not	a5,a5
204047d4:	873e                	mv	a4,a5
204047d6:	fe842783          	lw	a5,-24(s0)
204047da:	8ff9                	and	a5,a5,a4
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:95
    __METAL_ACCESS_ONCE(
204047dc:	fd842703          	lw	a4,-40(s0)
204047e0:	00771693          	slli	a3,a4,0x7
204047e4:	fec42703          	lw	a4,-20(s0)
204047e8:	9736                	add	a4,a4,a3
204047ea:	fd442683          	lw	a3,-44(s0)
204047ee:	8695                	srai	a3,a3,0x5
204047f0:	068a                	slli	a3,a3,0x2
204047f2:	96ba                	add	a3,a3,a4
204047f4:	6709                	lui	a4,0x2
204047f6:	9736                	add	a4,a4,a3
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:98
                           ((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
204047f8:	c31c                	sw	a5,0(a4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:102

    return 0;
204047fa:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:103
}
204047fc:	853e                	mv	a0,a5
204047fe:	50b2                	lw	ra,44(sp)
20404800:	5422                	lw	s0,40(sp)
20404802:	6145                	addi	sp,sp,48
20404804:	8082                	ret

20404806 <__metal_plic0_default_handler>:
__metal_plic0_default_handler():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:105

void __metal_plic0_default_handler(int id, void *priv) { metal_shutdown(300); }
20404806:	1101                	addi	sp,sp,-32
20404808:	ce06                	sw	ra,28(sp)
2040480a:	cc22                	sw	s0,24(sp)
2040480c:	1000                	addi	s0,sp,32
2040480e:	fea42623          	sw	a0,-20(s0)
20404812:	feb42423          	sw	a1,-24(s0)
20404816:	12c00513          	li	a0,300
2040481a:	086020ef          	jal	ra,204068a0 <metal_shutdown>

2040481e <__metal_plic0_handler>:
__metal_plic0_handler():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:107

void __metal_plic0_handler(int id, void *priv) {
2040481e:	7179                	addi	sp,sp,-48
20404820:	d606                	sw	ra,44(sp)
20404822:	d422                	sw	s0,40(sp)
20404824:	1800                	addi	s0,sp,48
20404826:	fca42e23          	sw	a0,-36(s0)
2040482a:	fcb42c23          	sw	a1,-40(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:108
    struct __metal_driver_riscv_plic0 *plic = priv;
2040482e:	fd842783          	lw	a5,-40(s0)
20404832:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:110
    int contextid =
        __metal_driver_sifive_plic0_context_ids(__metal_myhart_id());
20404836:	b84fe0ef          	jal	ra,20402bba <__metal_myhart_id>
2040483a:	87aa                	mv	a5,a0
2040483c:	853e                	mv	a0,a5
2040483e:	3b85                	jal	204045ae <__metal_driver_sifive_plic0_context_ids>
20404840:	fea42423          	sw	a0,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:111
    unsigned int idx = __metal_plic0_claim_interrupt(plic, contextid);
20404844:	fe842583          	lw	a1,-24(s0)
20404848:	fec42503          	lw	a0,-20(s0)
2040484c:	3341                	jal	204045cc <__metal_plic0_claim_interrupt>
2040484e:	fea42223          	sw	a0,-28(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:112
    unsigned int num_interrupts = __metal_driver_sifive_plic0_num_interrupts(
20404852:	fec42503          	lw	a0,-20(s0)
20404856:	397d                	jal	20404514 <__metal_driver_sifive_plic0_num_interrupts>
20404858:	87aa                	mv	a5,a0
2040485a:	fef42023          	sw	a5,-32(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:115
        (struct metal_interrupt *)plic);

    if ((idx < num_interrupts) && (plic->metal_exint_table[idx])) {
2040485e:	fe442703          	lw	a4,-28(s0)
20404862:	fe042783          	lw	a5,-32(s0)
20404866:	04f77263          	bgeu	a4,a5,204048aa <__metal_plic0_handler+0x8c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 1)
2040486a:	fec42703          	lw	a4,-20(s0)
2040486e:	fe442783          	lw	a5,-28(s0)
20404872:	078a                	slli	a5,a5,0x2
20404874:	97ba                	add	a5,a5,a4
20404876:	479c                	lw	a5,8(a5)
20404878:	cb8d                	beqz	a5,204048aa <__metal_plic0_handler+0x8c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:116
        plic->metal_exint_table[idx](idx,
2040487a:	fec42703          	lw	a4,-20(s0)
2040487e:	fe442783          	lw	a5,-28(s0)
20404882:	078a                	slli	a5,a5,0x2
20404884:	97ba                	add	a5,a5,a4
20404886:	0087a803          	lw	a6,8(a5) # 2008 <__heap_size+0x1808>
2040488a:	fe442603          	lw	a2,-28(s0)
2040488e:	fec42683          	lw	a3,-20(s0)
20404892:	fe442703          	lw	a4,-28(s0)
20404896:	87ba                	mv	a5,a4
20404898:	0786                	slli	a5,a5,0x1
2040489a:	97ba                	add	a5,a5,a4
2040489c:	078e                	slli	a5,a5,0x3
2040489e:	97b6                	add	a5,a5,a3
204048a0:	0887a783          	lw	a5,136(a5)
204048a4:	85be                	mv	a1,a5
204048a6:	8532                	mv	a0,a2
204048a8:	9802                	jalr	a6
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:120
                                     plic->metal_exdata_table[idx].exint_data);
    }

    __metal_plic0_complete_interrupt(plic, contextid, idx);
204048aa:	fe442603          	lw	a2,-28(s0)
204048ae:	fe842583          	lw	a1,-24(s0)
204048b2:	fec42503          	lw	a0,-20(s0)
204048b6:	3b89                	jal	20404608 <__metal_plic0_complete_interrupt>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:121
}
204048b8:	0001                	nop
204048ba:	50b2                	lw	ra,44(sp)
204048bc:	5422                	lw	s0,40(sp)
204048be:	6145                	addi	sp,sp,48
204048c0:	8082                	ret

204048c2 <__metal_driver_riscv_plic0_init>:
__metal_driver_riscv_plic0_init():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:123

void __metal_driver_riscv_plic0_init(struct metal_interrupt *controller) {
204048c2:	7139                	addi	sp,sp,-64
204048c4:	de06                	sw	ra,60(sp)
204048c6:	dc22                	sw	s0,56(sp)
204048c8:	0080                	addi	s0,sp,64
204048ca:	fca42623          	sw	a0,-52(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:124
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
204048ce:	fcc42783          	lw	a5,-52(s0)
204048d2:	fef42223          	sw	a5,-28(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:126

    if (!plic->init_done) {
204048d6:	fe442783          	lw	a5,-28(s0)
204048da:	43dc                	lw	a5,4(a5)
204048dc:	12079763          	bnez	a5,20404a0a <__metal_driver_riscv_plic0_init+0x148>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:130
        int num_interrupts, line;
        struct metal_interrupt *intc;

        for (int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
204048e0:	fe042623          	sw	zero,-20(s0)
204048e4:	aa19                	j	204049fa <__metal_driver_riscv_plic0_init+0x138>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:132
            num_interrupts =
                __metal_driver_sifive_plic0_num_interrupts(controller);
204048e6:	fcc42503          	lw	a0,-52(s0)
204048ea:	c2bff0ef          	jal	ra,20404514 <__metal_driver_sifive_plic0_num_interrupts>
204048ee:	fea42023          	sw	a0,-32(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:133
            intc = __metal_driver_sifive_plic0_interrupt_parents(controller,
204048f2:	fec42583          	lw	a1,-20(s0)
204048f6:	fcc42503          	lw	a0,-52(s0)
204048fa:	31ad                	jal	20404564 <__metal_driver_sifive_plic0_interrupt_parents>
204048fc:	fca42e23          	sw	a0,-36(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:136
                                                                 parent);
            line =
                __metal_driver_sifive_plic0_interrupt_lines(controller, parent);
20404900:	fec42583          	lw	a1,-20(s0)
20404904:	fcc42503          	lw	a0,-52(s0)
20404908:	3151                	jal	2040458c <__metal_driver_sifive_plic0_interrupt_lines>
2040490a:	fca42c23          	sw	a0,-40(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:139

            /* Initialize ist parent controller, aka cpu_intc. */
            intc->vtable->interrupt_init(intc);
2040490e:	fdc42783          	lw	a5,-36(s0)
20404912:	439c                	lw	a5,0(a5)
20404914:	439c                	lw	a5,0(a5)
20404916:	fdc42503          	lw	a0,-36(s0)
2040491a:	9782                	jalr	a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:141

            for (int i = 0; i < PLIC0_MAX_INTERRUPTS; i++) {
2040491c:	fe042423          	sw	zero,-24(s0)
20404920:	a885                	j	20404990 <__metal_driver_riscv_plic0_init+0xce>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:142
                __metal_plic0_enable(plic, parent, i, METAL_DISABLE);
20404922:	4681                	li	a3,0
20404924:	fe842603          	lw	a2,-24(s0)
20404928:	fec42583          	lw	a1,-20(s0)
2040492c:	fe442503          	lw	a0,-28(s0)
20404930:	3d15                	jal	20404764 <__metal_plic0_enable>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:143
                if (i < num_interrupts) {
20404932:	fe842703          	lw	a4,-24(s0)
20404936:	fe042783          	lw	a5,-32(s0)
2040493a:	04f75663          	bge	a4,a5,20404986 <__metal_driver_riscv_plic0_init+0xc4>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:144
                    __metal_driver_riscv_plic0_set_priority(controller, i, 0);
2040493e:	4601                	li	a2,0
20404940:	fe842583          	lw	a1,-24(s0)
20404944:	fcc42503          	lw	a0,-52(s0)
20404948:	3359                	jal	204046ce <__metal_driver_riscv_plic0_set_priority>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:145
                    plic->metal_exint_table[i] = NULL;
2040494a:	fe442703          	lw	a4,-28(s0)
2040494e:	fe842783          	lw	a5,-24(s0)
20404952:	078a                	slli	a5,a5,0x2
20404954:	97ba                	add	a5,a5,a4
20404956:	0007a423          	sw	zero,8(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:146
                    plic->metal_exdata_table[i].sub_int = NULL;
2040495a:	fe442683          	lw	a3,-28(s0)
2040495e:	fe842703          	lw	a4,-24(s0)
20404962:	87ba                	mv	a5,a4
20404964:	0786                	slli	a5,a5,0x1
20404966:	97ba                	add	a5,a5,a4
20404968:	078e                	slli	a5,a5,0x3
2040496a:	97b6                	add	a5,a5,a3
2040496c:	0807a223          	sw	zero,132(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:147
                    plic->metal_exdata_table[i].exint_data = NULL;
20404970:	fe442683          	lw	a3,-28(s0)
20404974:	fe842703          	lw	a4,-24(s0)
20404978:	87ba                	mv	a5,a4
2040497a:	0786                	slli	a5,a5,0x1
2040497c:	97ba                	add	a5,a5,a4
2040497e:	078e                	slli	a5,a5,0x3
20404980:	97b6                	add	a5,a5,a3
20404982:	0807a423          	sw	zero,136(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:141 (discriminator 2)
            for (int i = 0; i < PLIC0_MAX_INTERRUPTS; i++) {
20404986:	fe842783          	lw	a5,-24(s0)
2040498a:	0785                	addi	a5,a5,1
2040498c:	fef42423          	sw	a5,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:141 (discriminator 1)
20404990:	fe842703          	lw	a4,-24(s0)
20404994:	3ff00793          	li	a5,1023
20404998:	f8e7d5e3          	bge	a5,a4,20404922 <__metal_driver_riscv_plic0_init+0x60>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:151 (discriminator 2)
                }
            }

            __metal_plic0_set_threshold(controller, parent, 0);
2040499c:	4601                	li	a2,0
2040499e:	fec42583          	lw	a1,-20(s0)
204049a2:	fcc42503          	lw	a0,-52(s0)
204049a6:	3165                	jal	2040464e <__metal_plic0_set_threshold>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:154 (discriminator 2)

            /* Register plic (ext) interrupt with with parent controller */
            intc->vtable->interrupt_register(intc, line, NULL, plic);
204049a8:	fdc42783          	lw	a5,-36(s0)
204049ac:	439c                	lw	a5,0(a5)
204049ae:	4fdc                	lw	a5,28(a5)
204049b0:	fe442683          	lw	a3,-28(s0)
204049b4:	4601                	li	a2,0
204049b6:	fd842583          	lw	a1,-40(s0)
204049ba:	fdc42503          	lw	a0,-36(s0)
204049be:	9782                	jalr	a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:156 (discriminator 2)
            /* Register plic handler for dispatching its device interrupts */
            intc->vtable->interrupt_register(intc, line, __metal_plic0_handler,
204049c0:	fdc42783          	lw	a5,-36(s0)
204049c4:	439c                	lw	a5,0(a5)
204049c6:	4fd8                	lw	a4,28(a5)
204049c8:	fe442683          	lw	a3,-28(s0)
204049cc:	204057b7          	lui	a5,0x20405
204049d0:	81e78613          	addi	a2,a5,-2018 # 2040481e <__metal_plic0_handler>
204049d4:	fd842583          	lw	a1,-40(s0)
204049d8:	fdc42503          	lw	a0,-36(s0)
204049dc:	9702                	jalr	a4
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:159 (discriminator 2)
                                             plic);
            /* Enable plic (ext) interrupt with with parent controller */
            intc->vtable->interrupt_enable(intc, line);
204049de:	fdc42783          	lw	a5,-36(s0)
204049e2:	439c                	lw	a5,0(a5)
204049e4:	53dc                	lw	a5,36(a5)
204049e6:	fd842583          	lw	a1,-40(s0)
204049ea:	fdc42503          	lw	a0,-36(s0)
204049ee:	9782                	jalr	a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:130 (discriminator 2)
        for (int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
204049f0:	fec42783          	lw	a5,-20(s0)
204049f4:	0785                	addi	a5,a5,1
204049f6:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:130 (discriminator 1)
204049fa:	fec42783          	lw	a5,-20(s0)
204049fe:	eef054e3          	blez	a5,204048e6 <__metal_driver_riscv_plic0_init+0x24>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:161
        }
        plic->init_done = 1;
20404a02:	fe442783          	lw	a5,-28(s0)
20404a06:	4705                	li	a4,1
20404a08:	c3d8                	sw	a4,4(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:163
    }
}
20404a0a:	0001                	nop
20404a0c:	50f2                	lw	ra,60(sp)
20404a0e:	5462                	lw	s0,56(sp)
20404a10:	6121                	addi	sp,sp,64
20404a12:	8082                	ret

20404a14 <__metal_driver_riscv_plic0_register>:
__metal_driver_riscv_plic0_register():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:167

int __metal_driver_riscv_plic0_register(struct metal_interrupt *controller,
                                        int id, metal_interrupt_handler_t isr,
                                        void *priv) {
20404a14:	7179                	addi	sp,sp,-48
20404a16:	d606                	sw	ra,44(sp)
20404a18:	d422                	sw	s0,40(sp)
20404a1a:	1800                	addi	s0,sp,48
20404a1c:	fca42e23          	sw	a0,-36(s0)
20404a20:	fcb42c23          	sw	a1,-40(s0)
20404a24:	fcc42a23          	sw	a2,-44(s0)
20404a28:	fcd42823          	sw	a3,-48(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:168
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20404a2c:	fdc42783          	lw	a5,-36(s0)
20404a30:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:170

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20404a34:	fdc42503          	lw	a0,-36(s0)
20404a38:	addff0ef          	jal	ra,20404514 <__metal_driver_sifive_plic0_num_interrupts>
20404a3c:	872a                	mv	a4,a0
20404a3e:	fd842783          	lw	a5,-40(s0)
20404a42:	00e7c463          	blt	a5,a4,20404a4a <__metal_driver_riscv_plic0_register+0x36>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:171
        return -1;
20404a46:	57fd                	li	a5,-1
20404a48:	a051                	j	20404acc <__metal_driver_riscv_plic0_register+0xb8>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:174
    }

    if (isr) {
20404a4a:	fd442783          	lw	a5,-44(s0)
20404a4e:	cf9d                	beqz	a5,20404a8c <__metal_driver_riscv_plic0_register+0x78>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:175
        __metal_driver_riscv_plic0_set_priority(controller, id, 2);
20404a50:	4609                	li	a2,2
20404a52:	fd842583          	lw	a1,-40(s0)
20404a56:	fdc42503          	lw	a0,-36(s0)
20404a5a:	c75ff0ef          	jal	ra,204046ce <__metal_driver_riscv_plic0_set_priority>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:176
        plic->metal_exint_table[id] = isr;
20404a5e:	fec42703          	lw	a4,-20(s0)
20404a62:	fd842783          	lw	a5,-40(s0)
20404a66:	078a                	slli	a5,a5,0x2
20404a68:	97ba                	add	a5,a5,a4
20404a6a:	fd442703          	lw	a4,-44(s0)
20404a6e:	c798                	sw	a4,8(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:177
        plic->metal_exdata_table[id].exint_data = priv;
20404a70:	fec42683          	lw	a3,-20(s0)
20404a74:	fd842703          	lw	a4,-40(s0)
20404a78:	87ba                	mv	a5,a4
20404a7a:	0786                	slli	a5,a5,0x1
20404a7c:	97ba                	add	a5,a5,a4
20404a7e:	078e                	slli	a5,a5,0x3
20404a80:	97b6                	add	a5,a5,a3
20404a82:	fd042703          	lw	a4,-48(s0)
20404a86:	08e7a423          	sw	a4,136(a5)
20404a8a:	a081                	j	20404aca <__metal_driver_riscv_plic0_register+0xb6>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:179
    } else {
        __metal_driver_riscv_plic0_set_priority(controller, id, 1);
20404a8c:	4605                	li	a2,1
20404a8e:	fd842583          	lw	a1,-40(s0)
20404a92:	fdc42503          	lw	a0,-36(s0)
20404a96:	c39ff0ef          	jal	ra,204046ce <__metal_driver_riscv_plic0_set_priority>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:180
        plic->metal_exint_table[id] = __metal_plic0_default_handler;
20404a9a:	fec42703          	lw	a4,-20(s0)
20404a9e:	fd842783          	lw	a5,-40(s0)
20404aa2:	078a                	slli	a5,a5,0x2
20404aa4:	97ba                	add	a5,a5,a4
20404aa6:	20405737          	lui	a4,0x20405
20404aaa:	80670713          	addi	a4,a4,-2042 # 20404806 <__metal_plic0_default_handler>
20404aae:	c798                	sw	a4,8(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:181
        plic->metal_exdata_table[id].sub_int = priv;
20404ab0:	fec42683          	lw	a3,-20(s0)
20404ab4:	fd842703          	lw	a4,-40(s0)
20404ab8:	87ba                	mv	a5,a4
20404aba:	0786                	slli	a5,a5,0x1
20404abc:	97ba                	add	a5,a5,a4
20404abe:	078e                	slli	a5,a5,0x3
20404ac0:	97b6                	add	a5,a5,a3
20404ac2:	fd042703          	lw	a4,-48(s0)
20404ac6:	08e7a223          	sw	a4,132(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:184
    }

    return 0;
20404aca:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:185
}
20404acc:	853e                	mv	a0,a5
20404ace:	50b2                	lw	ra,44(sp)
20404ad0:	5422                	lw	s0,40(sp)
20404ad2:	6145                	addi	sp,sp,48
20404ad4:	8082                	ret

20404ad6 <__metal_driver_riscv_plic0_enable>:
__metal_driver_riscv_plic0_enable():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:188

int __metal_driver_riscv_plic0_enable(struct metal_interrupt *controller,
                                      int id) {
20404ad6:	7179                	addi	sp,sp,-48
20404ad8:	d606                	sw	ra,44(sp)
20404ada:	d422                	sw	s0,40(sp)
20404adc:	1800                	addi	s0,sp,48
20404ade:	fca42e23          	sw	a0,-36(s0)
20404ae2:	fcb42c23          	sw	a1,-40(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:189
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20404ae6:	fdc42783          	lw	a5,-36(s0)
20404aea:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:191

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20404aee:	fdc42503          	lw	a0,-36(s0)
20404af2:	a23ff0ef          	jal	ra,20404514 <__metal_driver_sifive_plic0_num_interrupts>
20404af6:	872a                	mv	a4,a0
20404af8:	fd842783          	lw	a5,-40(s0)
20404afc:	00e7c463          	blt	a5,a4,20404b04 <__metal_driver_riscv_plic0_enable+0x2e>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:192
        return -1;
20404b00:	57fd                	li	a5,-1
20404b02:	a829                	j	20404b1c <__metal_driver_riscv_plic0_enable+0x46>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:195
    }

    __metal_plic0_enable(plic, __metal_myhart_id(), id, METAL_ENABLE);
20404b04:	8b6fe0ef          	jal	ra,20402bba <__metal_myhart_id>
20404b08:	87aa                	mv	a5,a0
20404b0a:	4685                	li	a3,1
20404b0c:	fd842603          	lw	a2,-40(s0)
20404b10:	85be                	mv	a1,a5
20404b12:	fec42503          	lw	a0,-20(s0)
20404b16:	c4fff0ef          	jal	ra,20404764 <__metal_plic0_enable>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:196
    return 0;
20404b1a:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:197
}
20404b1c:	853e                	mv	a0,a5
20404b1e:	50b2                	lw	ra,44(sp)
20404b20:	5422                	lw	s0,40(sp)
20404b22:	6145                	addi	sp,sp,48
20404b24:	8082                	ret

20404b26 <__metal_driver_riscv_plic0_disable>:
__metal_driver_riscv_plic0_disable():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:200

int __metal_driver_riscv_plic0_disable(struct metal_interrupt *controller,
                                       int id) {
20404b26:	7179                	addi	sp,sp,-48
20404b28:	d606                	sw	ra,44(sp)
20404b2a:	d422                	sw	s0,40(sp)
20404b2c:	1800                	addi	s0,sp,48
20404b2e:	fca42e23          	sw	a0,-36(s0)
20404b32:	fcb42c23          	sw	a1,-40(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:201
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20404b36:	fdc42783          	lw	a5,-36(s0)
20404b3a:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:203

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20404b3e:	fdc42503          	lw	a0,-36(s0)
20404b42:	9d3ff0ef          	jal	ra,20404514 <__metal_driver_sifive_plic0_num_interrupts>
20404b46:	872a                	mv	a4,a0
20404b48:	fd842783          	lw	a5,-40(s0)
20404b4c:	00e7c463          	blt	a5,a4,20404b54 <__metal_driver_riscv_plic0_disable+0x2e>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:204
        return -1;
20404b50:	57fd                	li	a5,-1
20404b52:	a829                	j	20404b6c <__metal_driver_riscv_plic0_disable+0x46>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:206
    }
    __metal_plic0_enable(plic, __metal_myhart_id(), id, METAL_DISABLE);
20404b54:	866fe0ef          	jal	ra,20402bba <__metal_myhart_id>
20404b58:	87aa                	mv	a5,a0
20404b5a:	4681                	li	a3,0
20404b5c:	fd842603          	lw	a2,-40(s0)
20404b60:	85be                	mv	a1,a5
20404b62:	fec42503          	lw	a0,-20(s0)
20404b66:	bffff0ef          	jal	ra,20404764 <__metal_plic0_enable>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:207
    return 0;
20404b6a:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:208
}
20404b6c:	853e                	mv	a0,a5
20404b6e:	50b2                	lw	ra,44(sp)
20404b70:	5422                	lw	s0,40(sp)
20404b72:	6145                	addi	sp,sp,48
20404b74:	8082                	ret

20404b76 <__metal_driver_riscv_plic0_set_threshold>:
__metal_driver_riscv_plic0_set_threshold():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:211

int __metal_driver_riscv_plic0_set_threshold(struct metal_interrupt *controller,
                                             unsigned int threshold) {
20404b76:	1101                	addi	sp,sp,-32
20404b78:	ce06                	sw	ra,28(sp)
20404b7a:	cc22                	sw	s0,24(sp)
20404b7c:	1000                	addi	s0,sp,32
20404b7e:	fea42623          	sw	a0,-20(s0)
20404b82:	feb42423          	sw	a1,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:212
    return __metal_plic0_set_threshold(controller, __metal_myhart_id(),
20404b86:	834fe0ef          	jal	ra,20402bba <__metal_myhart_id>
20404b8a:	87aa                	mv	a5,a0
20404b8c:	fe842603          	lw	a2,-24(s0)
20404b90:	85be                	mv	a1,a5
20404b92:	fec42503          	lw	a0,-20(s0)
20404b96:	ab9ff0ef          	jal	ra,2040464e <__metal_plic0_set_threshold>
20404b9a:	87aa                	mv	a5,a0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:214
                                       threshold);
}
20404b9c:	853e                	mv	a0,a5
20404b9e:	40f2                	lw	ra,28(sp)
20404ba0:	4462                	lw	s0,24(sp)
20404ba2:	6105                	addi	sp,sp,32
20404ba4:	8082                	ret

20404ba6 <__metal_driver_riscv_plic0_get_threshold>:
__metal_driver_riscv_plic0_get_threshold():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:217

unsigned int
__metal_driver_riscv_plic0_get_threshold(struct metal_interrupt *controller) {
20404ba6:	1101                	addi	sp,sp,-32
20404ba8:	ce06                	sw	ra,28(sp)
20404baa:	cc22                	sw	s0,24(sp)
20404bac:	1000                	addi	s0,sp,32
20404bae:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:218
    return __metal_plic0_get_threshold(controller, __metal_myhart_id());
20404bb2:	808fe0ef          	jal	ra,20402bba <__metal_myhart_id>
20404bb6:	87aa                	mv	a5,a0
20404bb8:	85be                	mv	a1,a5
20404bba:	fec42503          	lw	a0,-20(s0)
20404bbe:	ad7ff0ef          	jal	ra,20404694 <__metal_plic0_get_threshold>
20404bc2:	87aa                	mv	a5,a0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:219
}
20404bc4:	853e                	mv	a0,a5
20404bc6:	40f2                	lw	ra,28(sp)
20404bc8:	4462                	lw	s0,24(sp)
20404bca:	6105                	addi	sp,sp,32
20404bcc:	8082                	ret

20404bce <__metal_driver_riscv_plic0_affinity_enable>:
__metal_driver_riscv_plic0_affinity_enable():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:223

metal_affinity
__metal_driver_riscv_plic0_affinity_enable(struct metal_interrupt *controller,
                                           metal_affinity bitmask, int id) {
20404bce:	7179                	addi	sp,sp,-48
20404bd0:	d606                	sw	ra,44(sp)
20404bd2:	d422                	sw	s0,40(sp)
20404bd4:	1800                	addi	s0,sp,48
20404bd6:	fca42e23          	sw	a0,-36(s0)
20404bda:	fcb42c23          	sw	a1,-40(s0)
20404bde:	fcc42a23          	sw	a2,-44(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:224
    metal_affinity ret = {0};
20404be2:	fe042223          	sw	zero,-28(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:227
    int context;

    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20404be6:	fdc42783          	lw	a5,-36(s0)
20404bea:	fef42423          	sw	a5,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:229

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20404bee:	fdc42503          	lw	a0,-36(s0)
20404bf2:	923ff0ef          	jal	ra,20404514 <__metal_driver_sifive_plic0_num_interrupts>
20404bf6:	872a                	mv	a4,a0
20404bf8:	fd442783          	lw	a5,-44(s0)
20404bfc:	00e7c863          	blt	a5,a4,20404c0c <__metal_driver_riscv_plic0_affinity_enable+0x3e>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:230
        metal_affinity_set_val(ret, -1);
20404c00:	57fd                	li	a5,-1
20404c02:	fef42223          	sw	a5,-28(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:231
        return ret;
20404c06:	fe442783          	lw	a5,-28(s0)
20404c0a:	a899                	j	20404c60 <__metal_driver_riscv_plic0_affinity_enable+0x92>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:234
    }

    for_each_metal_affinity(context, bitmask) {
20404c0c:	fe042623          	sw	zero,-20(s0)
20404c10:	a099                	j	20404c56 <__metal_driver_riscv_plic0_affinity_enable+0x88>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:235
        if (context != 0)
20404c12:	fec42783          	lw	a5,-20(s0)
20404c16:	c795                	beqz	a5,20404c42 <__metal_driver_riscv_plic0_affinity_enable+0x74>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:236
            metal_affinity_set_bit(
20404c18:	4685                	li	a3,1
20404c1a:	fd442603          	lw	a2,-44(s0)
20404c1e:	fec42583          	lw	a1,-20(s0)
20404c22:	fe842503          	lw	a0,-24(s0)
20404c26:	b3fff0ef          	jal	ra,20404764 <__metal_plic0_enable>
20404c2a:	87aa                	mv	a5,a0
20404c2c:	0017f713          	andi	a4,a5,1
20404c30:	fec42783          	lw	a5,-20(s0)
20404c34:	00f71733          	sll	a4,a4,a5
20404c38:	fe442783          	lw	a5,-28(s0)
20404c3c:	8fd9                	or	a5,a5,a4
20404c3e:	fef42223          	sw	a5,-28(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:234 (discriminator 2)
    for_each_metal_affinity(context, bitmask) {
20404c42:	fec42783          	lw	a5,-20(s0)
20404c46:	0785                	addi	a5,a5,1
20404c48:	fef42623          	sw	a5,-20(s0)
20404c4c:	fd842783          	lw	a5,-40(s0)
20404c50:	8385                	srli	a5,a5,0x1
20404c52:	fcf42c23          	sw	a5,-40(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:234 (discriminator 1)
20404c56:	fd842783          	lw	a5,-40(s0)
20404c5a:	ffc5                	bnez	a5,20404c12 <__metal_driver_riscv_plic0_affinity_enable+0x44>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:241
                ret, context,
                __metal_plic0_enable(plic, context, id, METAL_ENABLE));
    }

    return ret;
20404c5c:	fe442783          	lw	a5,-28(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:242 (discriminator 1)
}
20404c60:	853e                	mv	a0,a5
20404c62:	50b2                	lw	ra,44(sp)
20404c64:	5422                	lw	s0,40(sp)
20404c66:	6145                	addi	sp,sp,48
20404c68:	8082                	ret

20404c6a <__metal_driver_riscv_plic0_affinity_disable>:
__metal_driver_riscv_plic0_affinity_disable():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:246

metal_affinity
__metal_driver_riscv_plic0_affinity_disable(struct metal_interrupt *controller,
                                            metal_affinity bitmask, int id) {
20404c6a:	7179                	addi	sp,sp,-48
20404c6c:	d606                	sw	ra,44(sp)
20404c6e:	d422                	sw	s0,40(sp)
20404c70:	1800                	addi	s0,sp,48
20404c72:	fca42e23          	sw	a0,-36(s0)
20404c76:	fcb42c23          	sw	a1,-40(s0)
20404c7a:	fcc42a23          	sw	a2,-44(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:247
    metal_affinity ret = {0};
20404c7e:	fe042223          	sw	zero,-28(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:250
    int context;

    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20404c82:	fdc42783          	lw	a5,-36(s0)
20404c86:	fef42423          	sw	a5,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:252

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20404c8a:	fdc42503          	lw	a0,-36(s0)
20404c8e:	887ff0ef          	jal	ra,20404514 <__metal_driver_sifive_plic0_num_interrupts>
20404c92:	872a                	mv	a4,a0
20404c94:	fd442783          	lw	a5,-44(s0)
20404c98:	00e7c863          	blt	a5,a4,20404ca8 <__metal_driver_riscv_plic0_affinity_disable+0x3e>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:253
        metal_affinity_set_val(ret, -1);
20404c9c:	57fd                	li	a5,-1
20404c9e:	fef42223          	sw	a5,-28(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:254
        return ret;
20404ca2:	fe442783          	lw	a5,-28(s0)
20404ca6:	a899                	j	20404cfc <__metal_driver_riscv_plic0_affinity_disable+0x92>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:257
    }

    for_each_metal_affinity(context, bitmask) {
20404ca8:	fe042623          	sw	zero,-20(s0)
20404cac:	a099                	j	20404cf2 <__metal_driver_riscv_plic0_affinity_disable+0x88>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:258
        if (context != 0)
20404cae:	fec42783          	lw	a5,-20(s0)
20404cb2:	c795                	beqz	a5,20404cde <__metal_driver_riscv_plic0_affinity_disable+0x74>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:259
            metal_affinity_set_bit(
20404cb4:	4681                	li	a3,0
20404cb6:	fd442603          	lw	a2,-44(s0)
20404cba:	fec42583          	lw	a1,-20(s0)
20404cbe:	fe842503          	lw	a0,-24(s0)
20404cc2:	aa3ff0ef          	jal	ra,20404764 <__metal_plic0_enable>
20404cc6:	87aa                	mv	a5,a0
20404cc8:	0017f713          	andi	a4,a5,1
20404ccc:	fec42783          	lw	a5,-20(s0)
20404cd0:	00f71733          	sll	a4,a4,a5
20404cd4:	fe442783          	lw	a5,-28(s0)
20404cd8:	8fd9                	or	a5,a5,a4
20404cda:	fef42223          	sw	a5,-28(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:257 (discriminator 2)
    for_each_metal_affinity(context, bitmask) {
20404cde:	fec42783          	lw	a5,-20(s0)
20404ce2:	0785                	addi	a5,a5,1
20404ce4:	fef42623          	sw	a5,-20(s0)
20404ce8:	fd842783          	lw	a5,-40(s0)
20404cec:	8385                	srli	a5,a5,0x1
20404cee:	fcf42c23          	sw	a5,-40(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:257 (discriminator 1)
20404cf2:	fd842783          	lw	a5,-40(s0)
20404cf6:	ffc5                	bnez	a5,20404cae <__metal_driver_riscv_plic0_affinity_disable+0x44>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:264
                ret, context,
                __metal_plic0_enable(plic, context, id, METAL_DISABLE));
    }

    return ret;
20404cf8:	fe442783          	lw	a5,-28(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:265 (discriminator 1)
}
20404cfc:	853e                	mv	a0,a5
20404cfe:	50b2                	lw	ra,44(sp)
20404d00:	5422                	lw	s0,40(sp)
20404d02:	6145                	addi	sp,sp,48
20404d04:	8082                	ret

20404d06 <__metal_driver_riscv_plic0_affinity_set_threshold>:
__metal_driver_riscv_plic0_affinity_set_threshold():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:269

metal_affinity __metal_driver_riscv_plic0_affinity_set_threshold(
    struct metal_interrupt *controller, metal_affinity bitmask,
    unsigned int threshold) {
20404d06:	7179                	addi	sp,sp,-48
20404d08:	d606                	sw	ra,44(sp)
20404d0a:	d422                	sw	s0,40(sp)
20404d0c:	1800                	addi	s0,sp,48
20404d0e:	fca42e23          	sw	a0,-36(s0)
20404d12:	fcb42c23          	sw	a1,-40(s0)
20404d16:	fcc42a23          	sw	a2,-44(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:270
    metal_affinity ret = {0};
20404d1a:	fe042423          	sw	zero,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:273
    int context;

    for_each_metal_affinity(context, bitmask) {
20404d1e:	fe042623          	sw	zero,-20(s0)
20404d22:	a091                	j	20404d66 <__metal_driver_riscv_plic0_affinity_set_threshold+0x60>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:274
        if (context != 0)
20404d24:	fec42783          	lw	a5,-20(s0)
20404d28:	c78d                	beqz	a5,20404d52 <__metal_driver_riscv_plic0_affinity_set_threshold+0x4c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:275
            metal_affinity_set_bit(
20404d2a:	fd442603          	lw	a2,-44(s0)
20404d2e:	fec42583          	lw	a1,-20(s0)
20404d32:	fdc42503          	lw	a0,-36(s0)
20404d36:	919ff0ef          	jal	ra,2040464e <__metal_plic0_set_threshold>
20404d3a:	87aa                	mv	a5,a0
20404d3c:	0017f713          	andi	a4,a5,1
20404d40:	fec42783          	lw	a5,-20(s0)
20404d44:	00f71733          	sll	a4,a4,a5
20404d48:	fe842783          	lw	a5,-24(s0)
20404d4c:	8fd9                	or	a5,a5,a4
20404d4e:	fef42423          	sw	a5,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:273 (discriminator 2)
    for_each_metal_affinity(context, bitmask) {
20404d52:	fec42783          	lw	a5,-20(s0)
20404d56:	0785                	addi	a5,a5,1
20404d58:	fef42623          	sw	a5,-20(s0)
20404d5c:	fd842783          	lw	a5,-40(s0)
20404d60:	8385                	srli	a5,a5,0x1
20404d62:	fcf42c23          	sw	a5,-40(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:273 (discriminator 1)
20404d66:	fd842783          	lw	a5,-40(s0)
20404d6a:	ffcd                	bnez	a5,20404d24 <__metal_driver_riscv_plic0_affinity_set_threshold+0x1e>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:280
                ret, context,
                __metal_plic0_set_threshold(controller, context, threshold));
    }

    return ret;
20404d6c:	fe842783          	lw	a5,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:281
}
20404d70:	853e                	mv	a0,a5
20404d72:	50b2                	lw	ra,44(sp)
20404d74:	5422                	lw	s0,40(sp)
20404d76:	6145                	addi	sp,sp,48
20404d78:	8082                	ret

20404d7a <__metal_driver_riscv_plic0_affinity_get_threshold>:
__metal_driver_riscv_plic0_affinity_get_threshold():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:284

unsigned int __metal_driver_riscv_plic0_affinity_get_threshold(
    struct metal_interrupt *controller, int context_id) {
20404d7a:	1101                	addi	sp,sp,-32
20404d7c:	ce06                	sw	ra,28(sp)
20404d7e:	cc22                	sw	s0,24(sp)
20404d80:	1000                	addi	s0,sp,32
20404d82:	fea42623          	sw	a0,-20(s0)
20404d86:	feb42423          	sw	a1,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:285
    __metal_plic0_get_threshold(controller, context_id);
20404d8a:	fe842583          	lw	a1,-24(s0)
20404d8e:	fec42503          	lw	a0,-20(s0)
20404d92:	903ff0ef          	jal	ra,20404694 <__metal_plic0_get_threshold>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:286
    return 0;
20404d96:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/riscv_plic0.c:287
}
20404d98:	853e                	mv	a0,a5
20404d9a:	40f2                	lw	ra,28(sp)
20404d9c:	4462                	lw	s0,24(sp)
20404d9e:	6105                	addi	sp,sp,32
20404da0:	8082                	ret

20404da2 <__metal_driver_sifive_fe310_g000_hfrosc_ref>:
__metal_driver_sifive_fe310_g000_hfrosc_ref():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1037



/* --------------------- sifive_fe310_g000_hfrosc ------------ */
static __inline__ struct metal_clock * __metal_driver_sifive_fe310_g000_hfrosc_ref(const struct metal_clock *clock)
{
20404da2:	1101                	addi	sp,sp,-32
20404da4:	ce22                	sw	s0,28(sp)
20404da6:	1000                	addi	s0,sp,32
20404da8:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1038
		return (struct metal_clock *)&__metal_dt_clock_2.clock;
20404dac:	800007b7          	lui	a5,0x80000
20404db0:	6fc78793          	addi	a5,a5,1788 # 800006fc <metal_segment_heap_target_end+0xffffebfc>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1039
}
20404db4:	853e                	mv	a0,a5
20404db6:	4472                	lw	s0,28(sp)
20404db8:	6105                	addi	sp,sp,32
20404dba:	8082                	ret

20404dbc <__metal_driver_sifive_fe310_g000_hfrosc_config_base>:
__metal_driver_sifive_fe310_g000_hfrosc_config_base():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1042

static __inline__ struct __metal_driver_sifive_fe310_g000_prci * __metal_driver_sifive_fe310_g000_hfrosc_config_base(const struct metal_clock *clock)
{
20404dbc:	1101                	addi	sp,sp,-32
20404dbe:	ce22                	sw	s0,28(sp)
20404dc0:	1000                	addi	s0,sp,32
20404dc2:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1043
		return (struct __metal_driver_sifive_fe310_g000_prci *)&__metal_dt_prci_10008000;
20404dc6:	82418793          	addi	a5,gp,-2012 # 80000e54 <__metal_dt_prci_10008000>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1044
}
20404dca:	853e                	mv	a0,a5
20404dcc:	4472                	lw	s0,28(sp)
20404dce:	6105                	addi	sp,sp,32
20404dd0:	8082                	ret

20404dd2 <__metal_driver_sifive_fe310_g000_hfrosc_config_offset>:
__metal_driver_sifive_fe310_g000_hfrosc_config_offset():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1052
{
		return &__metal_driver_vtable_sifive_fe310_g000_prci;
}

static __inline__ long __metal_driver_sifive_fe310_g000_hfrosc_config_offset(const struct metal_clock *clock)
{
20404dd2:	1101                	addi	sp,sp,-32
20404dd4:	ce22                	sw	s0,28(sp)
20404dd6:	1000                	addi	s0,sp,32
20404dd8:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1053
		return METAL_SIFIVE_FE310_G000_PRCI_HFROSCCFG;
20404ddc:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1054
}
20404dde:	853e                	mv	a0,a5
20404de0:	4472                	lw	s0,28(sp)
20404de2:	6105                	addi	sp,sp,32
20404de4:	8082                	ret

20404de6 <__metal_driver_sifive_fe310_g000_prci_vtable>:
__metal_driver_sifive_fe310_g000_prci_vtable():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1169
{
		return METAL_SIFIVE_FE310_G000_PRCI_10008000_SIZE;
}

static __inline__ const struct __metal_driver_vtable_sifive_fe310_g000_prci * __metal_driver_sifive_fe310_g000_prci_vtable( )
{
20404de6:	1141                	addi	sp,sp,-16
20404de8:	c622                	sw	s0,12(sp)
20404dea:	0800                	addi	s0,sp,16
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1170
		return &__metal_driver_vtable_sifive_fe310_g000_prci;
20404dec:	204017b7          	lui	a5,0x20401
20404df0:	f3c78793          	addi	a5,a5,-196 # 20400f3c <__metal_driver_vtable_sifive_fe310_g000_prci>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1171
}
20404df4:	853e                	mv	a0,a5
20404df6:	4432                	lw	s0,12(sp)
20404df8:	0141                	addi	sp,sp,16
20404dfa:	8082                	ret

20404dfc <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz>:
__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:17
#define CONFIG_TRIM 0x001F0000UL
#define CONFIG_ENABLE 0x40000000UL
#define CONFIG_READY 0x80000000UL

long __metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz(
    const struct metal_clock *clock) {
20404dfc:	7139                	addi	sp,sp,-64
20404dfe:	de06                	sw	ra,60(sp)
20404e00:	dc22                	sw	s0,56(sp)
20404e02:	0080                	addi	s0,sp,64
20404e04:	fca42623          	sw	a0,-52(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:19
    struct metal_clock *ref =
        __metal_driver_sifive_fe310_g000_hfrosc_ref(clock);
20404e08:	fcc42503          	lw	a0,-52(s0)
20404e0c:	3f59                	jal	20404da2 <__metal_driver_sifive_fe310_g000_hfrosc_ref>
20404e0e:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:21
    long config_offset =
        __metal_driver_sifive_fe310_g000_hfrosc_config_offset(clock);
20404e12:	fcc42503          	lw	a0,-52(s0)
20404e16:	3f75                	jal	20404dd2 <__metal_driver_sifive_fe310_g000_hfrosc_config_offset>
20404e18:	fea42423          	sw	a0,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:23
    struct __metal_driver_sifive_fe310_g000_prci *config_base =
        __metal_driver_sifive_fe310_g000_hfrosc_config_base(clock);
20404e1c:	fcc42503          	lw	a0,-52(s0)
20404e20:	3f71                	jal	20404dbc <__metal_driver_sifive_fe310_g000_hfrosc_config_base>
20404e22:	fea42223          	sw	a0,-28(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:25
    const struct __metal_driver_vtable_sifive_fe310_g000_prci *vtable =
        __metal_driver_sifive_fe310_g000_prci_vtable();
20404e26:	37c1                	jal	20404de6 <__metal_driver_sifive_fe310_g000_prci_vtable>
20404e28:	fea42023          	sw	a0,-32(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:26
    long cfg = vtable->get_reg(config_base, config_offset);
20404e2c:	fe042783          	lw	a5,-32(s0)
20404e30:	439c                	lw	a5,0(a5)
20404e32:	fe842583          	lw	a1,-24(s0)
20404e36:	fe442503          	lw	a0,-28(s0)
20404e3a:	9782                	jalr	a5
20404e3c:	fca42e23          	sw	a0,-36(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:28

    if ((cfg & CONFIG_ENABLE) == 0)
20404e40:	fdc42703          	lw	a4,-36(s0)
20404e44:	400007b7          	lui	a5,0x40000
20404e48:	8ff9                	and	a5,a5,a4
20404e4a:	e399                	bnez	a5,20404e50 <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz+0x54>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:29
        return -1;
20404e4c:	57fd                	li	a5,-1
20404e4e:	a025                	j	20404e76 <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz+0x7a>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:30
    if ((cfg & CONFIG_READY) == 0)
20404e50:	fdc42783          	lw	a5,-36(s0)
20404e54:	0007c463          	bltz	a5,20404e5c <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz+0x60>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:31
        return -1;
20404e58:	57fd                	li	a5,-1
20404e5a:	a831                	j	20404e76 <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz+0x7a>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:32
    return metal_clock_get_rate_hz(ref) / ((cfg & CONFIG_DIVIDER) + 1);
20404e5c:	fec42503          	lw	a0,-20(s0)
20404e60:	0e3010ef          	jal	ra,20406742 <metal_clock_get_rate_hz>
20404e64:	87aa                	mv	a5,a0
20404e66:	873e                	mv	a4,a5
20404e68:	fdc42783          	lw	a5,-36(s0)
20404e6c:	03f7f793          	andi	a5,a5,63
20404e70:	0785                	addi	a5,a5,1
20404e72:	02f757b3          	divu	a5,a4,a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:33
}
20404e76:	853e                	mv	a0,a5
20404e78:	50f2                	lw	ra,60(sp)
20404e7a:	5462                	lw	s0,56(sp)
20404e7c:	6121                	addi	sp,sp,64
20404e7e:	8082                	ret

20404e80 <__metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz>:
__metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:36

long __metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz(
    struct metal_clock *clock, long rate) {
20404e80:	1101                	addi	sp,sp,-32
20404e82:	ce06                	sw	ra,28(sp)
20404e84:	cc22                	sw	s0,24(sp)
20404e86:	1000                	addi	s0,sp,32
20404e88:	fea42623          	sw	a0,-20(s0)
20404e8c:	feb42423          	sw	a1,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:37
    return __metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz(clock);
20404e90:	fec42503          	lw	a0,-20(s0)
20404e94:	37a5                	jal	20404dfc <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz>
20404e96:	87aa                	mv	a5,a0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:38
}
20404e98:	853e                	mv	a0,a5
20404e9a:	40f2                	lw	ra,28(sp)
20404e9c:	4462                	lw	s0,24(sp)
20404e9e:	6105                	addi	sp,sp,32
20404ea0:	8082                	ret

20404ea2 <__metal_driver_sifive_fe310_g000_hfxosc_ref>:
__metal_driver_sifive_fe310_g000_hfxosc_ref():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1060
{
20404ea2:	1101                	addi	sp,sp,-32
20404ea4:	ce22                	sw	s0,28(sp)
20404ea6:	1000                	addi	s0,sp,32
20404ea8:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1061
		return (struct metal_clock *)&__metal_dt_clock_0.clock;
20404eac:	800007b7          	lui	a5,0x80000
20404eb0:	6f078793          	addi	a5,a5,1776 # 800006f0 <metal_segment_heap_target_end+0xffffebf0>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1062
}
20404eb4:	853e                	mv	a0,a5
20404eb6:	4472                	lw	s0,28(sp)
20404eb8:	6105                	addi	sp,sp,32
20404eba:	8082                	ret

20404ebc <__metal_driver_sifive_fe310_g000_hfxosc_config_base>:
__metal_driver_sifive_fe310_g000_hfxosc_config_base():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1065
{
20404ebc:	1101                	addi	sp,sp,-32
20404ebe:	ce22                	sw	s0,28(sp)
20404ec0:	1000                	addi	s0,sp,32
20404ec2:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1066
		return (struct __metal_driver_sifive_fe310_g000_prci *)&__metal_dt_prci_10008000;
20404ec6:	82418793          	addi	a5,gp,-2012 # 80000e54 <__metal_dt_prci_10008000>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1067
}
20404eca:	853e                	mv	a0,a5
20404ecc:	4472                	lw	s0,28(sp)
20404ece:	6105                	addi	sp,sp,32
20404ed0:	8082                	ret

20404ed2 <__metal_driver_sifive_fe310_g000_hfxosc_config_offset>:
__metal_driver_sifive_fe310_g000_hfxosc_config_offset():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1070
{
20404ed2:	1101                	addi	sp,sp,-32
20404ed4:	ce22                	sw	s0,28(sp)
20404ed6:	1000                	addi	s0,sp,32
20404ed8:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1071
		return METAL_SIFIVE_FE310_G000_PRCI_HFXOSCCFG;
20404edc:	4791                	li	a5,4
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1072
}
20404ede:	853e                	mv	a0,a5
20404ee0:	4472                	lw	s0,28(sp)
20404ee2:	6105                	addi	sp,sp,32
20404ee4:	8082                	ret

20404ee6 <__metal_driver_sifive_fe310_g000_prci_vtable>:
__metal_driver_sifive_fe310_g000_prci_vtable():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1169
{
20404ee6:	1141                	addi	sp,sp,-16
20404ee8:	c622                	sw	s0,12(sp)
20404eea:	0800                	addi	s0,sp,16
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1170
		return &__metal_driver_vtable_sifive_fe310_g000_prci;
20404eec:	204017b7          	lui	a5,0x20401
20404ef0:	f3c78793          	addi	a5,a5,-196 # 20400f3c <__metal_driver_vtable_sifive_fe310_g000_prci>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1171
}
20404ef4:	853e                	mv	a0,a5
20404ef6:	4432                	lw	s0,12(sp)
20404ef8:	0141                	addi	sp,sp,16
20404efa:	8082                	ret

20404efc <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz>:
__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:15

#define CONFIG_ENABLE 0x40000000UL
#define CONFIG_READY 0x80000000UL

long __metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz(
    const struct metal_clock *clock) {
20404efc:	7139                	addi	sp,sp,-64
20404efe:	de06                	sw	ra,60(sp)
20404f00:	dc22                	sw	s0,56(sp)
20404f02:	0080                	addi	s0,sp,64
20404f04:	fca42623          	sw	a0,-52(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:17
    struct metal_clock *ref =
        __metal_driver_sifive_fe310_g000_hfxosc_ref(clock);
20404f08:	fcc42503          	lw	a0,-52(s0)
20404f0c:	3f59                	jal	20404ea2 <__metal_driver_sifive_fe310_g000_hfxosc_ref>
20404f0e:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:19
    long config_offset =
        __metal_driver_sifive_fe310_g000_hfxosc_config_offset(clock);
20404f12:	fcc42503          	lw	a0,-52(s0)
20404f16:	3f75                	jal	20404ed2 <__metal_driver_sifive_fe310_g000_hfxosc_config_offset>
20404f18:	fea42423          	sw	a0,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:21
    struct __metal_driver_sifive_fe310_g000_prci *config_base =
        __metal_driver_sifive_fe310_g000_hfxosc_config_base(clock);
20404f1c:	fcc42503          	lw	a0,-52(s0)
20404f20:	3f71                	jal	20404ebc <__metal_driver_sifive_fe310_g000_hfxosc_config_base>
20404f22:	fea42223          	sw	a0,-28(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:23
    const struct __metal_driver_vtable_sifive_fe310_g000_prci *vtable =
        __metal_driver_sifive_fe310_g000_prci_vtable();
20404f26:	37c1                	jal	20404ee6 <__metal_driver_sifive_fe310_g000_prci_vtable>
20404f28:	fea42023          	sw	a0,-32(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:24
    long cfg = vtable->get_reg(config_base, config_offset);
20404f2c:	fe042783          	lw	a5,-32(s0)
20404f30:	439c                	lw	a5,0(a5)
20404f32:	fe842583          	lw	a1,-24(s0)
20404f36:	fe442503          	lw	a0,-28(s0)
20404f3a:	9782                	jalr	a5
20404f3c:	fca42e23          	sw	a0,-36(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:26

    if ((cfg & CONFIG_ENABLE) == 0)
20404f40:	fdc42703          	lw	a4,-36(s0)
20404f44:	400007b7          	lui	a5,0x40000
20404f48:	8ff9                	and	a5,a5,a4
20404f4a:	e399                	bnez	a5,20404f50 <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz+0x54>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:27
        return -1;
20404f4c:	57fd                	li	a5,-1
20404f4e:	a821                	j	20404f66 <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz+0x6a>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:28
    if ((cfg & CONFIG_READY) == 0)
20404f50:	fdc42783          	lw	a5,-36(s0)
20404f54:	0007c463          	bltz	a5,20404f5c <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz+0x60>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:29
        return -1;
20404f58:	57fd                	li	a5,-1
20404f5a:	a031                	j	20404f66 <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz+0x6a>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:30
    return metal_clock_get_rate_hz(ref);
20404f5c:	fec42503          	lw	a0,-20(s0)
20404f60:	7e2010ef          	jal	ra,20406742 <metal_clock_get_rate_hz>
20404f64:	87aa                	mv	a5,a0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:31
}
20404f66:	853e                	mv	a0,a5
20404f68:	50f2                	lw	ra,60(sp)
20404f6a:	5462                	lw	s0,56(sp)
20404f6c:	6121                	addi	sp,sp,64
20404f6e:	8082                	ret

20404f70 <__metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz>:
__metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:34

long __metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz(
    struct metal_clock *clock, long rate) {
20404f70:	1101                	addi	sp,sp,-32
20404f72:	ce06                	sw	ra,28(sp)
20404f74:	cc22                	sw	s0,24(sp)
20404f76:	1000                	addi	s0,sp,32
20404f78:	fea42623          	sw	a0,-20(s0)
20404f7c:	feb42423          	sw	a1,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:35
    return __metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz(clock);
20404f80:	fec42503          	lw	a0,-20(s0)
20404f84:	3fa5                	jal	20404efc <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz>
20404f86:	87aa                	mv	a5,a0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:36
}
20404f88:	853e                	mv	a0,a5
20404f8a:	40f2                	lw	ra,28(sp)
20404f8c:	4462                	lw	s0,24(sp)
20404f8e:	6105                	addi	sp,sp,32
20404f90:	8082                	ret

20404f92 <__metal_driver_sifive_fe310_g000_pll_pllsel0>:
__metal_driver_sifive_fe310_g000_pll_pllsel0():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1121
{
20404f92:	1101                	addi	sp,sp,-32
20404f94:	ce22                	sw	s0,28(sp)
20404f96:	1000                	addi	s0,sp,32
20404f98:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1122
		return (struct metal_clock *)&__metal_dt_clock_3.clock;
20404f9c:	800017b7          	lui	a5,0x80001
20404fa0:	e0878793          	addi	a5,a5,-504 # 80000e08 <metal_segment_heap_target_end+0xfffff308>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1123
}
20404fa4:	853e                	mv	a0,a5
20404fa6:	4472                	lw	s0,28(sp)
20404fa8:	6105                	addi	sp,sp,32
20404faa:	8082                	ret

20404fac <__metal_driver_sifive_fe310_g000_pll_pllref>:
__metal_driver_sifive_fe310_g000_pll_pllref():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1126
{
20404fac:	1101                	addi	sp,sp,-32
20404fae:	ce22                	sw	s0,28(sp)
20404fb0:	1000                	addi	s0,sp,32
20404fb2:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1127
		return (struct metal_clock *)&__metal_dt_clock_1.clock;
20404fb6:	800017b7          	lui	a5,0x80001
20404fba:	e1478793          	addi	a5,a5,-492 # 80000e14 <metal_segment_heap_target_end+0xfffff314>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1128
}
20404fbe:	853e                	mv	a0,a5
20404fc0:	4472                	lw	s0,28(sp)
20404fc2:	6105                	addi	sp,sp,32
20404fc4:	8082                	ret

20404fc6 <__metal_driver_sifive_fe310_g000_pll_divider_base>:
__metal_driver_sifive_fe310_g000_pll_divider_base():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1131
{
20404fc6:	1101                	addi	sp,sp,-32
20404fc8:	ce22                	sw	s0,28(sp)
20404fca:	1000                	addi	s0,sp,32
20404fcc:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1132
		return (struct __metal_driver_sifive_fe310_g000_prci *)&__metal_dt_prci_10008000;
20404fd0:	82418793          	addi	a5,gp,-2012 # 80000e54 <__metal_dt_prci_10008000>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1133
}
20404fd4:	853e                	mv	a0,a5
20404fd6:	4472                	lw	s0,28(sp)
20404fd8:	6105                	addi	sp,sp,32
20404fda:	8082                	ret

20404fdc <__metal_driver_sifive_fe310_g000_pll_divider_offset>:
__metal_driver_sifive_fe310_g000_pll_divider_offset():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1136
{
20404fdc:	1101                	addi	sp,sp,-32
20404fde:	ce22                	sw	s0,28(sp)
20404fe0:	1000                	addi	s0,sp,32
20404fe2:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1137
		return METAL_SIFIVE_FE310_G000_PRCI_PLLOUTDIV;
20404fe6:	47b1                	li	a5,12
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1138
}
20404fe8:	853e                	mv	a0,a5
20404fea:	4472                	lw	s0,28(sp)
20404fec:	6105                	addi	sp,sp,32
20404fee:	8082                	ret

20404ff0 <__metal_driver_sifive_fe310_g000_pll_config_base>:
__metal_driver_sifive_fe310_g000_pll_config_base():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1141
{
20404ff0:	1141                	addi	sp,sp,-16
20404ff2:	c622                	sw	s0,12(sp)
20404ff4:	0800                	addi	s0,sp,16
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1142
		return (struct __metal_driver_sifive_fe310_g000_prci *)&__metal_dt_prci_10008000;
20404ff6:	82418793          	addi	a5,gp,-2012 # 80000e54 <__metal_dt_prci_10008000>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1143
}
20404ffa:	853e                	mv	a0,a5
20404ffc:	4432                	lw	s0,12(sp)
20404ffe:	0141                	addi	sp,sp,16
20405000:	8082                	ret

20405002 <__metal_driver_sifive_fe310_g000_pll_config_offset>:
__metal_driver_sifive_fe310_g000_pll_config_offset():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1146
{
20405002:	1141                	addi	sp,sp,-16
20405004:	c622                	sw	s0,12(sp)
20405006:	0800                	addi	s0,sp,16
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1147
		return METAL_SIFIVE_FE310_G000_PRCI_PLLCFG;
20405008:	47a1                	li	a5,8
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1148
}
2040500a:	853e                	mv	a0,a5
2040500c:	4432                	lw	s0,12(sp)
2040500e:	0141                	addi	sp,sp,16
20405010:	8082                	ret

20405012 <__metal_driver_sifive_fe310_g000_pll_init_rate>:
__metal_driver_sifive_fe310_g000_pll_init_rate():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1151
{
20405012:	1141                	addi	sp,sp,-16
20405014:	c622                	sw	s0,12(sp)
20405016:	0800                	addi	s0,sp,16
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1152
		return 16000000;
20405018:	00f427b7          	lui	a5,0xf42
2040501c:	40078793          	addi	a5,a5,1024 # f42400 <__heap_size+0xf41c00>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1153
}
20405020:	853e                	mv	a0,a5
20405022:	4432                	lw	s0,12(sp)
20405024:	0141                	addi	sp,sp,16
20405026:	8082                	ret

20405028 <__metal_driver_sifive_fe310_g000_prci_base>:
__metal_driver_sifive_fe310_g000_prci_base():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1159
{
20405028:	1141                	addi	sp,sp,-16
2040502a:	c622                	sw	s0,12(sp)
2040502c:	0800                	addi	s0,sp,16
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1160
		return METAL_SIFIVE_FE310_G000_PRCI_10008000_BASE_ADDRESS;
2040502e:	100087b7          	lui	a5,0x10008
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1161
}
20405032:	853e                	mv	a0,a5
20405034:	4432                	lw	s0,12(sp)
20405036:	0141                	addi	sp,sp,16
20405038:	8082                	ret

2040503a <__metal_driver_sifive_fe310_g000_prci_vtable>:
__metal_driver_sifive_fe310_g000_prci_vtable():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1169
{
2040503a:	1141                	addi	sp,sp,-16
2040503c:	c622                	sw	s0,12(sp)
2040503e:	0800                	addi	s0,sp,16
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1170
		return &__metal_driver_vtable_sifive_fe310_g000_prci;
20405040:	204017b7          	lui	a5,0x20401
20405044:	f3c78793          	addi	a5,a5,-196 # 20400f3c <__metal_driver_vtable_sifive_fe310_g000_prci>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1171
}
20405048:	853e                	mv	a0,a5
2040504a:	4432                	lw	s0,12(sp)
2040504c:	0141                	addi	sp,sp,16
2040504e:	8082                	ret

20405050 <get_pll_config_freq>:
get_pll_config_freq():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:141
                                const struct pll_config_t *config) {
20405050:	1101                	addi	sp,sp,-32
20405052:	ce22                	sw	s0,28(sp)
20405054:	1000                	addi	s0,sp,32
20405056:	fea42623          	sw	a0,-20(s0)
2040505a:	feb42423          	sw	a1,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:142
    if (pll_input_rate < config->min_input_rate ||
2040505e:	fe842783          	lw	a5,-24(s0)
20405062:	479c                	lw	a5,8(a5)
20405064:	fec42703          	lw	a4,-20(s0)
20405068:	00f76963          	bltu	a4,a5,2040507a <get_pll_config_freq+0x2a>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:143 (discriminator 1)
        pll_input_rate > config->max_input_rate)
2040506c:	fe842783          	lw	a5,-24(s0)
20405070:	47dc                	lw	a5,12(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:142 (discriminator 1)
    if (pll_input_rate < config->min_input_rate ||
20405072:	fec42703          	lw	a4,-20(s0)
20405076:	00e7f463          	bgeu	a5,a4,2040507e <get_pll_config_freq+0x2e>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:144
        return PLL_CONFIG_NOT_VALID;
2040507a:	57fd                	li	a5,-1
2040507c:	a829                	j	20405096 <get_pll_config_freq+0x46>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:146
    return pll_input_rate * config->multiplier / config->divisor;
2040507e:	fe842783          	lw	a5,-24(s0)
20405082:	4398                	lw	a4,0(a5)
20405084:	fec42783          	lw	a5,-20(s0)
20405088:	02f70733          	mul	a4,a4,a5
2040508c:	fe842783          	lw	a5,-24(s0)
20405090:	43dc                	lw	a5,4(a5)
20405092:	02f757b3          	divu	a5,a4,a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:147
}
20405096:	853e                	mv	a0,a5
20405098:	4472                	lw	s0,28(sp)
2040509a:	6105                	addi	sp,sp,32
2040509c:	8082                	ret

2040509e <__metal_driver_sifive_fe310_g000_pll_init>:
__metal_driver_sifive_fe310_g000_pll_init():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:162
    struct __metal_driver_sifive_fe310_g000_pll *pll) {
2040509e:	7139                	addi	sp,sp,-64
204050a0:	de06                	sw	ra,60(sp)
204050a2:	dc22                	sw	s0,56(sp)
204050a4:	0080                	addi	s0,sp,64
204050a6:	fca42623          	sw	a0,-52(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:164
        __metal_driver_sifive_fe310_g000_pll_pllref(&(pll->clock));
204050aa:	fcc42783          	lw	a5,-52(s0)
204050ae:	853e                	mv	a0,a5
204050b0:	3df5                	jal	20404fac <__metal_driver_sifive_fe310_g000_pll_pllref>
204050b2:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:165
    long init_rate = __metal_driver_sifive_fe310_g000_pll_init_rate();
204050b6:	3fb1                	jal	20405012 <__metal_driver_sifive_fe310_g000_pll_init_rate>
204050b8:	fea42423          	sw	a0,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:166
    long config_offset = __metal_driver_sifive_fe310_g000_pll_config_offset();
204050bc:	3799                	jal	20405002 <__metal_driver_sifive_fe310_g000_pll_config_offset>
204050be:	fea42223          	sw	a0,-28(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:167
    long base = __metal_driver_sifive_fe310_g000_prci_base();
204050c2:	379d                	jal	20405028 <__metal_driver_sifive_fe310_g000_prci_base>
204050c4:	fea42023          	sw	a0,-32(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:169
    __metal_io_u32 *pllcfg = (__metal_io_u32 *)(base + config_offset);
204050c8:	fe042703          	lw	a4,-32(s0)
204050cc:	fe442783          	lw	a5,-28(s0)
204050d0:	97ba                	add	a5,a5,a4
204050d2:	fcf42e23          	sw	a5,-36(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:173
    _metal_clock_call_all_callbacks(pll->clock._pre_rate_change_callback);
204050d6:	fcc42783          	lw	a5,-52(s0)
204050da:	43dc                	lw	a5,4(a5)
204050dc:	853e                	mv	a0,a5
204050de:	5ce010ef          	jal	ra,204066ac <_metal_clock_call_all_callbacks>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:177
    if ((__METAL_ACCESS_ONCE(pllcfg) & PLL_SEL) != 0)
204050e2:	fdc42783          	lw	a5,-36(s0)
204050e6:	4398                	lw	a4,0(a5)
204050e8:	67c1                	lui	a5,0x10
204050ea:	8ff9                	and	a5,a5,a4
204050ec:	cb91                	beqz	a5,20405100 <__metal_driver_sifive_fe310_g000_pll_init+0x62>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:178
        __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_SEL);
204050ee:	fdc42783          	lw	a5,-36(s0)
204050f2:	4398                	lw	a4,0(a5)
204050f4:	77c1                	lui	a5,0xffff0
204050f6:	17fd                	addi	a5,a5,-1
204050f8:	8f7d                	and	a4,a4,a5
204050fa:	fdc42783          	lw	a5,-36(s0)
204050fe:	c398                	sw	a4,0(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:181
    if (pllref != NULL)
20405100:	fec42783          	lw	a5,-20(s0)
20405104:	cb91                	beqz	a5,20405118 <__metal_driver_sifive_fe310_g000_pll_init+0x7a>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:182
        __METAL_ACCESS_ONCE(pllcfg) |= PLL_REFSEL;
20405106:	fdc42783          	lw	a5,-36(s0)
2040510a:	4398                	lw	a4,0(a5)
2040510c:	000207b7          	lui	a5,0x20
20405110:	8f5d                	or	a4,a4,a5
20405112:	fdc42783          	lw	a5,-36(s0)
20405116:	c398                	sw	a4,0(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:187
    pll->clock.vtable->set_rate_hz(&(pll->clock), init_rate);
20405118:	fcc42783          	lw	a5,-52(s0)
2040511c:	439c                	lw	a5,0(a5)
2040511e:	43d8                	lw	a4,4(a5)
20405120:	fcc42783          	lw	a5,-52(s0)
20405124:	fe842583          	lw	a1,-24(s0)
20405128:	853e                	mv	a0,a5
2040512a:	9702                	jalr	a4
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:190
    _metal_clock_call_all_callbacks(pll->clock._post_rate_change_callback);
2040512c:	fcc42783          	lw	a5,-52(s0)
20405130:	479c                	lw	a5,8(a5)
20405132:	853e                	mv	a0,a5
20405134:	578010ef          	jal	ra,204066ac <_metal_clock_call_all_callbacks>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:191
}
20405138:	0001                	nop
2040513a:	50f2                	lw	ra,60(sp)
2040513c:	5462                	lw	s0,56(sp)
2040513e:	6121                	addi	sp,sp,64
20405140:	8082                	ret

20405142 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz>:
__metal_driver_sifive_fe310_g000_pll_get_rate_hz():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:194
    const struct metal_clock *clock) {
20405142:	711d                	addi	sp,sp,-96
20405144:	ce86                	sw	ra,92(sp)
20405146:	cca2                	sw	s0,88(sp)
20405148:	1080                	addi	s0,sp,96
2040514a:	faa42623          	sw	a0,-84(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:196
        __metal_driver_sifive_fe310_g000_pll_pllref(clock);
2040514e:	fac42503          	lw	a0,-84(s0)
20405152:	3da9                	jal	20404fac <__metal_driver_sifive_fe310_g000_pll_pllref>
20405154:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:198
        __metal_driver_sifive_fe310_g000_pll_pllsel0(clock);
20405158:	fac42503          	lw	a0,-84(s0)
2040515c:	3d1d                	jal	20404f92 <__metal_driver_sifive_fe310_g000_pll_pllsel0>
2040515e:	fea42423          	sw	a0,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:200
        __metal_driver_sifive_fe310_g000_pll_config_offset(clock);
20405162:	fac42503          	lw	a0,-84(s0)
20405166:	3d71                	jal	20405002 <__metal_driver_sifive_fe310_g000_pll_config_offset>
20405168:	fea42223          	sw	a0,-28(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:202
        __metal_driver_sifive_fe310_g000_pll_config_base(clock);
2040516c:	fac42503          	lw	a0,-84(s0)
20405170:	3541                	jal	20404ff0 <__metal_driver_sifive_fe310_g000_pll_config_base>
20405172:	fea42023          	sw	a0,-32(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:204
        __metal_driver_sifive_fe310_g000_pll_divider_offset(clock);
20405176:	fac42503          	lw	a0,-84(s0)
2040517a:	358d                	jal	20404fdc <__metal_driver_sifive_fe310_g000_pll_divider_offset>
2040517c:	fca42e23          	sw	a0,-36(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:206
        __metal_driver_sifive_fe310_g000_pll_divider_base(clock);
20405180:	fac42503          	lw	a0,-84(s0)
20405184:	3589                	jal	20404fc6 <__metal_driver_sifive_fe310_g000_pll_divider_base>
20405186:	fca42c23          	sw	a0,-40(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:208
        __metal_driver_sifive_fe310_g000_prci_vtable();
2040518a:	3d45                	jal	2040503a <__metal_driver_sifive_fe310_g000_prci_vtable>
2040518c:	fca42a23          	sw	a0,-44(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:210
    long cfg = vtable->get_reg(config_base, config_offset);
20405190:	fd442783          	lw	a5,-44(s0)
20405194:	439c                	lw	a5,0(a5)
20405196:	fe442583          	lw	a1,-28(s0)
2040519a:	fe042503          	lw	a0,-32(s0)
2040519e:	9782                	jalr	a5
204051a0:	fca42823          	sw	a0,-48(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:211
    long div = vtable->get_reg(divider_base, divider_offset);
204051a4:	fd442783          	lw	a5,-44(s0)
204051a8:	439c                	lw	a5,0(a5)
204051aa:	fdc42583          	lw	a1,-36(s0)
204051ae:	fd842503          	lw	a0,-40(s0)
204051b2:	9782                	jalr	a5
204051b4:	fca42623          	sw	a0,-52(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:215
    if (__METAL_GET_FIELD(cfg, PLL_SEL) == 0)
204051b8:	fd042703          	lw	a4,-48(s0)
204051bc:	67c1                	lui	a5,0x10
204051be:	8f7d                	and	a4,a4,a5
204051c0:	67c1                	lui	a5,0x10
204051c2:	00f77863          	bgeu	a4,a5,204051d2 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x90>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:216
        return metal_clock_get_rate_hz(pllsel0);
204051c6:	fe842503          	lw	a0,-24(s0)
204051ca:	578010ef          	jal	ra,20406742 <metal_clock_get_rate_hz>
204051ce:	87aa                	mv	a5,a0
204051d0:	a8e1                	j	204052a8 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x166>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:221
        __METAL_GET_FIELD(cfg, PLL_REFSEL) ? pllref : pllsel0);
204051d2:	fd042703          	lw	a4,-48(s0)
204051d6:	000207b7          	lui	a5,0x20
204051da:	8f7d                	and	a4,a4,a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:220
    long ref_hz = metal_clock_get_rate_hz(
204051dc:	000207b7          	lui	a5,0x20
204051e0:	00f76563          	bltu	a4,a5,204051ea <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0xa8>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:220 (discriminator 1)
204051e4:	fec42783          	lw	a5,-20(s0)
204051e8:	a019                	j	204051ee <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0xac>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:220 (discriminator 2)
204051ea:	fe842783          	lw	a5,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:220 (discriminator 4)
204051ee:	853e                	mv	a0,a5
204051f0:	552010ef          	jal	ra,20406742 <metal_clock_get_rate_hz>
204051f4:	fca42423          	sw	a0,-56(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:225 (discriminator 4)
    if (__METAL_GET_FIELD(cfg, PLL_BYPASS))
204051f8:	fd042703          	lw	a4,-48(s0)
204051fc:	000407b7          	lui	a5,0x40
20405200:	8f7d                	and	a4,a4,a5
20405202:	000407b7          	lui	a5,0x40
20405206:	00f76563          	bltu	a4,a5,20405210 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0xce>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:226
        return ref_hz;
2040520a:	fc842783          	lw	a5,-56(s0)
2040520e:	a869                	j	204052a8 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x166>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:229
    long div_r = __METAL_GET_FIELD(cfg, PLL_R) + 1;
20405210:	fd042783          	lw	a5,-48(s0)
20405214:	8b9d                	andi	a5,a5,7
20405216:	0785                	addi	a5,a5,1
20405218:	fcf42223          	sw	a5,-60(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:230
    long mul_f = 2 * (__METAL_GET_FIELD(cfg, PLL_F) + 1);
2040521c:	fd042783          	lw	a5,-48(s0)
20405220:	3f07f793          	andi	a5,a5,1008
20405224:	8391                	srli	a5,a5,0x4
20405226:	0785                	addi	a5,a5,1
20405228:	0786                	slli	a5,a5,0x1
2040522a:	fcf42023          	sw	a5,-64(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:231
    if (__METAL_GET_FIELD(cfg, PLL_Q) == 0)
2040522e:	fd042703          	lw	a4,-48(s0)
20405232:	6785                	lui	a5,0x1
20405234:	c0078793          	addi	a5,a5,-1024 # c00 <__heap_size+0x400>
20405238:	8f7d                	and	a4,a4,a5
2040523a:	3ff00793          	li	a5,1023
2040523e:	00e7e463          	bltu	a5,a4,20405246 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x104>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:232
        return -1;
20405242:	57fd                	li	a5,-1
20405244:	a095                	j	204052a8 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x166>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:233
    long div_q = 1 << __METAL_GET_FIELD(cfg, PLL_Q);
20405246:	fd042703          	lw	a4,-48(s0)
2040524a:	6785                	lui	a5,0x1
2040524c:	c0078793          	addi	a5,a5,-1024 # c00 <__heap_size+0x400>
20405250:	8ff9                	and	a5,a5,a4
20405252:	83a9                	srli	a5,a5,0xa
20405254:	4705                	li	a4,1
20405256:	00f717b3          	sll	a5,a4,a5
2040525a:	faf42e23          	sw	a5,-68(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:238
    long pllout = (((ref_hz / div_r) * mul_f) / div_q);
2040525e:	fc842703          	lw	a4,-56(s0)
20405262:	fc442783          	lw	a5,-60(s0)
20405266:	02f74733          	div	a4,a4,a5
2040526a:	fc042783          	lw	a5,-64(s0)
2040526e:	02f70733          	mul	a4,a4,a5
20405272:	fbc42783          	lw	a5,-68(s0)
20405276:	02f747b3          	div	a5,a4,a5
2040527a:	faf42c23          	sw	a5,-72(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:239
    if (__METAL_GET_FIELD(div, DIV_1))
2040527e:	fcc42783          	lw	a5,-52(s0)
20405282:	1007f713          	andi	a4,a5,256
20405286:	0ff00793          	li	a5,255
2040528a:	00e7f563          	bgeu	a5,a4,20405294 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x152>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:240
        return pllout;
2040528e:	fb842783          	lw	a5,-72(s0)
20405292:	a819                	j	204052a8 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x166>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:242
    return pllout / (2 * (__METAL_GET_FIELD(div, DIV_DIV) + 1));
20405294:	fb842703          	lw	a4,-72(s0)
20405298:	fcc42783          	lw	a5,-52(s0)
2040529c:	03f7f793          	andi	a5,a5,63
204052a0:	0785                	addi	a5,a5,1
204052a2:	0786                	slli	a5,a5,0x1
204052a4:	02f757b3          	divu	a5,a4,a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:243
}
204052a8:	853e                	mv	a0,a5
204052aa:	40f6                	lw	ra,92(sp)
204052ac:	4466                	lw	s0,88(sp)
204052ae:	6125                	addi	sp,sp,96
204052b0:	8082                	ret

204052b2 <find_closest_config>:
find_closest_config():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:253
static int find_closest_config(long ref_hz, long rate) {
204052b2:	7139                	addi	sp,sp,-64
204052b4:	de06                	sw	ra,60(sp)
204052b6:	dc22                	sw	s0,56(sp)
204052b8:	0080                	addi	s0,sp,64
204052ba:	fca42623          	sw	a0,-52(s0)
204052be:	fcb42423          	sw	a1,-56(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:254
    int closest_index = -1;
204052c2:	57fd                	li	a5,-1
204052c4:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:255
    long closest_diff = LONG_MAX;
204052c8:	800007b7          	lui	a5,0x80000
204052cc:	fff7c793          	not	a5,a5
204052d0:	fef42423          	sw	a5,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:259
    for (int i = (sizeof(pll_configs) / sizeof(pll_configs[0])) - 1; i >= 0;
204052d4:	04300793          	li	a5,67
204052d8:	fef42223          	sw	a5,-28(s0)
204052dc:	a0b5                	j	20405348 <find_closest_config+0x96>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:261
        long config_freq = get_pll_config_freq(ref_hz, &(pll_configs[i]));
204052de:	fcc42683          	lw	a3,-52(s0)
204052e2:	fe442783          	lw	a5,-28(s0)
204052e6:	00579713          	slli	a4,a5,0x5
204052ea:	204007b7          	lui	a5,0x20400
204052ee:	5e078793          	addi	a5,a5,1504 # 204005e0 <pll_configs>
204052f2:	97ba                	add	a5,a5,a4
204052f4:	85be                	mv	a1,a5
204052f6:	8536                	mv	a0,a3
204052f8:	d59ff0ef          	jal	ra,20405050 <get_pll_config_freq>
204052fc:	fea42023          	sw	a0,-32(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:262
        if (config_freq != PLL_CONFIG_NOT_VALID) {
20405300:	fe042703          	lw	a4,-32(s0)
20405304:	57fd                	li	a5,-1
20405306:	02f70c63          	beq	a4,a5,2040533e <find_closest_config+0x8c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:263
            long freq_diff = labs(config_freq - rate);
2040530a:	fe042703          	lw	a4,-32(s0)
2040530e:	fc842783          	lw	a5,-56(s0)
20405312:	8f1d                	sub	a4,a4,a5
20405314:	41f75793          	srai	a5,a4,0x1f
20405318:	8f3d                	xor	a4,a4,a5
2040531a:	40f707b3          	sub	a5,a4,a5
2040531e:	fcf42e23          	sw	a5,-36(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:265
            if (freq_diff < closest_diff) {
20405322:	fdc42703          	lw	a4,-36(s0)
20405326:	fe842783          	lw	a5,-24(s0)
2040532a:	00f75a63          	bge	a4,a5,2040533e <find_closest_config+0x8c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:266
                closest_index = i;
2040532e:	fe442783          	lw	a5,-28(s0)
20405332:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:267
                closest_diff = freq_diff;
20405336:	fdc42783          	lw	a5,-36(s0)
2040533a:	fef42423          	sw	a5,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:260
         i--) {
2040533e:	fe442783          	lw	a5,-28(s0)
20405342:	17fd                	addi	a5,a5,-1
20405344:	fef42223          	sw	a5,-28(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:259 (discriminator 1)
    for (int i = (sizeof(pll_configs) / sizeof(pll_configs[0])) - 1; i >= 0;
20405348:	fe442783          	lw	a5,-28(s0)
2040534c:	f807d9e3          	bgez	a5,204052de <find_closest_config+0x2c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:272
    return closest_index;
20405350:	fec42783          	lw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:273
}
20405354:	853e                	mv	a0,a5
20405356:	50f2                	lw	ra,60(sp)
20405358:	5462                	lw	s0,56(sp)
2040535a:	6121                	addi	sp,sp,64
2040535c:	8082                	ret

2040535e <configure_pll>:
configure_pll():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:290
                          const struct pll_config_t *config) {
2040535e:	7179                	addi	sp,sp,-48
20405360:	d606                	sw	ra,44(sp)
20405362:	d422                	sw	s0,40(sp)
20405364:	1800                	addi	s0,sp,48
20405366:	fca42e23          	sw	a0,-36(s0)
2040536a:	fcb42c23          	sw	a1,-40(s0)
2040536e:	fcc42a23          	sw	a2,-44(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:291
    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_R);
20405372:	fdc42783          	lw	a5,-36(s0)
20405376:	439c                	lw	a5,0(a5)
20405378:	ff87f713          	andi	a4,a5,-8
2040537c:	fdc42783          	lw	a5,-36(s0)
20405380:	c398                	sw	a4,0(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:292
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_R_SHIFT(config->r);
20405382:	fdc42783          	lw	a5,-36(s0)
20405386:	4398                	lw	a4,0(a5)
20405388:	fd442783          	lw	a5,-44(s0)
2040538c:	4b9c                	lw	a5,16(a5)
2040538e:	8b9d                	andi	a5,a5,7
20405390:	8f5d                	or	a4,a4,a5
20405392:	fdc42783          	lw	a5,-36(s0)
20405396:	c398                	sw	a4,0(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:294
    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_F);
20405398:	fdc42783          	lw	a5,-36(s0)
2040539c:	439c                	lw	a5,0(a5)
2040539e:	c0f7f713          	andi	a4,a5,-1009
204053a2:	fdc42783          	lw	a5,-36(s0)
204053a6:	c398                	sw	a4,0(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:295
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_F_SHIFT(config->f);
204053a8:	fdc42783          	lw	a5,-36(s0)
204053ac:	4398                	lw	a4,0(a5)
204053ae:	fd442783          	lw	a5,-44(s0)
204053b2:	4bdc                	lw	a5,20(a5)
204053b4:	0792                	slli	a5,a5,0x4
204053b6:	3f07f793          	andi	a5,a5,1008
204053ba:	8f5d                	or	a4,a4,a5
204053bc:	fdc42783          	lw	a5,-36(s0)
204053c0:	c398                	sw	a4,0(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:297
    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_Q);
204053c2:	fdc42783          	lw	a5,-36(s0)
204053c6:	4398                	lw	a4,0(a5)
204053c8:	77fd                	lui	a5,0xfffff
204053ca:	3ff78793          	addi	a5,a5,1023 # fffff3ff <metal_segment_heap_target_end+0x7fffd8ff>
204053ce:	8f7d                	and	a4,a4,a5
204053d0:	fdc42783          	lw	a5,-36(s0)
204053d4:	c398                	sw	a4,0(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:298
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_Q_SHIFT(config->q);
204053d6:	fdc42783          	lw	a5,-36(s0)
204053da:	4398                	lw	a4,0(a5)
204053dc:	fd442783          	lw	a5,-44(s0)
204053e0:	4f9c                	lw	a5,24(a5)
204053e2:	00a79693          	slli	a3,a5,0xa
204053e6:	6785                	lui	a5,0x1
204053e8:	c0078793          	addi	a5,a5,-1024 # c00 <__heap_size+0x400>
204053ec:	8ff5                	and	a5,a5,a3
204053ee:	8f5d                	or	a4,a4,a5
204053f0:	fdc42783          	lw	a5,-36(s0)
204053f4:	c398                	sw	a4,0(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:300
    if (config->d < 0) {
204053f6:	fd442783          	lw	a5,-44(s0)
204053fa:	4fdc                	lw	a5,28(a5)
204053fc:	0207db63          	bgez	a5,20405432 <configure_pll+0xd4>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:302
        __METAL_ACCESS_ONCE(plloutdiv) |= DIV_1;
20405400:	fd842783          	lw	a5,-40(s0)
20405404:	439c                	lw	a5,0(a5)
20405406:	1007e713          	ori	a4,a5,256
2040540a:	fd842783          	lw	a5,-40(s0)
2040540e:	c398                	sw	a4,0(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:304
        __METAL_ACCESS_ONCE(plloutdiv) &= ~(DIV_DIV);
20405410:	fd842783          	lw	a5,-40(s0)
20405414:	439c                	lw	a5,0(a5)
20405416:	fc07f713          	andi	a4,a5,-64
2040541a:	fd842783          	lw	a5,-40(s0)
2040541e:	c398                	sw	a4,0(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:305
        __METAL_ACCESS_ONCE(plloutdiv) |= PLL_DIV_SHIFT(1);
20405420:	fd842783          	lw	a5,-40(s0)
20405424:	439c                	lw	a5,0(a5)
20405426:	0017e713          	ori	a4,a5,1
2040542a:	fd842783          	lw	a5,-40(s0)
2040542e:	c398                	sw	a4,0(a5)
20405430:	a82d                	j	2040546a <configure_pll+0x10c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:307
        __METAL_ACCESS_ONCE(plloutdiv) &= ~(DIV_1);
20405432:	fd842783          	lw	a5,-40(s0)
20405436:	439c                	lw	a5,0(a5)
20405438:	eff7f713          	andi	a4,a5,-257
2040543c:	fd842783          	lw	a5,-40(s0)
20405440:	c398                	sw	a4,0(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:309
        __METAL_ACCESS_ONCE(plloutdiv) &= ~(DIV_DIV);
20405442:	fd842783          	lw	a5,-40(s0)
20405446:	439c                	lw	a5,0(a5)
20405448:	fc07f713          	andi	a4,a5,-64
2040544c:	fd842783          	lw	a5,-40(s0)
20405450:	c398                	sw	a4,0(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:310
        __METAL_ACCESS_ONCE(plloutdiv) |= PLL_DIV_SHIFT(config->d);
20405452:	fd842783          	lw	a5,-40(s0)
20405456:	4398                	lw	a4,0(a5)
20405458:	fd442783          	lw	a5,-44(s0)
2040545c:	4fdc                	lw	a5,28(a5)
2040545e:	03f7f793          	andi	a5,a5,63
20405462:	8f5d                	or	a4,a4,a5
20405464:	fd842783          	lw	a5,-40(s0)
20405468:	c398                	sw	a4,0(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:313
    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_BYPASS);
2040546a:	fdc42783          	lw	a5,-36(s0)
2040546e:	4398                	lw	a4,0(a5)
20405470:	fffc07b7          	lui	a5,0xfffc0
20405474:	17fd                	addi	a5,a5,-1
20405476:	8f7d                	and	a4,a4,a5
20405478:	fdc42783          	lw	a5,-36(s0)
2040547c:	c398                	sw	a4,0(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:318
    __metal_driver_riscv_clint0_command_request(__METAL_DT_RISCV_CLINT0_HANDLE,
2040547e:	fe040793          	addi	a5,s0,-32
20405482:	863e                	mv	a2,a5
20405484:	4585                	li	a1,1
20405486:	800017b7          	lui	a5,0x80001
2040548a:	e3c78513          	addi	a0,a5,-452 # 80000e3c <metal_segment_heap_target_end+0xfffff33c>
2040548e:	cbafd0ef          	jal	ra,20402948 <__metal_driver_riscv_clint0_command_request>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:320
    mtime_end = mtime + PLL_LOCK_WAIT_TICKS;
20405492:	fe042603          	lw	a2,-32(s0)
20405496:	fe442683          	lw	a3,-28(s0)
2040549a:	4511                	li	a0,4
2040549c:	4581                	li	a1,0
2040549e:	00a60733          	add	a4,a2,a0
204054a2:	883a                	mv	a6,a4
204054a4:	00c83833          	sltu	a6,a6,a2
204054a8:	00b687b3          	add	a5,a3,a1
204054ac:	00f806b3          	add	a3,a6,a5
204054b0:	87b6                	mv	a5,a3
204054b2:	fee42423          	sw	a4,-24(s0)
204054b6:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:321
    while (mtime <= mtime_end) {
204054ba:	a819                	j	204054d0 <configure_pll+0x172>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:322
        __metal_driver_riscv_clint0_command_request(
204054bc:	fe040793          	addi	a5,s0,-32
204054c0:	863e                	mv	a2,a5
204054c2:	4585                	li	a1,1
204054c4:	800017b7          	lui	a5,0x80001
204054c8:	e3c78513          	addi	a0,a5,-452 # 80000e3c <metal_segment_heap_target_end+0xfffff33c>
204054cc:	c7cfd0ef          	jal	ra,20402948 <__metal_driver_riscv_clint0_command_request>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:321
    while (mtime <= mtime_end) {
204054d0:	fe042703          	lw	a4,-32(s0)
204054d4:	fe442783          	lw	a5,-28(s0)
204054d8:	fec42683          	lw	a3,-20(s0)
204054dc:	863e                	mv	a2,a5
204054de:	00c6ec63          	bltu	a3,a2,204054f6 <configure_pll+0x198>
204054e2:	fec42683          	lw	a3,-20(s0)
204054e6:	863e                	mv	a2,a5
204054e8:	fcc69ae3          	bne	a3,a2,204054bc <configure_pll+0x15e>
204054ec:	fe842683          	lw	a3,-24(s0)
204054f0:	87ba                	mv	a5,a4
204054f2:	fcf6f5e3          	bgeu	a3,a5,204054bc <configure_pll+0x15e>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:340
    while ((__METAL_ACCESS_ONCE(pllcfg) & PLL_LOCK) == 0)
204054f6:	0001                	nop
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:340 (discriminator 1)
204054f8:	fdc42783          	lw	a5,-36(s0)
204054fc:	439c                	lw	a5,0(a5)
204054fe:	fe07dde3          	bgez	a5,204054f8 <configure_pll+0x19a>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:342
}
20405502:	0001                	nop
20405504:	0001                	nop
20405506:	50b2                	lw	ra,44(sp)
20405508:	5422                	lw	s0,40(sp)
2040550a:	6145                	addi	sp,sp,48
2040550c:	8082                	ret

2040550e <__metal_driver_sifive_fe310_g000_pll_set_rate_hz>:
__metal_driver_sifive_fe310_g000_pll_set_rate_hz():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:345
                                                      long rate) {
2040550e:	715d                	addi	sp,sp,-80
20405510:	c686                	sw	ra,76(sp)
20405512:	c4a2                	sw	s0,72(sp)
20405514:	0880                	addi	s0,sp,80
20405516:	faa42e23          	sw	a0,-68(s0)
2040551a:	fab42c23          	sw	a1,-72(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:347
        __metal_driver_sifive_fe310_g000_pll_pllref(clock);
2040551e:	fbc42503          	lw	a0,-68(s0)
20405522:	a8bff0ef          	jal	ra,20404fac <__metal_driver_sifive_fe310_g000_pll_pllref>
20405526:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:349
        __metal_driver_sifive_fe310_g000_pll_pllsel0(clock);
2040552a:	fbc42503          	lw	a0,-68(s0)
2040552e:	a65ff0ef          	jal	ra,20404f92 <__metal_driver_sifive_fe310_g000_pll_pllsel0>
20405532:	fea42423          	sw	a0,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:351
        __metal_driver_sifive_fe310_g000_pll_config_offset(clock);
20405536:	fbc42503          	lw	a0,-68(s0)
2040553a:	ac9ff0ef          	jal	ra,20405002 <__metal_driver_sifive_fe310_g000_pll_config_offset>
2040553e:	fea42223          	sw	a0,-28(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:353
        __metal_driver_sifive_fe310_g000_pll_divider_offset(clock);
20405542:	fbc42503          	lw	a0,-68(s0)
20405546:	a97ff0ef          	jal	ra,20404fdc <__metal_driver_sifive_fe310_g000_pll_divider_offset>
2040554a:	fea42023          	sw	a0,-32(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:354
    long base = __metal_driver_sifive_fe310_g000_prci_base();
2040554e:	adbff0ef          	jal	ra,20405028 <__metal_driver_sifive_fe310_g000_prci_base>
20405552:	fca42e23          	sw	a0,-36(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:356
    __metal_io_u32 *pllcfg = (__metal_io_u32 *)(base + config_offset);
20405556:	fdc42703          	lw	a4,-36(s0)
2040555a:	fe442783          	lw	a5,-28(s0)
2040555e:	97ba                	add	a5,a5,a4
20405560:	fcf42c23          	sw	a5,-40(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:357
    __metal_io_u32 *plloutdiv = (__metal_io_u32 *)(base + divider_offset);
20405564:	fdc42703          	lw	a4,-36(s0)
20405568:	fe042783          	lw	a5,-32(s0)
2040556c:	97ba                	add	a5,a5,a4
2040556e:	fcf42a23          	sw	a5,-44(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:360
    if (__METAL_ACCESS_ONCE(pllcfg) & PLL_SEL)
20405572:	fd842783          	lw	a5,-40(s0)
20405576:	4398                	lw	a4,0(a5)
20405578:	67c1                	lui	a5,0x10
2040557a:	8ff9                	and	a5,a5,a4
2040557c:	cb91                	beqz	a5,20405590 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x82>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:361
        __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_SEL);
2040557e:	fd842783          	lw	a5,-40(s0)
20405582:	4398                	lw	a4,0(a5)
20405584:	77c1                	lui	a5,0xffff0
20405586:	17fd                	addi	a5,a5,-1
20405588:	8f7d                	and	a4,a4,a5
2040558a:	fd842783          	lw	a5,-40(s0)
2040558e:	c398                	sw	a4,0(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:366
        __METAL_ACCESS_ONCE(pllcfg) & PLL_REFSEL ? pllref : pllsel0);
20405590:	fd842783          	lw	a5,-40(s0)
20405594:	4398                	lw	a4,0(a5)
20405596:	000207b7          	lui	a5,0x20
2040559a:	8ff9                	and	a5,a5,a4
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:365
    long ref_hz = metal_clock_get_rate_hz(
2040559c:	c781                	beqz	a5,204055a4 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x96>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:365 (discriminator 1)
2040559e:	fec42783          	lw	a5,-20(s0)
204055a2:	a019                	j	204055a8 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x9a>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:365 (discriminator 2)
204055a4:	fe842783          	lw	a5,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:365 (discriminator 4)
204055a8:	853e                	mv	a0,a5
204055aa:	198010ef          	jal	ra,20406742 <metal_clock_get_rate_hz>
204055ae:	fca42823          	sw	a0,-48(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:370 (discriminator 4)
    if ((ref_hz * 3 / 4) <= rate && (ref_hz * 5 / 4) >= rate) {
204055b2:	fd042703          	lw	a4,-48(s0)
204055b6:	87ba                	mv	a5,a4
204055b8:	0786                	slli	a5,a5,0x1
204055ba:	97ba                	add	a5,a5,a4
204055bc:	41f7d713          	srai	a4,a5,0x1f
204055c0:	8b0d                	andi	a4,a4,3
204055c2:	97ba                	add	a5,a5,a4
204055c4:	8789                	srai	a5,a5,0x2
204055c6:	873e                	mv	a4,a5
204055c8:	fb842783          	lw	a5,-72(s0)
204055cc:	02e7cb63          	blt	a5,a4,20405602 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0xf4>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:370 (discriminator 1)
204055d0:	fd042703          	lw	a4,-48(s0)
204055d4:	87ba                	mv	a5,a4
204055d6:	078a                	slli	a5,a5,0x2
204055d8:	97ba                	add	a5,a5,a4
204055da:	41f7d713          	srai	a4,a5,0x1f
204055de:	8b0d                	andi	a4,a4,3
204055e0:	97ba                	add	a5,a5,a4
204055e2:	8789                	srai	a5,a5,0x2
204055e4:	873e                	mv	a4,a5
204055e6:	fb842783          	lw	a5,-72(s0)
204055ea:	00f74c63          	blt	a4,a5,20405602 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0xf4>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:371
        __METAL_ACCESS_ONCE(pllcfg) |= PLL_BYPASS;
204055ee:	fd842783          	lw	a5,-40(s0)
204055f2:	4398                	lw	a4,0(a5)
204055f4:	000407b7          	lui	a5,0x40
204055f8:	8f5d                	or	a4,a4,a5
204055fa:	fd842783          	lw	a5,-40(s0)
204055fe:	c398                	sw	a4,0(a5)
20405600:	a881                	j	20405650 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x142>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:373
        int config_index = find_closest_config(ref_hz, rate);
20405602:	fb842583          	lw	a1,-72(s0)
20405606:	fd042503          	lw	a0,-48(s0)
2040560a:	ca9ff0ef          	jal	ra,204052b2 <find_closest_config>
2040560e:	fca42623          	sw	a0,-52(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:374
        if (config_index != -1) {
20405612:	fcc42703          	lw	a4,-52(s0)
20405616:	57fd                	li	a5,-1
20405618:	02f70363          	beq	a4,a5,2040563e <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x130>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:375
            configure_pll(pllcfg, plloutdiv, &(pll_configs[config_index]));
2040561c:	fcc42783          	lw	a5,-52(s0)
20405620:	00579713          	slli	a4,a5,0x5
20405624:	204007b7          	lui	a5,0x20400
20405628:	5e078793          	addi	a5,a5,1504 # 204005e0 <pll_configs>
2040562c:	97ba                	add	a5,a5,a4
2040562e:	863e                	mv	a2,a5
20405630:	fd442583          	lw	a1,-44(s0)
20405634:	fd842503          	lw	a0,-40(s0)
20405638:	d27ff0ef          	jal	ra,2040535e <configure_pll>
2040563c:	a811                	j	20405650 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x142>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:378
            __METAL_ACCESS_ONCE(pllcfg) |= PLL_BYPASS;
2040563e:	fd842783          	lw	a5,-40(s0)
20405642:	4398                	lw	a4,0(a5)
20405644:	000407b7          	lui	a5,0x40
20405648:	8f5d                	or	a4,a4,a5
2040564a:	fd842783          	lw	a5,-40(s0)
2040564e:	c398                	sw	a4,0(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:383
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_SEL;
20405650:	fd842783          	lw	a5,-40(s0)
20405654:	4398                	lw	a4,0(a5)
20405656:	67c1                	lui	a5,0x10
20405658:	8f5d                	or	a4,a4,a5
2040565a:	fd842783          	lw	a5,-40(s0)
2040565e:	c398                	sw	a4,0(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:385
    return __metal_driver_sifive_fe310_g000_pll_get_rate_hz(clock);
20405660:	fbc42503          	lw	a0,-68(s0)
20405664:	adfff0ef          	jal	ra,20405142 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz>
20405668:	87aa                	mv	a5,a0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:386
}
2040566a:	853e                	mv	a0,a5
2040566c:	40b6                	lw	ra,76(sp)
2040566e:	4426                	lw	s0,72(sp)
20405670:	6161                	addi	sp,sp,80
20405672:	8082                	ret

20405674 <__metal_driver_sifive_fe310_g000_prci_base>:
__metal_driver_sifive_fe310_g000_prci_base():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1159
{
20405674:	1141                	addi	sp,sp,-16
20405676:	c622                	sw	s0,12(sp)
20405678:	0800                	addi	s0,sp,16
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1160
		return METAL_SIFIVE_FE310_G000_PRCI_10008000_BASE_ADDRESS;
2040567a:	100087b7          	lui	a5,0x10008
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:1161
}
2040567e:	853e                	mv	a0,a5
20405680:	4432                	lw	s0,12(sp)
20405682:	0141                	addi	sp,sp,16
20405684:	8082                	ret

20405686 <__metal_driver_sifive_fe310_g000_prci_get_reg>:
__metal_driver_sifive_fe310_g000_prci_get_reg():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:12

#include <metal/drivers/sifive_fe310-g000_prci.h>
#include <metal/machine.h>

long __metal_driver_sifive_fe310_g000_prci_get_reg(
    const struct __metal_driver_sifive_fe310_g000_prci *prci, long offset) {
20405686:	7179                	addi	sp,sp,-48
20405688:	d606                	sw	ra,44(sp)
2040568a:	d422                	sw	s0,40(sp)
2040568c:	1800                	addi	s0,sp,48
2040568e:	fca42e23          	sw	a0,-36(s0)
20405692:	fcb42c23          	sw	a1,-40(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:13
    unsigned long base = __metal_driver_sifive_fe310_g000_prci_base();
20405696:	3ff9                	jal	20405674 <__metal_driver_sifive_fe310_g000_prci_base>
20405698:	87aa                	mv	a5,a0
2040569a:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:14
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + offset));
2040569e:	fd842703          	lw	a4,-40(s0)
204056a2:	fec42783          	lw	a5,-20(s0)
204056a6:	97ba                	add	a5,a5,a4
204056a8:	439c                	lw	a5,0(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:15
}
204056aa:	853e                	mv	a0,a5
204056ac:	50b2                	lw	ra,44(sp)
204056ae:	5422                	lw	s0,40(sp)
204056b0:	6145                	addi	sp,sp,48
204056b2:	8082                	ret

204056b4 <__metal_driver_sifive_fe310_g000_prci_set_reg>:
__metal_driver_sifive_fe310_g000_prci_set_reg():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:19

long __metal_driver_sifive_fe310_g000_prci_set_reg(
    const struct __metal_driver_sifive_fe310_g000_prci *prci, long offset,
    long value) {
204056b4:	7179                	addi	sp,sp,-48
204056b6:	d606                	sw	ra,44(sp)
204056b8:	d422                	sw	s0,40(sp)
204056ba:	1800                	addi	s0,sp,48
204056bc:	fca42e23          	sw	a0,-36(s0)
204056c0:	fcb42c23          	sw	a1,-40(s0)
204056c4:	fcc42a23          	sw	a2,-44(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:20
    unsigned long base = __metal_driver_sifive_fe310_g000_prci_base();
204056c8:	3775                	jal	20405674 <__metal_driver_sifive_fe310_g000_prci_base>
204056ca:	87aa                	mv	a5,a0
204056cc:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:21
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + offset)) = value;
204056d0:	fd842703          	lw	a4,-40(s0)
204056d4:	fec42783          	lw	a5,-20(s0)
204056d8:	97ba                	add	a5,a5,a4
204056da:	873e                	mv	a4,a5
204056dc:	fd442783          	lw	a5,-44(s0)
204056e0:	c31c                	sw	a5,0(a4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:22
}
204056e2:	853e                	mv	a0,a5
204056e4:	50b2                	lw	ra,44(sp)
204056e6:	5422                	lw	s0,40(sp)
204056e8:	6145                	addi	sp,sp,48
204056ea:	8082                	ret

204056ec <__metal_driver_sifive_gpio0_base>:
__metal_driver_sifive_gpio0_base():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:474
{
204056ec:	1101                	addi	sp,sp,-32
204056ee:	ce22                	sw	s0,28(sp)
204056f0:	1000                	addi	s0,sp,32
204056f2:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:475
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
204056f6:	fec42703          	lw	a4,-20(s0)
204056fa:	81c18793          	addi	a5,gp,-2020 # 80000e4c <__metal_dt_gpio_10012000>
204056fe:	00f71563          	bne	a4,a5,20405708 <__metal_driver_sifive_gpio0_base+0x1c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:476
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
20405702:	100127b7          	lui	a5,0x10012
20405706:	a011                	j	2040570a <__metal_driver_sifive_gpio0_base+0x1e>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:479
		return 0;
20405708:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:481
}
2040570a:	853e                	mv	a0,a5
2040570c:	4472                	lw	s0,28(sp)
2040570e:	6105                	addi	sp,sp,32
20405710:	8082                	ret

20405712 <__metal_driver_sifive_gpio0_interrupt_parent>:
__metal_driver_sifive_gpio0_interrupt_parent():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:504
{
20405712:	1101                	addi	sp,sp,-32
20405714:	ce22                	sw	s0,28(sp)
20405716:	1000                	addi	s0,sp,32
20405718:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:505
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
2040571c:	fec42703          	lw	a4,-20(s0)
20405720:	81c18793          	addi	a5,gp,-2020 # 80000e4c <__metal_dt_gpio_10012000>
20405724:	00f71763          	bne	a4,a5,20405732 <__metal_driver_sifive_gpio0_interrupt_parent+0x20>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:506
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
20405728:	800017b7          	lui	a5,0x80001
2040572c:	ae878793          	addi	a5,a5,-1304 # 80000ae8 <metal_segment_heap_target_end+0xffffefe8>
20405730:	a011                	j	20405734 <__metal_driver_sifive_gpio0_interrupt_parent+0x22>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:509
		return 0;
20405732:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:511
}
20405734:	853e                	mv	a0,a5
20405736:	4472                	lw	s0,28(sp)
20405738:	6105                	addi	sp,sp,32
2040573a:	8082                	ret

2040573c <__metal_driver_sifive_gpio0_interrupt_lines>:
__metal_driver_sifive_gpio0_interrupt_lines():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:514
{
2040573c:	1101                	addi	sp,sp,-32
2040573e:	ce22                	sw	s0,28(sp)
20405740:	1000                	addi	s0,sp,32
20405742:	fea42623          	sw	a0,-20(s0)
20405746:	feb42423          	sw	a1,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:515
	if (((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 0)) {
2040574a:	fec42703          	lw	a4,-20(s0)
2040574e:	81c18793          	addi	a5,gp,-2020 # 80000e4c <__metal_dt_gpio_10012000>
20405752:	00f71763          	bne	a4,a5,20405760 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:515 (discriminator 1)
20405756:	fe842783          	lw	a5,-24(s0)
2040575a:	e399                	bnez	a5,20405760 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:516
		return 7;
2040575c:	479d                	li	a5,7
2040575e:	a269                	j	204058e8 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:518
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 1))) {
20405760:	fec42703          	lw	a4,-20(s0)
20405764:	81c18793          	addi	a5,gp,-2020 # 80000e4c <__metal_dt_gpio_10012000>
20405768:	00f71963          	bne	a4,a5,2040577a <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:518 (discriminator 1)
2040576c:	fe842703          	lw	a4,-24(s0)
20405770:	4785                	li	a5,1
20405772:	00f71463          	bne	a4,a5,2040577a <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:519
		return 8;
20405776:	47a1                	li	a5,8
20405778:	aa85                	j	204058e8 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:521
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 2))) {
2040577a:	fec42703          	lw	a4,-20(s0)
2040577e:	81c18793          	addi	a5,gp,-2020 # 80000e4c <__metal_dt_gpio_10012000>
20405782:	00f71963          	bne	a4,a5,20405794 <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:521 (discriminator 1)
20405786:	fe842703          	lw	a4,-24(s0)
2040578a:	4789                	li	a5,2
2040578c:	00f71463          	bne	a4,a5,20405794 <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:522
		return 9;
20405790:	47a5                	li	a5,9
20405792:	aa99                	j	204058e8 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:524
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 3))) {
20405794:	fec42703          	lw	a4,-20(s0)
20405798:	81c18793          	addi	a5,gp,-2020 # 80000e4c <__metal_dt_gpio_10012000>
2040579c:	00f71963          	bne	a4,a5,204057ae <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:524 (discriminator 1)
204057a0:	fe842703          	lw	a4,-24(s0)
204057a4:	478d                	li	a5,3
204057a6:	00f71463          	bne	a4,a5,204057ae <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:525
		return 10;
204057aa:	47a9                	li	a5,10
204057ac:	aa35                	j	204058e8 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:527
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 4))) {
204057ae:	fec42703          	lw	a4,-20(s0)
204057b2:	81c18793          	addi	a5,gp,-2020 # 80000e4c <__metal_dt_gpio_10012000>
204057b6:	00f71963          	bne	a4,a5,204057c8 <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:527 (discriminator 1)
204057ba:	fe842703          	lw	a4,-24(s0)
204057be:	4791                	li	a5,4
204057c0:	00f71463          	bne	a4,a5,204057c8 <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:528
		return 11;
204057c4:	47ad                	li	a5,11
204057c6:	a20d                	j	204058e8 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:530
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 5))) {
204057c8:	fec42703          	lw	a4,-20(s0)
204057cc:	81c18793          	addi	a5,gp,-2020 # 80000e4c <__metal_dt_gpio_10012000>
204057d0:	00f71963          	bne	a4,a5,204057e2 <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:530 (discriminator 1)
204057d4:	fe842703          	lw	a4,-24(s0)
204057d8:	4795                	li	a5,5
204057da:	00f71463          	bne	a4,a5,204057e2 <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:531
		return 12;
204057de:	47b1                	li	a5,12
204057e0:	a221                	j	204058e8 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:533
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 6))) {
204057e2:	fec42703          	lw	a4,-20(s0)
204057e6:	81c18793          	addi	a5,gp,-2020 # 80000e4c <__metal_dt_gpio_10012000>
204057ea:	00f71963          	bne	a4,a5,204057fc <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:533 (discriminator 1)
204057ee:	fe842703          	lw	a4,-24(s0)
204057f2:	4799                	li	a5,6
204057f4:	00f71463          	bne	a4,a5,204057fc <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:534
		return 13;
204057f8:	47b5                	li	a5,13
204057fa:	a0fd                	j	204058e8 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:536
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 7))) {
204057fc:	fec42703          	lw	a4,-20(s0)
20405800:	81c18793          	addi	a5,gp,-2020 # 80000e4c <__metal_dt_gpio_10012000>
20405804:	00f71963          	bne	a4,a5,20405816 <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:536 (discriminator 1)
20405808:	fe842703          	lw	a4,-24(s0)
2040580c:	479d                	li	a5,7
2040580e:	00f71463          	bne	a4,a5,20405816 <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:537
		return 14;
20405812:	47b9                	li	a5,14
20405814:	a8d1                	j	204058e8 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:539
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 8))) {
20405816:	fec42703          	lw	a4,-20(s0)
2040581a:	81c18793          	addi	a5,gp,-2020 # 80000e4c <__metal_dt_gpio_10012000>
2040581e:	00f71963          	bne	a4,a5,20405830 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:539 (discriminator 1)
20405822:	fe842703          	lw	a4,-24(s0)
20405826:	47a1                	li	a5,8
20405828:	00f71463          	bne	a4,a5,20405830 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:540
		return 15;
2040582c:	47bd                	li	a5,15
2040582e:	a86d                	j	204058e8 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:542
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 9))) {
20405830:	fec42703          	lw	a4,-20(s0)
20405834:	81c18793          	addi	a5,gp,-2020 # 80000e4c <__metal_dt_gpio_10012000>
20405838:	00f71963          	bne	a4,a5,2040584a <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:542 (discriminator 1)
2040583c:	fe842703          	lw	a4,-24(s0)
20405840:	47a5                	li	a5,9
20405842:	00f71463          	bne	a4,a5,2040584a <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:543
		return 16;
20405846:	47c1                	li	a5,16
20405848:	a045                	j	204058e8 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:545
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 10))) {
2040584a:	fec42703          	lw	a4,-20(s0)
2040584e:	81c18793          	addi	a5,gp,-2020 # 80000e4c <__metal_dt_gpio_10012000>
20405852:	00f71963          	bne	a4,a5,20405864 <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:545 (discriminator 1)
20405856:	fe842703          	lw	a4,-24(s0)
2040585a:	47a9                	li	a5,10
2040585c:	00f71463          	bne	a4,a5,20405864 <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:546
		return 17;
20405860:	47c5                	li	a5,17
20405862:	a059                	j	204058e8 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:548
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 11))) {
20405864:	fec42703          	lw	a4,-20(s0)
20405868:	81c18793          	addi	a5,gp,-2020 # 80000e4c <__metal_dt_gpio_10012000>
2040586c:	00f71963          	bne	a4,a5,2040587e <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:548 (discriminator 1)
20405870:	fe842703          	lw	a4,-24(s0)
20405874:	47ad                	li	a5,11
20405876:	00f71463          	bne	a4,a5,2040587e <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:549
		return 18;
2040587a:	47c9                	li	a5,18
2040587c:	a0b5                	j	204058e8 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:551
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 12))) {
2040587e:	fec42703          	lw	a4,-20(s0)
20405882:	81c18793          	addi	a5,gp,-2020 # 80000e4c <__metal_dt_gpio_10012000>
20405886:	00f71963          	bne	a4,a5,20405898 <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:551 (discriminator 1)
2040588a:	fe842703          	lw	a4,-24(s0)
2040588e:	47b1                	li	a5,12
20405890:	00f71463          	bne	a4,a5,20405898 <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:552
		return 19;
20405894:	47cd                	li	a5,19
20405896:	a889                	j	204058e8 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:554
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 13))) {
20405898:	fec42703          	lw	a4,-20(s0)
2040589c:	81c18793          	addi	a5,gp,-2020 # 80000e4c <__metal_dt_gpio_10012000>
204058a0:	00f71963          	bne	a4,a5,204058b2 <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:554 (discriminator 1)
204058a4:	fe842703          	lw	a4,-24(s0)
204058a8:	47b5                	li	a5,13
204058aa:	00f71463          	bne	a4,a5,204058b2 <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:555
		return 20;
204058ae:	47d1                	li	a5,20
204058b0:	a825                	j	204058e8 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:557
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 14))) {
204058b2:	fec42703          	lw	a4,-20(s0)
204058b6:	81c18793          	addi	a5,gp,-2020 # 80000e4c <__metal_dt_gpio_10012000>
204058ba:	00f71963          	bne	a4,a5,204058cc <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:557 (discriminator 1)
204058be:	fe842703          	lw	a4,-24(s0)
204058c2:	47b9                	li	a5,14
204058c4:	00f71463          	bne	a4,a5,204058cc <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:558
		return 21;
204058c8:	47d5                	li	a5,21
204058ca:	a839                	j	204058e8 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:560
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 15))) {
204058cc:	fec42703          	lw	a4,-20(s0)
204058d0:	81c18793          	addi	a5,gp,-2020 # 80000e4c <__metal_dt_gpio_10012000>
204058d4:	00f71963          	bne	a4,a5,204058e6 <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:560 (discriminator 1)
204058d8:	fe842703          	lw	a4,-24(s0)
204058dc:	47bd                	li	a5,15
204058de:	00f71463          	bne	a4,a5,204058e6 <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:561
		return 22;
204058e2:	47d9                	li	a5,22
204058e4:	a011                	j	204058e8 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:564
		return 0;
204058e6:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:566
}
204058e8:	853e                	mv	a0,a5
204058ea:	4472                	lw	s0,28(sp)
204058ec:	6105                	addi	sp,sp,32
204058ee:	8082                	ret

204058f0 <__metal_driver_sifive_gpio0_enable_input>:
__metal_driver_sifive_gpio0_enable_input():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:13
#include <metal/drivers/sifive_gpio0.h>
#include <metal/io.h>
#include <metal/machine.h>

int __metal_driver_sifive_gpio0_enable_input(struct metal_gpio *ggpio,
                                             long source) {
204058f0:	7179                	addi	sp,sp,-48
204058f2:	d606                	sw	ra,44(sp)
204058f4:	d422                	sw	s0,40(sp)
204058f6:	1800                	addi	s0,sp,48
204058f8:	fca42e23          	sw	a0,-36(s0)
204058fc:	fcb42c23          	sw	a1,-40(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:14
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20405900:	fdc42503          	lw	a0,-36(s0)
20405904:	de9ff0ef          	jal	ra,204056ec <__metal_driver_sifive_gpio0_base>
20405908:	87aa                	mv	a5,a0
2040590a:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:17

    __METAL_ACCESS_ONCE(
        (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN)) |= source;
2040590e:	fec42783          	lw	a5,-20(s0)
20405912:	0791                	addi	a5,a5,4
20405914:	4398                	lw	a4,0(a5)
20405916:	fd842783          	lw	a5,-40(s0)
2040591a:	fec42683          	lw	a3,-20(s0)
2040591e:	0691                	addi	a3,a3,4
20405920:	8fd9                	or	a5,a5,a4
20405922:	c29c                	sw	a5,0(a3)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:19

    return 0;
20405924:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:20
}
20405926:	853e                	mv	a0,a5
20405928:	50b2                	lw	ra,44(sp)
2040592a:	5422                	lw	s0,40(sp)
2040592c:	6145                	addi	sp,sp,48
2040592e:	8082                	ret

20405930 <__metal_driver_sifive_gpio0_disable_input>:
__metal_driver_sifive_gpio0_disable_input():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:23

int __metal_driver_sifive_gpio0_disable_input(struct metal_gpio *ggpio,
                                              long source) {
20405930:	7179                	addi	sp,sp,-48
20405932:	d606                	sw	ra,44(sp)
20405934:	d422                	sw	s0,40(sp)
20405936:	1800                	addi	s0,sp,48
20405938:	fca42e23          	sw	a0,-36(s0)
2040593c:	fcb42c23          	sw	a1,-40(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:24
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20405940:	fdc42503          	lw	a0,-36(s0)
20405944:	da9ff0ef          	jal	ra,204056ec <__metal_driver_sifive_gpio0_base>
20405948:	87aa                	mv	a5,a0
2040594a:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:27

    __METAL_ACCESS_ONCE(
        (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN)) &= ~source;
2040594e:	fec42783          	lw	a5,-20(s0)
20405952:	0791                	addi	a5,a5,4
20405954:	439c                	lw	a5,0(a5)
20405956:	fd842703          	lw	a4,-40(s0)
2040595a:	fff74713          	not	a4,a4
2040595e:	86ba                	mv	a3,a4
20405960:	fec42703          	lw	a4,-20(s0)
20405964:	0711                	addi	a4,a4,4
20405966:	8ff5                	and	a5,a5,a3
20405968:	c31c                	sw	a5,0(a4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:29

    return 0;
2040596a:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:30
}
2040596c:	853e                	mv	a0,a5
2040596e:	50b2                	lw	ra,44(sp)
20405970:	5422                	lw	s0,40(sp)
20405972:	6145                	addi	sp,sp,48
20405974:	8082                	ret

20405976 <__metal_driver_sifive_gpio0_input>:
__metal_driver_sifive_gpio0_input():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:32

long __metal_driver_sifive_gpio0_input(struct metal_gpio *ggpio) {
20405976:	7179                	addi	sp,sp,-48
20405978:	d606                	sw	ra,44(sp)
2040597a:	d422                	sw	s0,40(sp)
2040597c:	1800                	addi	s0,sp,48
2040597e:	fca42e23          	sw	a0,-36(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:33
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20405982:	fdc42503          	lw	a0,-36(s0)
20405986:	d67ff0ef          	jal	ra,204056ec <__metal_driver_sifive_gpio0_base>
2040598a:	87aa                	mv	a5,a0
2040598c:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:35

    return __METAL_ACCESS_ONCE(
20405990:	fec42783          	lw	a5,-20(s0)
20405994:	439c                	lw	a5,0(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:37
        (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_VALUE));
}
20405996:	853e                	mv	a0,a5
20405998:	50b2                	lw	ra,44(sp)
2040599a:	5422                	lw	s0,40(sp)
2040599c:	6145                	addi	sp,sp,48
2040599e:	8082                	ret

204059a0 <__metal_driver_sifive_gpio0_output>:
__metal_driver_sifive_gpio0_output():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:39

long __metal_driver_sifive_gpio0_output(struct metal_gpio *ggpio) {
204059a0:	7179                	addi	sp,sp,-48
204059a2:	d606                	sw	ra,44(sp)
204059a4:	d422                	sw	s0,40(sp)
204059a6:	1800                	addi	s0,sp,48
204059a8:	fca42e23          	sw	a0,-36(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:40
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204059ac:	fdc42503          	lw	a0,-36(s0)
204059b0:	d3dff0ef          	jal	ra,204056ec <__metal_driver_sifive_gpio0_base>
204059b4:	87aa                	mv	a5,a0
204059b6:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:42

    return __METAL_ACCESS_ONCE(
204059ba:	fec42783          	lw	a5,-20(s0)
204059be:	07b1                	addi	a5,a5,12
204059c0:	439c                	lw	a5,0(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:44
        (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT));
}
204059c2:	853e                	mv	a0,a5
204059c4:	50b2                	lw	ra,44(sp)
204059c6:	5422                	lw	s0,40(sp)
204059c8:	6145                	addi	sp,sp,48
204059ca:	8082                	ret

204059cc <__metal_driver_sifive_gpio0_disable_output>:
__metal_driver_sifive_gpio0_disable_output():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:47

int __metal_driver_sifive_gpio0_disable_output(struct metal_gpio *ggpio,
                                               long source) {
204059cc:	7179                	addi	sp,sp,-48
204059ce:	d606                	sw	ra,44(sp)
204059d0:	d422                	sw	s0,40(sp)
204059d2:	1800                	addi	s0,sp,48
204059d4:	fca42e23          	sw	a0,-36(s0)
204059d8:	fcb42c23          	sw	a1,-40(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:48
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204059dc:	fdc42503          	lw	a0,-36(s0)
204059e0:	d0dff0ef          	jal	ra,204056ec <__metal_driver_sifive_gpio0_base>
204059e4:	87aa                	mv	a5,a0
204059e6:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:51

    __METAL_ACCESS_ONCE(
        (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN)) &= ~source;
204059ea:	fec42783          	lw	a5,-20(s0)
204059ee:	07a1                	addi	a5,a5,8
204059f0:	439c                	lw	a5,0(a5)
204059f2:	fd842703          	lw	a4,-40(s0)
204059f6:	fff74713          	not	a4,a4
204059fa:	86ba                	mv	a3,a4
204059fc:	fec42703          	lw	a4,-20(s0)
20405a00:	0721                	addi	a4,a4,8
20405a02:	8ff5                	and	a5,a5,a3
20405a04:	c31c                	sw	a5,0(a4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:53

    return 0;
20405a06:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:54
}
20405a08:	853e                	mv	a0,a5
20405a0a:	50b2                	lw	ra,44(sp)
20405a0c:	5422                	lw	s0,40(sp)
20405a0e:	6145                	addi	sp,sp,48
20405a10:	8082                	ret

20405a12 <__metal_driver_sifive_gpio0_enable_output>:
__metal_driver_sifive_gpio0_enable_output():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:57

int __metal_driver_sifive_gpio0_enable_output(struct metal_gpio *ggpio,
                                              long source) {
20405a12:	7179                	addi	sp,sp,-48
20405a14:	d606                	sw	ra,44(sp)
20405a16:	d422                	sw	s0,40(sp)
20405a18:	1800                	addi	s0,sp,48
20405a1a:	fca42e23          	sw	a0,-36(s0)
20405a1e:	fcb42c23          	sw	a1,-40(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:58
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20405a22:	fdc42503          	lw	a0,-36(s0)
20405a26:	cc7ff0ef          	jal	ra,204056ec <__metal_driver_sifive_gpio0_base>
20405a2a:	87aa                	mv	a5,a0
20405a2c:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:61

    __METAL_ACCESS_ONCE(
        (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN)) |= source;
20405a30:	fec42783          	lw	a5,-20(s0)
20405a34:	07a1                	addi	a5,a5,8
20405a36:	4398                	lw	a4,0(a5)
20405a38:	fd842783          	lw	a5,-40(s0)
20405a3c:	fec42683          	lw	a3,-20(s0)
20405a40:	06a1                	addi	a3,a3,8
20405a42:	8fd9                	or	a5,a5,a4
20405a44:	c29c                	sw	a5,0(a3)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:63

    return 0;
20405a46:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:64
}
20405a48:	853e                	mv	a0,a5
20405a4a:	50b2                	lw	ra,44(sp)
20405a4c:	5422                	lw	s0,40(sp)
20405a4e:	6145                	addi	sp,sp,48
20405a50:	8082                	ret

20405a52 <__metal_driver_sifive_gpio0_output_set>:
__metal_driver_sifive_gpio0_output_set():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:67

int __metal_driver_sifive_gpio0_output_set(struct metal_gpio *ggpio,
                                           long value) {
20405a52:	7179                	addi	sp,sp,-48
20405a54:	d606                	sw	ra,44(sp)
20405a56:	d422                	sw	s0,40(sp)
20405a58:	1800                	addi	s0,sp,48
20405a5a:	fca42e23          	sw	a0,-36(s0)
20405a5e:	fcb42c23          	sw	a1,-40(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:68
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20405a62:	fdc42503          	lw	a0,-36(s0)
20405a66:	c87ff0ef          	jal	ra,204056ec <__metal_driver_sifive_gpio0_base>
20405a6a:	87aa                	mv	a5,a0
20405a6c:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:70

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) |=
20405a70:	fec42783          	lw	a5,-20(s0)
20405a74:	07b1                	addi	a5,a5,12
20405a76:	4398                	lw	a4,0(a5)
20405a78:	fd842783          	lw	a5,-40(s0)
20405a7c:	fec42683          	lw	a3,-20(s0)
20405a80:	06b1                	addi	a3,a3,12
20405a82:	8fd9                	or	a5,a5,a4
20405a84:	c29c                	sw	a5,0(a3)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:73
        value;

    return 0;
20405a86:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:74
}
20405a88:	853e                	mv	a0,a5
20405a8a:	50b2                	lw	ra,44(sp)
20405a8c:	5422                	lw	s0,40(sp)
20405a8e:	6145                	addi	sp,sp,48
20405a90:	8082                	ret

20405a92 <__metal_driver_sifive_gpio0_output_clear>:
__metal_driver_sifive_gpio0_output_clear():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:77

int __metal_driver_sifive_gpio0_output_clear(struct metal_gpio *ggpio,
                                             long value) {
20405a92:	7179                	addi	sp,sp,-48
20405a94:	d606                	sw	ra,44(sp)
20405a96:	d422                	sw	s0,40(sp)
20405a98:	1800                	addi	s0,sp,48
20405a9a:	fca42e23          	sw	a0,-36(s0)
20405a9e:	fcb42c23          	sw	a1,-40(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:78
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20405aa2:	fdc42503          	lw	a0,-36(s0)
20405aa6:	c47ff0ef          	jal	ra,204056ec <__metal_driver_sifive_gpio0_base>
20405aaa:	87aa                	mv	a5,a0
20405aac:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:80

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) &=
20405ab0:	fec42783          	lw	a5,-20(s0)
20405ab4:	07b1                	addi	a5,a5,12
20405ab6:	439c                	lw	a5,0(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:81
        ~value;
20405ab8:	fd842703          	lw	a4,-40(s0)
20405abc:	fff74713          	not	a4,a4
20405ac0:	86ba                	mv	a3,a4
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:80
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) &=
20405ac2:	fec42703          	lw	a4,-20(s0)
20405ac6:	0731                	addi	a4,a4,12
20405ac8:	8ff5                	and	a5,a5,a3
20405aca:	c31c                	sw	a5,0(a4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:83

    return 0;
20405acc:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:84
}
20405ace:	853e                	mv	a0,a5
20405ad0:	50b2                	lw	ra,44(sp)
20405ad2:	5422                	lw	s0,40(sp)
20405ad4:	6145                	addi	sp,sp,48
20405ad6:	8082                	ret

20405ad8 <__metal_driver_sifive_gpio0_output_toggle>:
__metal_driver_sifive_gpio0_output_toggle():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:87

int __metal_driver_sifive_gpio0_output_toggle(struct metal_gpio *ggpio,
                                              long value) {
20405ad8:	7179                	addi	sp,sp,-48
20405ada:	d606                	sw	ra,44(sp)
20405adc:	d422                	sw	s0,40(sp)
20405ade:	1800                	addi	s0,sp,48
20405ae0:	fca42e23          	sw	a0,-36(s0)
20405ae4:	fcb42c23          	sw	a1,-40(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:88
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20405ae8:	fdc42503          	lw	a0,-36(s0)
20405aec:	c01ff0ef          	jal	ra,204056ec <__metal_driver_sifive_gpio0_base>
20405af0:	87aa                	mv	a5,a0
20405af2:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:91

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
        __METAL_ACCESS_ONCE(
20405af6:	fec42783          	lw	a5,-20(s0)
20405afa:	07b1                	addi	a5,a5,12
20405afc:	4398                	lw	a4,0(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:92
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^
20405afe:	fd842783          	lw	a5,-40(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:90
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
20405b02:	fec42683          	lw	a3,-20(s0)
20405b06:	06b1                	addi	a3,a3,12
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:92
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^
20405b08:	8fb9                	xor	a5,a5,a4
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:90
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
20405b0a:	c29c                	sw	a5,0(a3)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:95
        value;

    return 0;
20405b0c:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:96
}
20405b0e:	853e                	mv	a0,a5
20405b10:	50b2                	lw	ra,44(sp)
20405b12:	5422                	lw	s0,40(sp)
20405b14:	6145                	addi	sp,sp,48
20405b16:	8082                	ret

20405b18 <__metal_driver_sifive_gpio0_enable_io>:
__metal_driver_sifive_gpio0_enable_io():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:99

int __metal_driver_sifive_gpio0_enable_io(struct metal_gpio *ggpio, long source,
                                          long dest) {
20405b18:	7179                	addi	sp,sp,-48
20405b1a:	d606                	sw	ra,44(sp)
20405b1c:	d422                	sw	s0,40(sp)
20405b1e:	1800                	addi	s0,sp,48
20405b20:	fca42e23          	sw	a0,-36(s0)
20405b24:	fcb42c23          	sw	a1,-40(s0)
20405b28:	fcc42a23          	sw	a2,-44(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:100
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20405b2c:	fdc42503          	lw	a0,-36(s0)
20405b30:	bbdff0ef          	jal	ra,204056ec <__metal_driver_sifive_gpio0_base>
20405b34:	87aa                	mv	a5,a0
20405b36:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:103

    __METAL_ACCESS_ONCE(
        (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_SEL)) |= source;
20405b3a:	fec42783          	lw	a5,-20(s0)
20405b3e:	03c78793          	addi	a5,a5,60
20405b42:	4398                	lw	a4,0(a5)
20405b44:	fd842783          	lw	a5,-40(s0)
20405b48:	fec42683          	lw	a3,-20(s0)
20405b4c:	03c68693          	addi	a3,a3,60
20405b50:	8fd9                	or	a5,a5,a4
20405b52:	c29c                	sw	a5,0(a3)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:104
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN)) |=
20405b54:	fec42783          	lw	a5,-20(s0)
20405b58:	03878793          	addi	a5,a5,56
20405b5c:	4398                	lw	a4,0(a5)
20405b5e:	fd442783          	lw	a5,-44(s0)
20405b62:	fec42683          	lw	a3,-20(s0)
20405b66:	03868693          	addi	a3,a3,56
20405b6a:	8fd9                	or	a5,a5,a4
20405b6c:	c29c                	sw	a5,0(a3)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:107
        dest;

    return 0;
20405b6e:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:108
}
20405b70:	853e                	mv	a0,a5
20405b72:	50b2                	lw	ra,44(sp)
20405b74:	5422                	lw	s0,40(sp)
20405b76:	6145                	addi	sp,sp,48
20405b78:	8082                	ret

20405b7a <__metal_driver_sifive_gpio0_disable_io>:
__metal_driver_sifive_gpio0_disable_io():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:111

int __metal_driver_sifive_gpio0_disable_io(struct metal_gpio *ggpio,
                                           long source) {
20405b7a:	7179                	addi	sp,sp,-48
20405b7c:	d606                	sw	ra,44(sp)
20405b7e:	d422                	sw	s0,40(sp)
20405b80:	1800                	addi	s0,sp,48
20405b82:	fca42e23          	sw	a0,-36(s0)
20405b86:	fcb42c23          	sw	a1,-40(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:112
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20405b8a:	fdc42503          	lw	a0,-36(s0)
20405b8e:	b5fff0ef          	jal	ra,204056ec <__metal_driver_sifive_gpio0_base>
20405b92:	87aa                	mv	a5,a0
20405b94:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:114

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN)) &=
20405b98:	fec42783          	lw	a5,-20(s0)
20405b9c:	03878793          	addi	a5,a5,56
20405ba0:	439c                	lw	a5,0(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:115
        ~source;
20405ba2:	fd842703          	lw	a4,-40(s0)
20405ba6:	fff74713          	not	a4,a4
20405baa:	86ba                	mv	a3,a4
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:114
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN)) &=
20405bac:	fec42703          	lw	a4,-20(s0)
20405bb0:	03870713          	addi	a4,a4,56
20405bb4:	8ff5                	and	a5,a5,a3
20405bb6:	c31c                	sw	a5,0(a4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:117

    return 0;
20405bb8:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:118
}
20405bba:	853e                	mv	a0,a5
20405bbc:	50b2                	lw	ra,44(sp)
20405bbe:	5422                	lw	s0,40(sp)
20405bc0:	6145                	addi	sp,sp,48
20405bc2:	8082                	ret

20405bc4 <__metal_driver_sifive_gpio0_config_int>:
__metal_driver_sifive_gpio0_config_int():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:121

int __metal_driver_sifive_gpio0_config_int(struct metal_gpio *ggpio,
                                           long source, int intr_type) {
20405bc4:	7179                	addi	sp,sp,-48
20405bc6:	d606                	sw	ra,44(sp)
20405bc8:	d422                	sw	s0,40(sp)
20405bca:	1800                	addi	s0,sp,48
20405bcc:	fca42e23          	sw	a0,-36(s0)
20405bd0:	fcb42c23          	sw	a1,-40(s0)
20405bd4:	fcc42a23          	sw	a2,-44(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:122
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20405bd8:	fdc42503          	lw	a0,-36(s0)
20405bdc:	b11ff0ef          	jal	ra,204056ec <__metal_driver_sifive_gpio0_base>
20405be0:	87aa                	mv	a5,a0
20405be2:	fef42623          	sw	a5,-20(s0)
20405be6:	fd442703          	lw	a4,-44(s0)
20405bea:	479d                	li	a5,7
20405bec:	1ce7e963          	bltu	a5,a4,20405dbe <__metal_driver_sifive_gpio0_config_int+0x1fa>
20405bf0:	fd442783          	lw	a5,-44(s0)
20405bf4:	00279713          	slli	a4,a5,0x2
20405bf8:	204017b7          	lui	a5,0x20401
20405bfc:	e6c78793          	addi	a5,a5,-404 # 20400e6c <__metal_driver_vtable_sifive_fe310_g000_pll+0xc>
20405c00:	97ba                	add	a5,a5,a4
20405c02:	439c                	lw	a5,0(a5)
20405c04:	8782                	jr	a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:127

    switch (intr_type) {
    case METAL_GPIO_INT_DISABLE:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE)) &= ~source;
20405c06:	fec42783          	lw	a5,-20(s0)
20405c0a:	07e1                	addi	a5,a5,24
20405c0c:	439c                	lw	a5,0(a5)
20405c0e:	fd842703          	lw	a4,-40(s0)
20405c12:	fff74713          	not	a4,a4
20405c16:	86ba                	mv	a3,a4
20405c18:	fec42703          	lw	a4,-20(s0)
20405c1c:	0761                	addi	a4,a4,24
20405c1e:	8ff5                	and	a5,a5,a3
20405c20:	c31c                	sw	a5,0(a4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:129
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE)) &= ~source;
20405c22:	fec42783          	lw	a5,-20(s0)
20405c26:	02078793          	addi	a5,a5,32
20405c2a:	439c                	lw	a5,0(a5)
20405c2c:	fd842703          	lw	a4,-40(s0)
20405c30:	fff74713          	not	a4,a4
20405c34:	86ba                	mv	a3,a4
20405c36:	fec42703          	lw	a4,-20(s0)
20405c3a:	02070713          	addi	a4,a4,32
20405c3e:	8ff5                	and	a5,a5,a3
20405c40:	c31c                	sw	a5,0(a4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:131
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE)) &= ~source;
20405c42:	fec42783          	lw	a5,-20(s0)
20405c46:	02878793          	addi	a5,a5,40
20405c4a:	439c                	lw	a5,0(a5)
20405c4c:	fd842703          	lw	a4,-40(s0)
20405c50:	fff74713          	not	a4,a4
20405c54:	86ba                	mv	a3,a4
20405c56:	fec42703          	lw	a4,-20(s0)
20405c5a:	02870713          	addi	a4,a4,40
20405c5e:	8ff5                	and	a5,a5,a3
20405c60:	c31c                	sw	a5,0(a4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:133
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE)) &= ~source;
20405c62:	fec42783          	lw	a5,-20(s0)
20405c66:	03078793          	addi	a5,a5,48
20405c6a:	439c                	lw	a5,0(a5)
20405c6c:	fd842703          	lw	a4,-40(s0)
20405c70:	fff74713          	not	a4,a4
20405c74:	86ba                	mv	a3,a4
20405c76:	fec42703          	lw	a4,-20(s0)
20405c7a:	03070713          	addi	a4,a4,48
20405c7e:	8ff5                	and	a5,a5,a3
20405c80:	c31c                	sw	a5,0(a4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:134
        break;
20405c82:	aa35                	j	20405dbe <__metal_driver_sifive_gpio0_config_int+0x1fa>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:137
    case METAL_GPIO_INT_RISING:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE)) |= source;
20405c84:	fec42783          	lw	a5,-20(s0)
20405c88:	07e1                	addi	a5,a5,24
20405c8a:	4398                	lw	a4,0(a5)
20405c8c:	fd842783          	lw	a5,-40(s0)
20405c90:	fec42683          	lw	a3,-20(s0)
20405c94:	06e1                	addi	a3,a3,24
20405c96:	8fd9                	or	a5,a5,a4
20405c98:	c29c                	sw	a5,0(a3)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:138
        break;
20405c9a:	a215                	j	20405dbe <__metal_driver_sifive_gpio0_config_int+0x1fa>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:141
    case METAL_GPIO_INT_FALLING:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE)) |= source;
20405c9c:	fec42783          	lw	a5,-20(s0)
20405ca0:	02078793          	addi	a5,a5,32
20405ca4:	4398                	lw	a4,0(a5)
20405ca6:	fd842783          	lw	a5,-40(s0)
20405caa:	fec42683          	lw	a3,-20(s0)
20405cae:	02068693          	addi	a3,a3,32
20405cb2:	8fd9                	or	a5,a5,a4
20405cb4:	c29c                	sw	a5,0(a3)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:142
        break;
20405cb6:	a221                	j	20405dbe <__metal_driver_sifive_gpio0_config_int+0x1fa>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:145
    case METAL_GPIO_INT_BOTH_EDGE:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE)) |= source;
20405cb8:	fec42783          	lw	a5,-20(s0)
20405cbc:	07e1                	addi	a5,a5,24
20405cbe:	4398                	lw	a4,0(a5)
20405cc0:	fd842783          	lw	a5,-40(s0)
20405cc4:	fec42683          	lw	a3,-20(s0)
20405cc8:	06e1                	addi	a3,a3,24
20405cca:	8fd9                	or	a5,a5,a4
20405ccc:	c29c                	sw	a5,0(a3)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:147
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE)) |= source;
20405cce:	fec42783          	lw	a5,-20(s0)
20405cd2:	02078793          	addi	a5,a5,32
20405cd6:	4398                	lw	a4,0(a5)
20405cd8:	fd842783          	lw	a5,-40(s0)
20405cdc:	fec42683          	lw	a3,-20(s0)
20405ce0:	02068693          	addi	a3,a3,32
20405ce4:	8fd9                	or	a5,a5,a4
20405ce6:	c29c                	sw	a5,0(a3)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:148
        break;
20405ce8:	a8d9                	j	20405dbe <__metal_driver_sifive_gpio0_config_int+0x1fa>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:151
    case METAL_GPIO_INT_HIGH:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE)) |= source;
20405cea:	fec42783          	lw	a5,-20(s0)
20405cee:	02878793          	addi	a5,a5,40
20405cf2:	4398                	lw	a4,0(a5)
20405cf4:	fd842783          	lw	a5,-40(s0)
20405cf8:	fec42683          	lw	a3,-20(s0)
20405cfc:	02868693          	addi	a3,a3,40
20405d00:	8fd9                	or	a5,a5,a4
20405d02:	c29c                	sw	a5,0(a3)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:152
        break;
20405d04:	a86d                	j	20405dbe <__metal_driver_sifive_gpio0_config_int+0x1fa>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:155
    case METAL_GPIO_INT_LOW:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE)) |= source;
20405d06:	fec42783          	lw	a5,-20(s0)
20405d0a:	03078793          	addi	a5,a5,48
20405d0e:	4398                	lw	a4,0(a5)
20405d10:	fd842783          	lw	a5,-40(s0)
20405d14:	fec42683          	lw	a3,-20(s0)
20405d18:	03068693          	addi	a3,a3,48
20405d1c:	8fd9                	or	a5,a5,a4
20405d1e:	c29c                	sw	a5,0(a3)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:156
        break;
20405d20:	a879                	j	20405dbe <__metal_driver_sifive_gpio0_config_int+0x1fa>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:159
    case METAL_GPIO_INT_BOTH_LEVEL:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE)) |= source;
20405d22:	fec42783          	lw	a5,-20(s0)
20405d26:	02878793          	addi	a5,a5,40
20405d2a:	4398                	lw	a4,0(a5)
20405d2c:	fd842783          	lw	a5,-40(s0)
20405d30:	fec42683          	lw	a3,-20(s0)
20405d34:	02868693          	addi	a3,a3,40
20405d38:	8fd9                	or	a5,a5,a4
20405d3a:	c29c                	sw	a5,0(a3)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:161
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE)) |= source;
20405d3c:	fec42783          	lw	a5,-20(s0)
20405d40:	03078793          	addi	a5,a5,48
20405d44:	4398                	lw	a4,0(a5)
20405d46:	fd842783          	lw	a5,-40(s0)
20405d4a:	fec42683          	lw	a3,-20(s0)
20405d4e:	03068693          	addi	a3,a3,48
20405d52:	8fd9                	or	a5,a5,a4
20405d54:	c29c                	sw	a5,0(a3)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:162
        break;
20405d56:	a0a5                	j	20405dbe <__metal_driver_sifive_gpio0_config_int+0x1fa>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:165
    case METAL_GPIO_INT_MAX:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE)) |= source;
20405d58:	fec42783          	lw	a5,-20(s0)
20405d5c:	07e1                	addi	a5,a5,24
20405d5e:	4398                	lw	a4,0(a5)
20405d60:	fd842783          	lw	a5,-40(s0)
20405d64:	fec42683          	lw	a3,-20(s0)
20405d68:	06e1                	addi	a3,a3,24
20405d6a:	8fd9                	or	a5,a5,a4
20405d6c:	c29c                	sw	a5,0(a3)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:167
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE)) |= source;
20405d6e:	fec42783          	lw	a5,-20(s0)
20405d72:	02078793          	addi	a5,a5,32
20405d76:	4398                	lw	a4,0(a5)
20405d78:	fd842783          	lw	a5,-40(s0)
20405d7c:	fec42683          	lw	a3,-20(s0)
20405d80:	02068693          	addi	a3,a3,32
20405d84:	8fd9                	or	a5,a5,a4
20405d86:	c29c                	sw	a5,0(a3)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:169
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE)) |= source;
20405d88:	fec42783          	lw	a5,-20(s0)
20405d8c:	02878793          	addi	a5,a5,40
20405d90:	4398                	lw	a4,0(a5)
20405d92:	fd842783          	lw	a5,-40(s0)
20405d96:	fec42683          	lw	a3,-20(s0)
20405d9a:	02868693          	addi	a3,a3,40
20405d9e:	8fd9                	or	a5,a5,a4
20405da0:	c29c                	sw	a5,0(a3)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:171
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE)) |= source;
20405da2:	fec42783          	lw	a5,-20(s0)
20405da6:	03078793          	addi	a5,a5,48
20405daa:	4398                	lw	a4,0(a5)
20405dac:	fd842783          	lw	a5,-40(s0)
20405db0:	fec42683          	lw	a3,-20(s0)
20405db4:	03068693          	addi	a3,a3,48
20405db8:	8fd9                	or	a5,a5,a4
20405dba:	c29c                	sw	a5,0(a3)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:172
        break;
20405dbc:	0001                	nop
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:174
    }
    return 0;
20405dbe:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:175
}
20405dc0:	853e                	mv	a0,a5
20405dc2:	50b2                	lw	ra,44(sp)
20405dc4:	5422                	lw	s0,40(sp)
20405dc6:	6145                	addi	sp,sp,48
20405dc8:	8082                	ret

20405dca <__metal_driver_sifive_gpio0_clear_int>:
__metal_driver_sifive_gpio0_clear_int():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:178

int __metal_driver_sifive_gpio0_clear_int(struct metal_gpio *ggpio, long source,
                                          int intr_type) {
20405dca:	7179                	addi	sp,sp,-48
20405dcc:	d606                	sw	ra,44(sp)
20405dce:	d422                	sw	s0,40(sp)
20405dd0:	1800                	addi	s0,sp,48
20405dd2:	fca42e23          	sw	a0,-36(s0)
20405dd6:	fcb42c23          	sw	a1,-40(s0)
20405dda:	fcc42a23          	sw	a2,-44(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:179
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20405dde:	fdc42503          	lw	a0,-36(s0)
20405de2:	90bff0ef          	jal	ra,204056ec <__metal_driver_sifive_gpio0_base>
20405de6:	87aa                	mv	a5,a0
20405de8:	fef42623          	sw	a5,-20(s0)
20405dec:	fd442703          	lw	a4,-44(s0)
20405df0:	479d                	li	a5,7
20405df2:	14e7ea63          	bltu	a5,a4,20405f46 <__metal_driver_sifive_gpio0_clear_int+0x17c>
20405df6:	fd442783          	lw	a5,-44(s0)
20405dfa:	00279713          	slli	a4,a5,0x2
20405dfe:	204017b7          	lui	a5,0x20401
20405e02:	e8c78793          	addi	a5,a5,-372 # 20400e8c <__metal_driver_vtable_sifive_fe310_g000_pll+0x2c>
20405e06:	97ba                	add	a5,a5,a4
20405e08:	439c                	lw	a5,0(a5)
20405e0a:	8782                	jr	a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:184

    switch (intr_type) {
    case METAL_GPIO_INT_RISING:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP)) |= source;
20405e0c:	fec42783          	lw	a5,-20(s0)
20405e10:	07f1                	addi	a5,a5,28
20405e12:	4398                	lw	a4,0(a5)
20405e14:	fd842783          	lw	a5,-40(s0)
20405e18:	fec42683          	lw	a3,-20(s0)
20405e1c:	06f1                	addi	a3,a3,28
20405e1e:	8fd9                	or	a5,a5,a4
20405e20:	c29c                	sw	a5,0(a3)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:185
        break;
20405e22:	a215                	j	20405f46 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:188
    case METAL_GPIO_INT_FALLING:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP)) |= source;
20405e24:	fec42783          	lw	a5,-20(s0)
20405e28:	02478793          	addi	a5,a5,36
20405e2c:	4398                	lw	a4,0(a5)
20405e2e:	fd842783          	lw	a5,-40(s0)
20405e32:	fec42683          	lw	a3,-20(s0)
20405e36:	02468693          	addi	a3,a3,36
20405e3a:	8fd9                	or	a5,a5,a4
20405e3c:	c29c                	sw	a5,0(a3)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:189
        break;
20405e3e:	a221                	j	20405f46 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:192
    case METAL_GPIO_INT_BOTH_EDGE:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP)) |= source;
20405e40:	fec42783          	lw	a5,-20(s0)
20405e44:	07f1                	addi	a5,a5,28
20405e46:	4398                	lw	a4,0(a5)
20405e48:	fd842783          	lw	a5,-40(s0)
20405e4c:	fec42683          	lw	a3,-20(s0)
20405e50:	06f1                	addi	a3,a3,28
20405e52:	8fd9                	or	a5,a5,a4
20405e54:	c29c                	sw	a5,0(a3)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:194
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP)) |= source;
20405e56:	fec42783          	lw	a5,-20(s0)
20405e5a:	02478793          	addi	a5,a5,36
20405e5e:	4398                	lw	a4,0(a5)
20405e60:	fd842783          	lw	a5,-40(s0)
20405e64:	fec42683          	lw	a3,-20(s0)
20405e68:	02468693          	addi	a3,a3,36
20405e6c:	8fd9                	or	a5,a5,a4
20405e6e:	c29c                	sw	a5,0(a3)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:195
        break;
20405e70:	a8d9                	j	20405f46 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:198
    case METAL_GPIO_INT_HIGH:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP)) |= source;
20405e72:	fec42783          	lw	a5,-20(s0)
20405e76:	02c78793          	addi	a5,a5,44
20405e7a:	4398                	lw	a4,0(a5)
20405e7c:	fd842783          	lw	a5,-40(s0)
20405e80:	fec42683          	lw	a3,-20(s0)
20405e84:	02c68693          	addi	a3,a3,44
20405e88:	8fd9                	or	a5,a5,a4
20405e8a:	c29c                	sw	a5,0(a3)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:199
        break;
20405e8c:	a86d                	j	20405f46 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:202
    case METAL_GPIO_INT_LOW:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP)) |= source;
20405e8e:	fec42783          	lw	a5,-20(s0)
20405e92:	03478793          	addi	a5,a5,52
20405e96:	4398                	lw	a4,0(a5)
20405e98:	fd842783          	lw	a5,-40(s0)
20405e9c:	fec42683          	lw	a3,-20(s0)
20405ea0:	03468693          	addi	a3,a3,52
20405ea4:	8fd9                	or	a5,a5,a4
20405ea6:	c29c                	sw	a5,0(a3)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:203
        break;
20405ea8:	a879                	j	20405f46 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:206
    case METAL_GPIO_INT_BOTH_LEVEL:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP)) |= source;
20405eaa:	fec42783          	lw	a5,-20(s0)
20405eae:	02c78793          	addi	a5,a5,44
20405eb2:	4398                	lw	a4,0(a5)
20405eb4:	fd842783          	lw	a5,-40(s0)
20405eb8:	fec42683          	lw	a3,-20(s0)
20405ebc:	02c68693          	addi	a3,a3,44
20405ec0:	8fd9                	or	a5,a5,a4
20405ec2:	c29c                	sw	a5,0(a3)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:208
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP)) |= source;
20405ec4:	fec42783          	lw	a5,-20(s0)
20405ec8:	03478793          	addi	a5,a5,52
20405ecc:	4398                	lw	a4,0(a5)
20405ece:	fd842783          	lw	a5,-40(s0)
20405ed2:	fec42683          	lw	a3,-20(s0)
20405ed6:	03468693          	addi	a3,a3,52
20405eda:	8fd9                	or	a5,a5,a4
20405edc:	c29c                	sw	a5,0(a3)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:209
        break;
20405ede:	a0a5                	j	20405f46 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:212
    case METAL_GPIO_INT_MAX:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP)) |= source;
20405ee0:	fec42783          	lw	a5,-20(s0)
20405ee4:	07f1                	addi	a5,a5,28
20405ee6:	4398                	lw	a4,0(a5)
20405ee8:	fd842783          	lw	a5,-40(s0)
20405eec:	fec42683          	lw	a3,-20(s0)
20405ef0:	06f1                	addi	a3,a3,28
20405ef2:	8fd9                	or	a5,a5,a4
20405ef4:	c29c                	sw	a5,0(a3)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:214
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP)) |= source;
20405ef6:	fec42783          	lw	a5,-20(s0)
20405efa:	02478793          	addi	a5,a5,36
20405efe:	4398                	lw	a4,0(a5)
20405f00:	fd842783          	lw	a5,-40(s0)
20405f04:	fec42683          	lw	a3,-20(s0)
20405f08:	02468693          	addi	a3,a3,36
20405f0c:	8fd9                	or	a5,a5,a4
20405f0e:	c29c                	sw	a5,0(a3)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:216
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP)) |= source;
20405f10:	fec42783          	lw	a5,-20(s0)
20405f14:	02c78793          	addi	a5,a5,44
20405f18:	4398                	lw	a4,0(a5)
20405f1a:	fd842783          	lw	a5,-40(s0)
20405f1e:	fec42683          	lw	a3,-20(s0)
20405f22:	02c68693          	addi	a3,a3,44
20405f26:	8fd9                	or	a5,a5,a4
20405f28:	c29c                	sw	a5,0(a3)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:218
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP)) |= source;
20405f2a:	fec42783          	lw	a5,-20(s0)
20405f2e:	03478793          	addi	a5,a5,52
20405f32:	4398                	lw	a4,0(a5)
20405f34:	fd842783          	lw	a5,-40(s0)
20405f38:	fec42683          	lw	a3,-20(s0)
20405f3c:	03468693          	addi	a3,a3,52
20405f40:	8fd9                	or	a5,a5,a4
20405f42:	c29c                	sw	a5,0(a3)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:219
        break;
20405f44:	0001                	nop
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:221
    }
    return 0;
20405f46:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:222
}
20405f48:	853e                	mv	a0,a5
20405f4a:	50b2                	lw	ra,44(sp)
20405f4c:	5422                	lw	s0,40(sp)
20405f4e:	6145                	addi	sp,sp,48
20405f50:	8082                	ret

20405f52 <__metal_driver_gpio_interrupt_controller>:
__metal_driver_gpio_interrupt_controller():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:225

struct metal_interrupt *
__metal_driver_gpio_interrupt_controller(struct metal_gpio *gpio) {
20405f52:	1101                	addi	sp,sp,-32
20405f54:	ce06                	sw	ra,28(sp)
20405f56:	cc22                	sw	s0,24(sp)
20405f58:	1000                	addi	s0,sp,32
20405f5a:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:226
    return __metal_driver_sifive_gpio0_interrupt_parent(gpio);
20405f5e:	fec42503          	lw	a0,-20(s0)
20405f62:	fb0ff0ef          	jal	ra,20405712 <__metal_driver_sifive_gpio0_interrupt_parent>
20405f66:	87aa                	mv	a5,a0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:227
}
20405f68:	853e                	mv	a0,a5
20405f6a:	40f2                	lw	ra,28(sp)
20405f6c:	4462                	lw	s0,24(sp)
20405f6e:	6105                	addi	sp,sp,32
20405f70:	8082                	ret

20405f72 <__metal_driver_gpio_get_interrupt_id>:
__metal_driver_gpio_get_interrupt_id():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:229

int __metal_driver_gpio_get_interrupt_id(struct metal_gpio *gpio, int pin) {
20405f72:	7179                	addi	sp,sp,-48
20405f74:	d606                	sw	ra,44(sp)
20405f76:	d422                	sw	s0,40(sp)
20405f78:	1800                	addi	s0,sp,48
20405f7a:	fca42e23          	sw	a0,-36(s0)
20405f7e:	fcb42c23          	sw	a1,-40(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:231
    int irq;
    irq = __metal_driver_sifive_gpio0_interrupt_lines(gpio, pin);
20405f82:	fd842583          	lw	a1,-40(s0)
20405f86:	fdc42503          	lw	a0,-36(s0)
20405f8a:	fb2ff0ef          	jal	ra,2040573c <__metal_driver_sifive_gpio0_interrupt_lines>
20405f8e:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:232
    return irq;
20405f92:	fec42783          	lw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_gpio0.c:233
}
20405f96:	853e                	mv	a0,a5
20405f98:	50b2                	lw	ra,44(sp)
20405f9a:	5422                	lw	s0,40(sp)
20405f9c:	6145                	addi	sp,sp,48
20405f9e:	8082                	ret

20405fa0 <__metal_driver_sifive_test0_base>:
__metal_driver_sifive_test0_base():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:863
{
20405fa0:	1101                	addi	sp,sp,-32
20405fa2:	ce22                	sw	s0,28(sp)
20405fa4:	1000                	addi	s0,sp,32
20405fa6:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:864
	if ((uintptr_t)sd == (uintptr_t)&__metal_dt_test_100000) {
20405faa:	fec42703          	lw	a4,-20(s0)
20405fae:	82018793          	addi	a5,gp,-2016 # 80000e50 <__metal_dt_test_100000>
20405fb2:	00f71563          	bne	a4,a5,20405fbc <__metal_driver_sifive_test0_base+0x1c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:865
		return METAL_SIFIVE_TEST0_100000_BASE_ADDRESS;
20405fb6:	001007b7          	lui	a5,0x100
20405fba:	a011                	j	20405fbe <__metal_driver_sifive_test0_base+0x1e>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:868
		return 0;
20405fbc:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:870
}
20405fbe:	853e                	mv	a0,a5
20405fc0:	4472                	lw	s0,28(sp)
20405fc2:	6105                	addi	sp,sp,32
20405fc4:	8082                	ret

20405fc6 <__metal_driver_sifive_test0_exit>:
__metal_driver_sifive_test0_exit():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_test0.c:18
#include <metal/io.h>

void __metal_driver_sifive_test0_exit(const struct __metal_shutdown *sd,
                                      int code) __attribute__((noreturn));
void __metal_driver_sifive_test0_exit(const struct __metal_shutdown *sd,
                                      int code) {
20405fc6:	7179                	addi	sp,sp,-48
20405fc8:	d606                	sw	ra,44(sp)
20405fca:	d422                	sw	s0,40(sp)
20405fcc:	1800                	addi	s0,sp,48
20405fce:	fca42e23          	sw	a0,-36(s0)
20405fd2:	fcb42c23          	sw	a1,-40(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_test0.c:19
    long base = __metal_driver_sifive_test0_base(sd);
20405fd6:	fdc42503          	lw	a0,-36(s0)
20405fda:	37d9                	jal	20405fa0 <__metal_driver_sifive_test0_base>
20405fdc:	87aa                	mv	a5,a0
20405fde:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_test0.c:20
    uint32_t out = (code << 16) + (code == 0 ? 0x5555 : 0x3333);
20405fe2:	fd842783          	lw	a5,-40(s0)
20405fe6:	01079713          	slli	a4,a5,0x10
20405fea:	fd842783          	lw	a5,-40(s0)
20405fee:	e789                	bnez	a5,20405ff8 <__metal_driver_sifive_test0_exit+0x32>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_test0.c:20 (discriminator 1)
20405ff0:	6795                	lui	a5,0x5
20405ff2:	55578793          	addi	a5,a5,1365 # 5555 <__heap_size+0x4d55>
20405ff6:	a021                	j	20405ffe <__metal_driver_sifive_test0_exit+0x38>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_test0.c:20 (discriminator 2)
20405ff8:	678d                	lui	a5,0x3
20405ffa:	33378793          	addi	a5,a5,819 # 3333 <__heap_size+0x2b33>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_test0.c:20 (discriminator 4)
20405ffe:	97ba                	add	a5,a5,a4
20406000:	fef42423          	sw	a5,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_test0.c:22 (discriminator 1)
    while (1) {
        __METAL_ACCESS_ONCE((
20406004:	fec42783          	lw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_test0.c:23 (discriminator 1)
            __metal_io_u32 *)(base + METAL_SIFIVE_TEST0_FINISHER_OFFSET)) = out;
20406008:	fe842703          	lw	a4,-24(s0)
2040600c:	c398                	sw	a4,0(a5)
2040600e:	bfdd                	j	20406004 <__metal_driver_sifive_test0_exit+0x3e>

20406010 <__metal_driver_sifive_uart0_control_base>:
__metal_driver_sifive_uart0_control_base():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:888
{
20406010:	1101                	addi	sp,sp,-32
20406012:	ce22                	sw	s0,28(sp)
20406014:	1000                	addi	s0,sp,32
20406016:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:889
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
2040601a:	fec42703          	lw	a4,-20(s0)
2040601e:	800017b7          	lui	a5,0x80001
20406022:	de878793          	addi	a5,a5,-536 # 80000de8 <metal_segment_heap_target_end+0xfffff2e8>
20406026:	00f71563          	bne	a4,a5,20406030 <__metal_driver_sifive_uart0_control_base+0x20>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:890
		return METAL_SIFIVE_UART0_10013000_BASE_ADDRESS;
2040602a:	100137b7          	lui	a5,0x10013
2040602e:	a011                	j	20406032 <__metal_driver_sifive_uart0_control_base+0x22>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:893
		return 0;
20406030:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:895
}
20406032:	853e                	mv	a0,a5
20406034:	4472                	lw	s0,28(sp)
20406036:	6105                	addi	sp,sp,32
20406038:	8082                	ret

2040603a <__metal_driver_sifive_uart0_interrupt_parent>:
__metal_driver_sifive_uart0_interrupt_parent():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:918
{
2040603a:	1101                	addi	sp,sp,-32
2040603c:	ce22                	sw	s0,28(sp)
2040603e:	1000                	addi	s0,sp,32
20406040:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:919
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20406044:	fec42703          	lw	a4,-20(s0)
20406048:	800017b7          	lui	a5,0x80001
2040604c:	de878793          	addi	a5,a5,-536 # 80000de8 <metal_segment_heap_target_end+0xfffff2e8>
20406050:	00f71763          	bne	a4,a5,2040605e <__metal_driver_sifive_uart0_interrupt_parent+0x24>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:920
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
20406054:	800017b7          	lui	a5,0x80001
20406058:	ae878793          	addi	a5,a5,-1304 # 80000ae8 <metal_segment_heap_target_end+0xffffefe8>
2040605c:	a011                	j	20406060 <__metal_driver_sifive_uart0_interrupt_parent+0x26>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:923
		return 0;
2040605e:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:925
}
20406060:	853e                	mv	a0,a5
20406062:	4472                	lw	s0,28(sp)
20406064:	6105                	addi	sp,sp,32
20406066:	8082                	ret

20406068 <__metal_driver_sifive_uart0_interrupt_line>:
__metal_driver_sifive_uart0_interrupt_line():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:928
{
20406068:	1101                	addi	sp,sp,-32
2040606a:	ce22                	sw	s0,28(sp)
2040606c:	1000                	addi	s0,sp,32
2040606e:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:929
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20406072:	fec42703          	lw	a4,-20(s0)
20406076:	800017b7          	lui	a5,0x80001
2040607a:	de878793          	addi	a5,a5,-536 # 80000de8 <metal_segment_heap_target_end+0xfffff2e8>
2040607e:	00f71463          	bne	a4,a5,20406086 <__metal_driver_sifive_uart0_interrupt_line+0x1e>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:930
		return 5;
20406082:	4795                	li	a5,5
20406084:	a011                	j	20406088 <__metal_driver_sifive_uart0_interrupt_line+0x20>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:933
		return 0;
20406086:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:935
}
20406088:	853e                	mv	a0,a5
2040608a:	4472                	lw	s0,28(sp)
2040608c:	6105                	addi	sp,sp,32
2040608e:	8082                	ret

20406090 <__metal_driver_sifive_uart0_clock>:
__metal_driver_sifive_uart0_clock():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:938
{
20406090:	1101                	addi	sp,sp,-32
20406092:	ce22                	sw	s0,28(sp)
20406094:	1000                	addi	s0,sp,32
20406096:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:939
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
2040609a:	fec42703          	lw	a4,-20(s0)
2040609e:	800017b7          	lui	a5,0x80001
204060a2:	de878793          	addi	a5,a5,-536 # 80000de8 <metal_segment_heap_target_end+0xfffff2e8>
204060a6:	00f71763          	bne	a4,a5,204060b4 <__metal_driver_sifive_uart0_clock+0x24>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:940
		return (struct metal_clock *)&__metal_dt_clock_4.clock;
204060aa:	800017b7          	lui	a5,0x80001
204060ae:	e2078793          	addi	a5,a5,-480 # 80000e20 <metal_segment_heap_target_end+0xfffff320>
204060b2:	a011                	j	204060b6 <__metal_driver_sifive_uart0_clock+0x26>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:943
		return 0;
204060b4:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:945
}
204060b6:	853e                	mv	a0,a5
204060b8:	4472                	lw	s0,28(sp)
204060ba:	6105                	addi	sp,sp,32
204060bc:	8082                	ret

204060be <__metal_driver_sifive_uart0_pinmux>:
__metal_driver_sifive_uart0_pinmux():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:948
{
204060be:	1101                	addi	sp,sp,-32
204060c0:	ce22                	sw	s0,28(sp)
204060c2:	1000                	addi	s0,sp,32
204060c4:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:949
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
204060c8:	fec42703          	lw	a4,-20(s0)
204060cc:	800017b7          	lui	a5,0x80001
204060d0:	de878793          	addi	a5,a5,-536 # 80000de8 <metal_segment_heap_target_end+0xfffff2e8>
204060d4:	00f71563          	bne	a4,a5,204060de <__metal_driver_sifive_uart0_pinmux+0x20>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:950
		return (struct __metal_driver_sifive_gpio0 *)&__metal_dt_gpio_10012000;
204060d8:	81c18793          	addi	a5,gp,-2020 # 80000e4c <__metal_dt_gpio_10012000>
204060dc:	a011                	j	204060e0 <__metal_driver_sifive_uart0_pinmux+0x22>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:953
		return 0;
204060de:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:955
}
204060e0:	853e                	mv	a0,a5
204060e2:	4472                	lw	s0,28(sp)
204060e4:	6105                	addi	sp,sp,32
204060e6:	8082                	ret

204060e8 <__metal_driver_sifive_uart0_pinmux_output_selector>:
__metal_driver_sifive_uart0_pinmux_output_selector():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:958
{
204060e8:	1101                	addi	sp,sp,-32
204060ea:	ce22                	sw	s0,28(sp)
204060ec:	1000                	addi	s0,sp,32
204060ee:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:959
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
204060f2:	fec42703          	lw	a4,-20(s0)
204060f6:	800017b7          	lui	a5,0x80001
204060fa:	de878793          	addi	a5,a5,-536 # 80000de8 <metal_segment_heap_target_end+0xfffff2e8>
204060fe:	00f71463          	bne	a4,a5,20406106 <__metal_driver_sifive_uart0_pinmux_output_selector+0x1e>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:960
		return 0;
20406102:	4781                	li	a5,0
20406104:	a011                	j	20406108 <__metal_driver_sifive_uart0_pinmux_output_selector+0x20>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:963
		return 0;
20406106:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:965
}
20406108:	853e                	mv	a0,a5
2040610a:	4472                	lw	s0,28(sp)
2040610c:	6105                	addi	sp,sp,32
2040610e:	8082                	ret

20406110 <__metal_driver_sifive_uart0_pinmux_source_selector>:
__metal_driver_sifive_uart0_pinmux_source_selector():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:968
{
20406110:	1101                	addi	sp,sp,-32
20406112:	ce22                	sw	s0,28(sp)
20406114:	1000                	addi	s0,sp,32
20406116:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:969
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
2040611a:	fec42703          	lw	a4,-20(s0)
2040611e:	800017b7          	lui	a5,0x80001
20406122:	de878793          	addi	a5,a5,-536 # 80000de8 <metal_segment_heap_target_end+0xfffff2e8>
20406126:	00f71563          	bne	a4,a5,20406130 <__metal_driver_sifive_uart0_pinmux_source_selector+0x20>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:970
		return 196608;
2040612a:	000307b7          	lui	a5,0x30
2040612e:	a011                	j	20406132 <__metal_driver_sifive_uart0_pinmux_source_selector+0x22>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:973
		return 0;
20406130:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:975
}
20406132:	853e                	mv	a0,a5
20406134:	4472                	lw	s0,28(sp)
20406136:	6105                	addi	sp,sp,32
20406138:	8082                	ret

2040613a <__metal_driver_sifive_uart0_interrupt_controller>:
__metal_driver_sifive_uart0_interrupt_controller():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:37
    (__METAL_ACCESS_ONCE((__metal_io_u8 *)UART_REG(offset)))
#define UART_REGW(offset)                                                      \
    (__METAL_ACCESS_ONCE((__metal_io_u32 *)UART_REG(offset)))

struct metal_interrupt *
__metal_driver_sifive_uart0_interrupt_controller(struct metal_uart *uart) {
2040613a:	1101                	addi	sp,sp,-32
2040613c:	ce06                	sw	ra,28(sp)
2040613e:	cc22                	sw	s0,24(sp)
20406140:	1000                	addi	s0,sp,32
20406142:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:38
    return __metal_driver_sifive_uart0_interrupt_parent(uart);
20406146:	fec42503          	lw	a0,-20(s0)
2040614a:	3dc5                	jal	2040603a <__metal_driver_sifive_uart0_interrupt_parent>
2040614c:	87aa                	mv	a5,a0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:39
}
2040614e:	853e                	mv	a0,a5
20406150:	40f2                	lw	ra,28(sp)
20406152:	4462                	lw	s0,24(sp)
20406154:	6105                	addi	sp,sp,32
20406156:	8082                	ret

20406158 <__metal_driver_sifive_uart0_get_interrupt_id>:
__metal_driver_sifive_uart0_get_interrupt_id():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:41

int __metal_driver_sifive_uart0_get_interrupt_id(struct metal_uart *uart) {
20406158:	1101                	addi	sp,sp,-32
2040615a:	ce06                	sw	ra,28(sp)
2040615c:	cc22                	sw	s0,24(sp)
2040615e:	1000                	addi	s0,sp,32
20406160:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:42
    return __metal_driver_sifive_uart0_interrupt_line(uart);
20406164:	fec42503          	lw	a0,-20(s0)
20406168:	3701                	jal	20406068 <__metal_driver_sifive_uart0_interrupt_line>
2040616a:	87aa                	mv	a5,a0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:43
}
2040616c:	853e                	mv	a0,a5
2040616e:	40f2                	lw	ra,28(sp)
20406170:	4462                	lw	s0,24(sp)
20406172:	6105                	addi	sp,sp,32
20406174:	8082                	ret

20406176 <__metal_driver_sifive_uart0_tx_interrupt_enable>:
__metal_driver_sifive_uart0_tx_interrupt_enable():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:45

int __metal_driver_sifive_uart0_tx_interrupt_enable(struct metal_uart *uart) {
20406176:	7179                	addi	sp,sp,-48
20406178:	d606                	sw	ra,44(sp)
2040617a:	d422                	sw	s0,40(sp)
2040617c:	1800                	addi	s0,sp,48
2040617e:	fca42e23          	sw	a0,-36(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:46
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20406182:	fdc42503          	lw	a0,-36(s0)
20406186:	3569                	jal	20406010 <__metal_driver_sifive_uart0_control_base>
20406188:	87aa                	mv	a5,a0
2040618a:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:48

    UART_REGW(METAL_SIFIVE_UART0_IE) |= UART_TXWM;
2040618e:	fec42783          	lw	a5,-20(s0)
20406192:	07c1                	addi	a5,a5,16
20406194:	439c                	lw	a5,0(a5)
20406196:	fec42703          	lw	a4,-20(s0)
2040619a:	0741                	addi	a4,a4,16
2040619c:	0017e793          	ori	a5,a5,1
204061a0:	c31c                	sw	a5,0(a4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:49
    return 0;
204061a2:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:50
}
204061a4:	853e                	mv	a0,a5
204061a6:	50b2                	lw	ra,44(sp)
204061a8:	5422                	lw	s0,40(sp)
204061aa:	6145                	addi	sp,sp,48
204061ac:	8082                	ret

204061ae <__metal_driver_sifive_uart0_tx_interrupt_disable>:
__metal_driver_sifive_uart0_tx_interrupt_disable():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:52

int __metal_driver_sifive_uart0_tx_interrupt_disable(struct metal_uart *uart) {
204061ae:	7179                	addi	sp,sp,-48
204061b0:	d606                	sw	ra,44(sp)
204061b2:	d422                	sw	s0,40(sp)
204061b4:	1800                	addi	s0,sp,48
204061b6:	fca42e23          	sw	a0,-36(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:53
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
204061ba:	fdc42503          	lw	a0,-36(s0)
204061be:	3d89                	jal	20406010 <__metal_driver_sifive_uart0_control_base>
204061c0:	87aa                	mv	a5,a0
204061c2:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:55

    UART_REGW(METAL_SIFIVE_UART0_IE) &= ~UART_TXWM;
204061c6:	fec42783          	lw	a5,-20(s0)
204061ca:	07c1                	addi	a5,a5,16
204061cc:	439c                	lw	a5,0(a5)
204061ce:	fec42703          	lw	a4,-20(s0)
204061d2:	0741                	addi	a4,a4,16
204061d4:	9bf9                	andi	a5,a5,-2
204061d6:	c31c                	sw	a5,0(a4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:56
    return 0;
204061d8:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:57
}
204061da:	853e                	mv	a0,a5
204061dc:	50b2                	lw	ra,44(sp)
204061de:	5422                	lw	s0,40(sp)
204061e0:	6145                	addi	sp,sp,48
204061e2:	8082                	ret

204061e4 <__metal_driver_sifive_uart0_rx_interrupt_enable>:
__metal_driver_sifive_uart0_rx_interrupt_enable():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:59

int __metal_driver_sifive_uart0_rx_interrupt_enable(struct metal_uart *uart) {
204061e4:	7179                	addi	sp,sp,-48
204061e6:	d606                	sw	ra,44(sp)
204061e8:	d422                	sw	s0,40(sp)
204061ea:	1800                	addi	s0,sp,48
204061ec:	fca42e23          	sw	a0,-36(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:60
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
204061f0:	fdc42503          	lw	a0,-36(s0)
204061f4:	e1dff0ef          	jal	ra,20406010 <__metal_driver_sifive_uart0_control_base>
204061f8:	87aa                	mv	a5,a0
204061fa:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:62

    UART_REGW(METAL_SIFIVE_UART0_IE) |= UART_RXWM;
204061fe:	fec42783          	lw	a5,-20(s0)
20406202:	07c1                	addi	a5,a5,16
20406204:	439c                	lw	a5,0(a5)
20406206:	fec42703          	lw	a4,-20(s0)
2040620a:	0741                	addi	a4,a4,16
2040620c:	0027e793          	ori	a5,a5,2
20406210:	c31c                	sw	a5,0(a4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:63
    return 0;
20406212:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:64
}
20406214:	853e                	mv	a0,a5
20406216:	50b2                	lw	ra,44(sp)
20406218:	5422                	lw	s0,40(sp)
2040621a:	6145                	addi	sp,sp,48
2040621c:	8082                	ret

2040621e <__metal_driver_sifive_uart0_rx_interrupt_disable>:
__metal_driver_sifive_uart0_rx_interrupt_disable():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:66

int __metal_driver_sifive_uart0_rx_interrupt_disable(struct metal_uart *uart) {
2040621e:	7179                	addi	sp,sp,-48
20406220:	d606                	sw	ra,44(sp)
20406222:	d422                	sw	s0,40(sp)
20406224:	1800                	addi	s0,sp,48
20406226:	fca42e23          	sw	a0,-36(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:67
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
2040622a:	fdc42503          	lw	a0,-36(s0)
2040622e:	de3ff0ef          	jal	ra,20406010 <__metal_driver_sifive_uart0_control_base>
20406232:	87aa                	mv	a5,a0
20406234:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:69

    UART_REGW(METAL_SIFIVE_UART0_IE) &= ~UART_RXWM;
20406238:	fec42783          	lw	a5,-20(s0)
2040623c:	07c1                	addi	a5,a5,16
2040623e:	439c                	lw	a5,0(a5)
20406240:	fec42703          	lw	a4,-20(s0)
20406244:	0741                	addi	a4,a4,16
20406246:	9bf5                	andi	a5,a5,-3
20406248:	c31c                	sw	a5,0(a4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:70
    return 0;
2040624a:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:71
}
2040624c:	853e                	mv	a0,a5
2040624e:	50b2                	lw	ra,44(sp)
20406250:	5422                	lw	s0,40(sp)
20406252:	6145                	addi	sp,sp,48
20406254:	8082                	ret

20406256 <__metal_driver_sifive_uart0_txready>:
__metal_driver_sifive_uart0_txready():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:73

int __metal_driver_sifive_uart0_txready(struct metal_uart *uart) {
20406256:	7179                	addi	sp,sp,-48
20406258:	d606                	sw	ra,44(sp)
2040625a:	d422                	sw	s0,40(sp)
2040625c:	1800                	addi	s0,sp,48
2040625e:	fca42e23          	sw	a0,-36(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:74
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20406262:	fdc42503          	lw	a0,-36(s0)
20406266:	dabff0ef          	jal	ra,20406010 <__metal_driver_sifive_uart0_control_base>
2040626a:	87aa                	mv	a5,a0
2040626c:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:76

    return !!((UART_REGW(METAL_SIFIVE_UART0_TXDATA) & UART_TXFULL));
20406270:	fec42783          	lw	a5,-20(s0)
20406274:	439c                	lw	a5,0(a5)
20406276:	83fd                	srli	a5,a5,0x1f
20406278:	0ff7f793          	zext.b	a5,a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:77
}
2040627c:	853e                	mv	a0,a5
2040627e:	50b2                	lw	ra,44(sp)
20406280:	5422                	lw	s0,40(sp)
20406282:	6145                	addi	sp,sp,48
20406284:	8082                	ret

20406286 <__metal_driver_sifive_uart0_set_tx_watermark>:
__metal_driver_sifive_uart0_set_tx_watermark():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:80

int __metal_driver_sifive_uart0_set_tx_watermark(struct metal_uart *uart,
                                                 size_t level) {
20406286:	7179                	addi	sp,sp,-48
20406288:	d606                	sw	ra,44(sp)
2040628a:	d422                	sw	s0,40(sp)
2040628c:	1800                	addi	s0,sp,48
2040628e:	fca42e23          	sw	a0,-36(s0)
20406292:	fcb42c23          	sw	a1,-40(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:81
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20406296:	fdc42503          	lw	a0,-36(s0)
2040629a:	d77ff0ef          	jal	ra,20406010 <__metal_driver_sifive_uart0_control_base>
2040629e:	87aa                	mv	a5,a0
204062a0:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:83

    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXCNT(level);
204062a4:	fec42783          	lw	a5,-20(s0)
204062a8:	07a1                	addi	a5,a5,8
204062aa:	4398                	lw	a4,0(a5)
204062ac:	fd842783          	lw	a5,-40(s0)
204062b0:	01079693          	slli	a3,a5,0x10
204062b4:	000707b7          	lui	a5,0x70
204062b8:	8ff5                	and	a5,a5,a3
204062ba:	fec42683          	lw	a3,-20(s0)
204062be:	06a1                	addi	a3,a3,8
204062c0:	8fd9                	or	a5,a5,a4
204062c2:	c29c                	sw	a5,0(a3)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:84
    return 0;
204062c4:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:85
}
204062c6:	853e                	mv	a0,a5
204062c8:	50b2                	lw	ra,44(sp)
204062ca:	5422                	lw	s0,40(sp)
204062cc:	6145                	addi	sp,sp,48
204062ce:	8082                	ret

204062d0 <__metal_driver_sifive_uart0_get_tx_watermark>:
__metal_driver_sifive_uart0_get_tx_watermark():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:87

size_t __metal_driver_sifive_uart0_get_tx_watermark(struct metal_uart *uart) {
204062d0:	7179                	addi	sp,sp,-48
204062d2:	d606                	sw	ra,44(sp)
204062d4:	d422                	sw	s0,40(sp)
204062d6:	1800                	addi	s0,sp,48
204062d8:	fca42e23          	sw	a0,-36(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:88
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
204062dc:	fdc42503          	lw	a0,-36(s0)
204062e0:	d31ff0ef          	jal	ra,20406010 <__metal_driver_sifive_uart0_control_base>
204062e4:	87aa                	mv	a5,a0
204062e6:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:90

    return ((UART_REGW(METAL_SIFIVE_UART0_TXCTRL) >> 16) & 0x7);
204062ea:	fec42783          	lw	a5,-20(s0)
204062ee:	07a1                	addi	a5,a5,8
204062f0:	439c                	lw	a5,0(a5)
204062f2:	83c1                	srli	a5,a5,0x10
204062f4:	8b9d                	andi	a5,a5,7
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:91
}
204062f6:	853e                	mv	a0,a5
204062f8:	50b2                	lw	ra,44(sp)
204062fa:	5422                	lw	s0,40(sp)
204062fc:	6145                	addi	sp,sp,48
204062fe:	8082                	ret

20406300 <__metal_driver_sifive_uart0_set_rx_watermark>:
__metal_driver_sifive_uart0_set_rx_watermark():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:94

int __metal_driver_sifive_uart0_set_rx_watermark(struct metal_uart *uart,
                                                 size_t level) {
20406300:	7179                	addi	sp,sp,-48
20406302:	d606                	sw	ra,44(sp)
20406304:	d422                	sw	s0,40(sp)
20406306:	1800                	addi	s0,sp,48
20406308:	fca42e23          	sw	a0,-36(s0)
2040630c:	fcb42c23          	sw	a1,-40(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:95
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20406310:	fdc42503          	lw	a0,-36(s0)
20406314:	cfdff0ef          	jal	ra,20406010 <__metal_driver_sifive_uart0_control_base>
20406318:	87aa                	mv	a5,a0
2040631a:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:97

    UART_REGW(METAL_SIFIVE_UART0_RXCTRL) |= UART_RXCNT(level);
2040631e:	fec42783          	lw	a5,-20(s0)
20406322:	07b1                	addi	a5,a5,12
20406324:	4398                	lw	a4,0(a5)
20406326:	fd842783          	lw	a5,-40(s0)
2040632a:	01079693          	slli	a3,a5,0x10
2040632e:	000707b7          	lui	a5,0x70
20406332:	8ff5                	and	a5,a5,a3
20406334:	fec42683          	lw	a3,-20(s0)
20406338:	06b1                	addi	a3,a3,12
2040633a:	8fd9                	or	a5,a5,a4
2040633c:	c29c                	sw	a5,0(a3)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:98
    return 0;
2040633e:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:99
}
20406340:	853e                	mv	a0,a5
20406342:	50b2                	lw	ra,44(sp)
20406344:	5422                	lw	s0,40(sp)
20406346:	6145                	addi	sp,sp,48
20406348:	8082                	ret

2040634a <__metal_driver_sifive_uart0_get_rx_watermark>:
__metal_driver_sifive_uart0_get_rx_watermark():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:101

size_t __metal_driver_sifive_uart0_get_rx_watermark(struct metal_uart *uart) {
2040634a:	7179                	addi	sp,sp,-48
2040634c:	d606                	sw	ra,44(sp)
2040634e:	d422                	sw	s0,40(sp)
20406350:	1800                	addi	s0,sp,48
20406352:	fca42e23          	sw	a0,-36(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:102
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20406356:	fdc42503          	lw	a0,-36(s0)
2040635a:	cb7ff0ef          	jal	ra,20406010 <__metal_driver_sifive_uart0_control_base>
2040635e:	87aa                	mv	a5,a0
20406360:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:104

    return ((UART_REGW(METAL_SIFIVE_UART0_RXCTRL) >> 16) & 0x7);
20406364:	fec42783          	lw	a5,-20(s0)
20406368:	07b1                	addi	a5,a5,12
2040636a:	439c                	lw	a5,0(a5)
2040636c:	83c1                	srli	a5,a5,0x10
2040636e:	8b9d                	andi	a5,a5,7
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:105
}
20406370:	853e                	mv	a0,a5
20406372:	50b2                	lw	ra,44(sp)
20406374:	5422                	lw	s0,40(sp)
20406376:	6145                	addi	sp,sp,48
20406378:	8082                	ret

2040637a <__metal_driver_sifive_uart0_putc>:
__metal_driver_sifive_uart0_putc():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:107

int __metal_driver_sifive_uart0_putc(struct metal_uart *uart, int c) {
2040637a:	7179                	addi	sp,sp,-48
2040637c:	d606                	sw	ra,44(sp)
2040637e:	d422                	sw	s0,40(sp)
20406380:	1800                	addi	s0,sp,48
20406382:	fca42e23          	sw	a0,-36(s0)
20406386:	fcb42c23          	sw	a1,-40(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:108
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
2040638a:	fdc42503          	lw	a0,-36(s0)
2040638e:	c83ff0ef          	jal	ra,20406010 <__metal_driver_sifive_uart0_control_base>
20406392:	87aa                	mv	a5,a0
20406394:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:110

    while (__metal_driver_sifive_uart0_txready(uart) != 0) {
20406398:	0001                	nop
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:110 (discriminator 1)
2040639a:	fdc42503          	lw	a0,-36(s0)
2040639e:	3d65                	jal	20406256 <__metal_driver_sifive_uart0_txready>
204063a0:	87aa                	mv	a5,a0
204063a2:	ffe5                	bnez	a5,2040639a <__metal_driver_sifive_uart0_putc+0x20>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:113
        /* wait */
    }
    UART_REGW(METAL_SIFIVE_UART0_TXDATA) = c;
204063a4:	fec42783          	lw	a5,-20(s0)
204063a8:	fd842703          	lw	a4,-40(s0)
204063ac:	c398                	sw	a4,0(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:114
    return 0;
204063ae:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:115
}
204063b0:	853e                	mv	a0,a5
204063b2:	50b2                	lw	ra,44(sp)
204063b4:	5422                	lw	s0,40(sp)
204063b6:	6145                	addi	sp,sp,48
204063b8:	8082                	ret

204063ba <__metal_driver_sifive_uart0_getc>:
__metal_driver_sifive_uart0_getc():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:117

int __metal_driver_sifive_uart0_getc(struct metal_uart *uart, int *c) {
204063ba:	7179                	addi	sp,sp,-48
204063bc:	d606                	sw	ra,44(sp)
204063be:	d422                	sw	s0,40(sp)
204063c0:	1800                	addi	s0,sp,48
204063c2:	fca42e23          	sw	a0,-36(s0)
204063c6:	fcb42c23          	sw	a1,-40(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:119
    uint32_t ch;
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
204063ca:	fdc42503          	lw	a0,-36(s0)
204063ce:	c43ff0ef          	jal	ra,20406010 <__metal_driver_sifive_uart0_control_base>
204063d2:	87aa                	mv	a5,a0
204063d4:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:121
    /* No seperate status register, we get status and the byte at same time */
    ch = UART_REGW(METAL_SIFIVE_UART0_RXDATA);
204063d8:	fec42783          	lw	a5,-20(s0)
204063dc:	0791                	addi	a5,a5,4
204063de:	439c                	lw	a5,0(a5)
204063e0:	fef42423          	sw	a5,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:123
    ;
    if (ch & UART_RXEMPTY) {
204063e4:	fe842783          	lw	a5,-24(s0)
204063e8:	0007d763          	bgez	a5,204063f6 <__metal_driver_sifive_uart0_getc+0x3c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:124
        *c = -1; /* aka: EOF in most of the world */
204063ec:	fd842783          	lw	a5,-40(s0)
204063f0:	577d                	li	a4,-1
204063f2:	c398                	sw	a4,0(a5)
204063f4:	a801                	j	20406404 <__metal_driver_sifive_uart0_getc+0x4a>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:126
    } else {
        *c = ch & 0x0ff;
204063f6:	fe842783          	lw	a5,-24(s0)
204063fa:	0ff7f713          	zext.b	a4,a5
204063fe:	fd842783          	lw	a5,-40(s0)
20406402:	c398                	sw	a4,0(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:128
    }
    return 0;
20406404:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:129
}
20406406:	853e                	mv	a0,a5
20406408:	50b2                	lw	ra,44(sp)
2040640a:	5422                	lw	s0,40(sp)
2040640c:	6145                	addi	sp,sp,48
2040640e:	8082                	ret

20406410 <__metal_driver_sifive_uart0_get_baud_rate>:
__metal_driver_sifive_uart0_get_baud_rate():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:131

int __metal_driver_sifive_uart0_get_baud_rate(struct metal_uart *guart) {
20406410:	7179                	addi	sp,sp,-48
20406412:	d622                	sw	s0,44(sp)
20406414:	1800                	addi	s0,sp,48
20406416:	fca42e23          	sw	a0,-36(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:132
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
2040641a:	fdc42783          	lw	a5,-36(s0)
2040641e:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:133
    return uart->baud_rate;
20406422:	fec42783          	lw	a5,-20(s0)
20406426:	43dc                	lw	a5,4(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:134
}
20406428:	853e                	mv	a0,a5
2040642a:	5432                	lw	s0,44(sp)
2040642c:	6145                	addi	sp,sp,48
2040642e:	8082                	ret

20406430 <__metal_driver_sifive_uart0_set_baud_rate>:
__metal_driver_sifive_uart0_set_baud_rate():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:137

int __metal_driver_sifive_uart0_set_baud_rate(struct metal_uart *guart,
                                              int baud_rate) {
20406430:	7179                	addi	sp,sp,-48
20406432:	d606                	sw	ra,44(sp)
20406434:	d422                	sw	s0,40(sp)
20406436:	1800                	addi	s0,sp,48
20406438:	fca42e23          	sw	a0,-36(s0)
2040643c:	fcb42c23          	sw	a1,-40(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:138
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20406440:	fdc42783          	lw	a5,-36(s0)
20406444:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:139
    long control_base = __metal_driver_sifive_uart0_control_base(guart);
20406448:	fdc42503          	lw	a0,-36(s0)
2040644c:	bc5ff0ef          	jal	ra,20406010 <__metal_driver_sifive_uart0_control_base>
20406450:	87aa                	mv	a5,a0
20406452:	fef42423          	sw	a5,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:140
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
20406456:	fdc42503          	lw	a0,-36(s0)
2040645a:	c37ff0ef          	jal	ra,20406090 <__metal_driver_sifive_uart0_clock>
2040645e:	fea42223          	sw	a0,-28(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:142

    uart->baud_rate = baud_rate;
20406462:	fd842703          	lw	a4,-40(s0)
20406466:	fec42783          	lw	a5,-20(s0)
2040646a:	c3d8                	sw	a4,4(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:144

    if (clock != NULL) {
2040646c:	fe442783          	lw	a5,-28(s0)
20406470:	cbb1                	beqz	a5,204064c4 <__metal_driver_sifive_uart0_set_baud_rate+0x94>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:145
        long clock_rate = clock->vtable->get_rate_hz(clock);
20406472:	fe442783          	lw	a5,-28(s0)
20406476:	439c                	lw	a5,0(a5)
20406478:	439c                	lw	a5,0(a5)
2040647a:	fe442503          	lw	a0,-28(s0)
2040647e:	9782                	jalr	a5
20406480:	fea42023          	sw	a0,-32(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:146
        UART_REGW(METAL_SIFIVE_UART0_DIV) = clock_rate / baud_rate - 1;
20406484:	fe042703          	lw	a4,-32(s0)
20406488:	fd842783          	lw	a5,-40(s0)
2040648c:	02f747b3          	div	a5,a4,a5
20406490:	fff78713          	addi	a4,a5,-1 # 6ffff <__heap_size+0x6f7ff>
20406494:	fe842783          	lw	a5,-24(s0)
20406498:	07e1                	addi	a5,a5,24
2040649a:	c398                	sw	a4,0(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:147
        UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXEN;
2040649c:	fe842783          	lw	a5,-24(s0)
204064a0:	07a1                	addi	a5,a5,8
204064a2:	439c                	lw	a5,0(a5)
204064a4:	fe842703          	lw	a4,-24(s0)
204064a8:	0721                	addi	a4,a4,8
204064aa:	0017e793          	ori	a5,a5,1
204064ae:	c31c                	sw	a5,0(a4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:148
        UART_REGW(METAL_SIFIVE_UART0_RXCTRL) |= UART_RXEN;
204064b0:	fe842783          	lw	a5,-24(s0)
204064b4:	07b1                	addi	a5,a5,12
204064b6:	439c                	lw	a5,0(a5)
204064b8:	fe842703          	lw	a4,-24(s0)
204064bc:	0731                	addi	a4,a4,12
204064be:	0017e793          	ori	a5,a5,1
204064c2:	c31c                	sw	a5,0(a4)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:150
    }
    return 0;
204064c4:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:151
}
204064c6:	853e                	mv	a0,a5
204064c8:	50b2                	lw	ra,44(sp)
204064ca:	5422                	lw	s0,40(sp)
204064cc:	6145                	addi	sp,sp,48
204064ce:	8082                	ret

204064d0 <pre_rate_change_callback_func>:
pre_rate_change_callback_func():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:153

static void pre_rate_change_callback_func(void *priv) {
204064d0:	7139                	addi	sp,sp,-64
204064d2:	de06                	sw	ra,60(sp)
204064d4:	dc22                	sw	s0,56(sp)
204064d6:	0080                	addi	s0,sp,64
204064d8:	fca42623          	sw	a0,-52(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:154
    struct __metal_driver_sifive_uart0 *uart = priv;
204064dc:	fcc42783          	lw	a5,-52(s0)
204064e0:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:156
    long control_base =
        __metal_driver_sifive_uart0_control_base((struct metal_uart *)priv);
204064e4:	fcc42503          	lw	a0,-52(s0)
204064e8:	b29ff0ef          	jal	ra,20406010 <__metal_driver_sifive_uart0_control_base>
204064ec:	87aa                	mv	a5,a0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:155
    long control_base =
204064ee:	fef42423          	sw	a5,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:158
    struct metal_clock *clock =
        __metal_driver_sifive_uart0_clock((struct metal_uart *)priv);
204064f2:	fcc42503          	lw	a0,-52(s0)
204064f6:	b9bff0ef          	jal	ra,20406090 <__metal_driver_sifive_uart0_clock>
204064fa:	fea42223          	sw	a0,-28(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:163

    /* Detect when the TXDATA is empty by setting the transmit watermark count
     * to one and waiting until an interrupt is pending */

    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) &= ~(UART_TXCNT(0x7));
204064fe:	fe842783          	lw	a5,-24(s0)
20406502:	07a1                	addi	a5,a5,8
20406504:	4398                	lw	a4,0(a5)
20406506:	fe842783          	lw	a5,-24(s0)
2040650a:	07a1                	addi	a5,a5,8
2040650c:	86be                	mv	a3,a5
2040650e:	fff907b7          	lui	a5,0xfff90
20406512:	17fd                	addi	a5,a5,-1
20406514:	8ff9                	and	a5,a5,a4
20406516:	c29c                	sw	a5,0(a3)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:164
    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXCNT(1);
20406518:	fe842783          	lw	a5,-24(s0)
2040651c:	07a1                	addi	a5,a5,8
2040651e:	4398                	lw	a4,0(a5)
20406520:	fe842783          	lw	a5,-24(s0)
20406524:	07a1                	addi	a5,a5,8
20406526:	86be                	mv	a3,a5
20406528:	67c1                	lui	a5,0x10
2040652a:	8fd9                	or	a5,a5,a4
2040652c:	c29c                	sw	a5,0(a3)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:166

    while ((UART_REGW(METAL_SIFIVE_UART0_IP) & UART_TXWM) == 0)
2040652e:	0001                	nop
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:166 (discriminator 1)
20406530:	fe842783          	lw	a5,-24(s0)
20406534:	07d1                	addi	a5,a5,20
20406536:	439c                	lw	a5,0(a5)
20406538:	8b85                	andi	a5,a5,1
2040653a:	dbfd                	beqz	a5,20406530 <pre_rate_change_callback_func+0x60>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:174
    /* When the TXDATA clears, the UART is still shifting out the last byte.
     * Calculate the time we must drain to finish transmitting and then wait
     * that long. */

    long bits_per_symbol =
        (UART_REGW(METAL_SIFIVE_UART0_TXCTRL) & (1 << 1)) ? 9 : 10;
2040653c:	fe842783          	lw	a5,-24(s0)
20406540:	07a1                	addi	a5,a5,8
20406542:	439c                	lw	a5,0(a5)
20406544:	8b89                	andi	a5,a5,2
20406546:	c399                	beqz	a5,2040654c <pre_rate_change_callback_func+0x7c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:174 (discriminator 1)
20406548:	47a5                	li	a5,9
2040654a:	a011                	j	2040654e <pre_rate_change_callback_func+0x7e>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:174 (discriminator 2)
2040654c:	47a9                	li	a5,10
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:173
    long bits_per_symbol =
2040654e:	fef42023          	sw	a5,-32(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:175
    long clk_freq = clock->vtable->get_rate_hz(clock);
20406552:	fe442783          	lw	a5,-28(s0)
20406556:	439c                	lw	a5,0(a5)
20406558:	439c                	lw	a5,0(a5)
2040655a:	fe442503          	lw	a0,-28(s0)
2040655e:	9782                	jalr	a5
20406560:	fca42e23          	sw	a0,-36(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:176
    long cycles_to_wait = bits_per_symbol * clk_freq / uart->baud_rate;
20406564:	fe042703          	lw	a4,-32(s0)
20406568:	fdc42783          	lw	a5,-36(s0)
2040656c:	02f707b3          	mul	a5,a4,a5
20406570:	873e                	mv	a4,a5
20406572:	fec42783          	lw	a5,-20(s0)
20406576:	43dc                	lw	a5,4(a5)
20406578:	02f757b3          	divu	a5,a4,a5
2040657c:	fcf42c23          	sw	a5,-40(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:178

    for (volatile long x = 0; x < cycles_to_wait; x++)
20406580:	fc042a23          	sw	zero,-44(s0)
20406584:	a039                	j	20406592 <pre_rate_change_callback_func+0xc2>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:179 (discriminator 3)
        __asm__("nop");
20406586:	0001                	nop
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:178 (discriminator 3)
    for (volatile long x = 0; x < cycles_to_wait; x++)
20406588:	fd442783          	lw	a5,-44(s0)
2040658c:	0785                	addi	a5,a5,1
2040658e:	fcf42a23          	sw	a5,-44(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:178 (discriminator 1)
20406592:	fd442783          	lw	a5,-44(s0)
20406596:	fd842703          	lw	a4,-40(s0)
2040659a:	fee7c6e3          	blt	a5,a4,20406586 <pre_rate_change_callback_func+0xb6>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:180
}
2040659e:	0001                	nop
204065a0:	0001                	nop
204065a2:	50f2                	lw	ra,60(sp)
204065a4:	5462                	lw	s0,56(sp)
204065a6:	6121                	addi	sp,sp,64
204065a8:	8082                	ret

204065aa <post_rate_change_callback_func>:
post_rate_change_callback_func():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:182

static void post_rate_change_callback_func(void *priv) {
204065aa:	7179                	addi	sp,sp,-48
204065ac:	d606                	sw	ra,44(sp)
204065ae:	d422                	sw	s0,40(sp)
204065b0:	1800                	addi	s0,sp,48
204065b2:	fca42e23          	sw	a0,-36(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:183
    struct __metal_driver_sifive_uart0 *uart = priv;
204065b6:	fdc42783          	lw	a5,-36(s0)
204065ba:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:184
    metal_uart_set_baud_rate(&uart->uart, uart->baud_rate);
204065be:	fec42703          	lw	a4,-20(s0)
204065c2:	fec42783          	lw	a5,-20(s0)
204065c6:	43dc                	lw	a5,4(a5)
204065c8:	85be                	mv	a1,a5
204065ca:	853a                	mv	a0,a4
204065cc:	dc9fb0ef          	jal	ra,20402394 <metal_uart_set_baud_rate>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:185
}
204065d0:	0001                	nop
204065d2:	50b2                	lw	ra,44(sp)
204065d4:	5422                	lw	s0,40(sp)
204065d6:	6145                	addi	sp,sp,48
204065d8:	8082                	ret

204065da <__metal_driver_sifive_uart0_init>:
__metal_driver_sifive_uart0_init():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:187

void __metal_driver_sifive_uart0_init(struct metal_uart *guart, int baud_rate) {
204065da:	7139                	addi	sp,sp,-64
204065dc:	de06                	sw	ra,60(sp)
204065de:	dc22                	sw	s0,56(sp)
204065e0:	0080                	addi	s0,sp,64
204065e2:	fca42623          	sw	a0,-52(s0)
204065e6:	fcb42423          	sw	a1,-56(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:188
    struct __metal_driver_sifive_uart0 *uart = (void *)(guart);
204065ea:	fcc42783          	lw	a5,-52(s0)
204065ee:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:189
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
204065f2:	fcc42503          	lw	a0,-52(s0)
204065f6:	a9bff0ef          	jal	ra,20406090 <__metal_driver_sifive_uart0_clock>
204065fa:	fea42423          	sw	a0,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:191
    struct __metal_driver_sifive_gpio0 *pinmux =
        __metal_driver_sifive_uart0_pinmux(guart);
204065fe:	fcc42503          	lw	a0,-52(s0)
20406602:	abdff0ef          	jal	ra,204060be <__metal_driver_sifive_uart0_pinmux>
20406606:	fea42223          	sw	a0,-28(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:193

    if (clock != NULL) {
2040660a:	fe842783          	lw	a5,-24(s0)
2040660e:	c7b9                	beqz	a5,2040665c <__metal_driver_sifive_uart0_init+0x82>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:194
        uart->pre_rate_change_callback.callback =
20406610:	fec42783          	lw	a5,-20(s0)
20406614:	20406737          	lui	a4,0x20406
20406618:	4d070713          	addi	a4,a4,1232 # 204064d0 <pre_rate_change_callback_func>
2040661c:	c798                	sw	a4,8(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:196
            &pre_rate_change_callback_func;
        uart->pre_rate_change_callback.priv = guart;
2040661e:	fec42783          	lw	a5,-20(s0)
20406622:	fcc42703          	lw	a4,-52(s0)
20406626:	c7d8                	sw	a4,12(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:197
        metal_clock_register_pre_rate_change_callback(
20406628:	fec42783          	lw	a5,-20(s0)
2040662c:	07a1                	addi	a5,a5,8
2040662e:	85be                	mv	a1,a5
20406630:	fe842503          	lw	a0,-24(s0)
20406634:	2ab5                	jal	204067b0 <metal_clock_register_pre_rate_change_callback>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:200
            clock, &(uart->pre_rate_change_callback));

        uart->post_rate_change_callback.callback =
20406636:	fec42783          	lw	a5,-20(s0)
2040663a:	20406737          	lui	a4,0x20406
2040663e:	5aa70713          	addi	a4,a4,1450 # 204065aa <post_rate_change_callback_func>
20406642:	cbd8                	sw	a4,20(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:202
            &post_rate_change_callback_func;
        uart->post_rate_change_callback.priv = guart;
20406644:	fec42783          	lw	a5,-20(s0)
20406648:	fcc42703          	lw	a4,-52(s0)
2040664c:	cf98                	sw	a4,24(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:203
        metal_clock_register_post_rate_change_callback(
2040664e:	fec42783          	lw	a5,-20(s0)
20406652:	07d1                	addi	a5,a5,20
20406654:	85be                	mv	a1,a5
20406656:	fe842503          	lw	a0,-24(s0)
2040665a:	2259                	jal	204067e0 <metal_clock_register_post_rate_change_callback>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:207
            clock, &(uart->post_rate_change_callback));
    }

    metal_uart_set_baud_rate(&(uart->uart), baud_rate);
2040665c:	fec42783          	lw	a5,-20(s0)
20406660:	fc842583          	lw	a1,-56(s0)
20406664:	853e                	mv	a0,a5
20406666:	d2ffb0ef          	jal	ra,20402394 <metal_uart_set_baud_rate>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:209

    if (pinmux != NULL) {
2040666a:	fe442783          	lw	a5,-28(s0)
2040666e:	cb95                	beqz	a5,204066a2 <__metal_driver_sifive_uart0_init+0xc8>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:211
        long pinmux_output_selector =
            __metal_driver_sifive_uart0_pinmux_output_selector(guart);
20406670:	fcc42503          	lw	a0,-52(s0)
20406674:	a75ff0ef          	jal	ra,204060e8 <__metal_driver_sifive_uart0_pinmux_output_selector>
20406678:	87aa                	mv	a5,a0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:210
        long pinmux_output_selector =
2040667a:	fef42023          	sw	a5,-32(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:213
        long pinmux_source_selector =
            __metal_driver_sifive_uart0_pinmux_source_selector(guart);
2040667e:	fcc42503          	lw	a0,-52(s0)
20406682:	a8fff0ef          	jal	ra,20406110 <__metal_driver_sifive_uart0_pinmux_source_selector>
20406686:	87aa                	mv	a5,a0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:212
        long pinmux_source_selector =
20406688:	fcf42e23          	sw	a5,-36(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:214
        pinmux->gpio.vtable->enable_io((struct metal_gpio *)pinmux,
2040668c:	fe442783          	lw	a5,-28(s0)
20406690:	439c                	lw	a5,0(a5)
20406692:	53dc                	lw	a5,36(a5)
20406694:	fdc42603          	lw	a2,-36(s0)
20406698:	fe042583          	lw	a1,-32(s0)
2040669c:	fe442503          	lw	a0,-28(s0)
204066a0:	9782                	jalr	a5
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/sifive_uart0.c:218
                                       pinmux_output_selector,
                                       pinmux_source_selector);
    }
}
204066a2:	0001                	nop
204066a4:	50f2                	lw	ra,60(sp)
204066a6:	5462                	lw	s0,56(sp)
204066a8:	6121                	addi	sp,sp,64
204066aa:	8082                	ret

204066ac <_metal_clock_call_all_callbacks>:
_metal_clock_call_all_callbacks():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/clock.h:50

/*!
 * @brief Call all callbacks in the linked list, if any are registered
 */
__inline__ void
_metal_clock_call_all_callbacks(const metal_clock_callback *const list) {
204066ac:	7179                	addi	sp,sp,-48
204066ae:	d606                	sw	ra,44(sp)
204066b0:	d422                	sw	s0,40(sp)
204066b2:	1800                	addi	s0,sp,48
204066b4:	fca42e23          	sw	a0,-36(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/clock.h:51
    const metal_clock_callback *current = list;
204066b8:	fdc42783          	lw	a5,-36(s0)
204066bc:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/clock.h:52
    while (current) {
204066c0:	a831                	j	204066dc <_metal_clock_call_all_callbacks+0x30>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/clock.h:53
        current->callback(current->priv);
204066c2:	fec42783          	lw	a5,-20(s0)
204066c6:	4398                	lw	a4,0(a5)
204066c8:	fec42783          	lw	a5,-20(s0)
204066cc:	43dc                	lw	a5,4(a5)
204066ce:	853e                	mv	a0,a5
204066d0:	9702                	jalr	a4
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/clock.h:54
        current = current->_next;
204066d2:	fec42783          	lw	a5,-20(s0)
204066d6:	479c                	lw	a5,8(a5)
204066d8:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/clock.h:52
    while (current) {
204066dc:	fec42783          	lw	a5,-20(s0)
204066e0:	f3ed                	bnez	a5,204066c2 <_metal_clock_call_all_callbacks+0x16>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/clock.h:56
    }
}
204066e2:	0001                	nop
204066e4:	0001                	nop
204066e6:	50b2                	lw	ra,44(sp)
204066e8:	5422                	lw	s0,40(sp)
204066ea:	6145                	addi	sp,sp,48
204066ec:	8082                	ret

204066ee <_metal_clock_append_to_callbacks>:
_metal_clock_append_to_callbacks():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/clock.h:63
/*!
 * @brief Append a callback to the linked list and return the head of the list
 */
__inline__ metal_clock_callback *
_metal_clock_append_to_callbacks(metal_clock_callback *list,
                                 metal_clock_callback *const cb) {
204066ee:	7179                	addi	sp,sp,-48
204066f0:	d622                	sw	s0,44(sp)
204066f2:	1800                	addi	s0,sp,48
204066f4:	fca42e23          	sw	a0,-36(s0)
204066f8:	fcb42c23          	sw	a1,-40(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/clock.h:64
    cb->_next = NULL;
204066fc:	fd842783          	lw	a5,-40(s0)
20406700:	0007a423          	sw	zero,8(a5) # 10008 <__heap_size+0xf808>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/clock.h:66

    if (!list) {
20406704:	fdc42783          	lw	a5,-36(s0)
20406708:	e781                	bnez	a5,20406710 <_metal_clock_append_to_callbacks+0x22>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/clock.h:67
        return cb;
2040670a:	fd842783          	lw	a5,-40(s0)
2040670e:	a035                	j	2040673a <_metal_clock_append_to_callbacks+0x4c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/clock.h:70
    }

    metal_clock_callback *current = list;
20406710:	fdc42783          	lw	a5,-36(s0)
20406714:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/clock.h:72

    while ((current->_next) != NULL) {
20406718:	a031                	j	20406724 <_metal_clock_append_to_callbacks+0x36>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/clock.h:73
        current = current->_next;
2040671a:	fec42783          	lw	a5,-20(s0)
2040671e:	479c                	lw	a5,8(a5)
20406720:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/clock.h:72
    while ((current->_next) != NULL) {
20406724:	fec42783          	lw	a5,-20(s0)
20406728:	479c                	lw	a5,8(a5)
2040672a:	fbe5                	bnez	a5,2040671a <_metal_clock_append_to_callbacks+0x2c>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/clock.h:76
    }

    current->_next = cb;
2040672c:	fec42783          	lw	a5,-20(s0)
20406730:	fd842703          	lw	a4,-40(s0)
20406734:	c798                	sw	a4,8(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/clock.h:78

    return list;
20406736:	fdc42783          	lw	a5,-36(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/clock.h:79
}
2040673a:	853e                	mv	a0,a5
2040673c:	5432                	lw	s0,44(sp)
2040673e:	6145                	addi	sp,sp,48
20406740:	8082                	ret

20406742 <metal_clock_get_rate_hz>:
metal_clock_get_rate_hz():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/clock.h:110
 * @brief Returns the current rate of the given clock
 *
 * @param clk The handle for the clock
 * @return The current rate of the clock in Hz
 */
__inline__ long metal_clock_get_rate_hz(const struct metal_clock *clk) {
20406742:	1101                	addi	sp,sp,-32
20406744:	ce06                	sw	ra,28(sp)
20406746:	cc22                	sw	s0,24(sp)
20406748:	1000                	addi	s0,sp,32
2040674a:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/clock.h:111
    return clk->vtable->get_rate_hz(clk);
2040674e:	fec42783          	lw	a5,-20(s0)
20406752:	439c                	lw	a5,0(a5)
20406754:	439c                	lw	a5,0(a5)
20406756:	fec42503          	lw	a0,-20(s0)
2040675a:	9782                	jalr	a5
2040675c:	87aa                	mv	a5,a0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/clock.h:112
}
2040675e:	853e                	mv	a0,a5
20406760:	40f2                	lw	ra,28(sp)
20406762:	4462                	lw	s0,24(sp)
20406764:	6105                	addi	sp,sp,32
20406766:	8082                	ret

20406768 <metal_clock_set_rate_hz>:
metal_clock_set_rate_hz():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/clock.h:128
 * could be anything!
 *
 * Prior to and after the rate change of the clock, this will call the
 * registered pre- and post-rate change callbacks.
 */
__inline__ long metal_clock_set_rate_hz(struct metal_clock *clk, long hz) {
20406768:	7179                	addi	sp,sp,-48
2040676a:	d606                	sw	ra,44(sp)
2040676c:	d422                	sw	s0,40(sp)
2040676e:	1800                	addi	s0,sp,48
20406770:	fca42e23          	sw	a0,-36(s0)
20406774:	fcb42c23          	sw	a1,-40(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/clock.h:129
    _metal_clock_call_all_callbacks(clk->_pre_rate_change_callback);
20406778:	fdc42783          	lw	a5,-36(s0)
2040677c:	43dc                	lw	a5,4(a5)
2040677e:	853e                	mv	a0,a5
20406780:	3735                	jal	204066ac <_metal_clock_call_all_callbacks>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/clock.h:131

    long out = clk->vtable->set_rate_hz(clk, hz);
20406782:	fdc42783          	lw	a5,-36(s0)
20406786:	439c                	lw	a5,0(a5)
20406788:	43dc                	lw	a5,4(a5)
2040678a:	fd842583          	lw	a1,-40(s0)
2040678e:	fdc42503          	lw	a0,-36(s0)
20406792:	9782                	jalr	a5
20406794:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/clock.h:133

    _metal_clock_call_all_callbacks(clk->_post_rate_change_callback);
20406798:	fdc42783          	lw	a5,-36(s0)
2040679c:	479c                	lw	a5,8(a5)
2040679e:	853e                	mv	a0,a5
204067a0:	3731                	jal	204066ac <_metal_clock_call_all_callbacks>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/clock.h:135

    return out;
204067a2:	fec42783          	lw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/clock.h:136
}
204067a6:	853e                	mv	a0,a5
204067a8:	50b2                	lw	ra,44(sp)
204067aa:	5422                	lw	s0,40(sp)
204067ac:	6145                	addi	sp,sp,48
204067ae:	8082                	ret

204067b0 <metal_clock_register_pre_rate_change_callback>:
metal_clock_register_pre_rate_change_callback():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/clock.h:146
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void
metal_clock_register_pre_rate_change_callback(struct metal_clock *clk,
                                              metal_clock_callback *cb) {
204067b0:	1101                	addi	sp,sp,-32
204067b2:	ce06                	sw	ra,28(sp)
204067b4:	cc22                	sw	s0,24(sp)
204067b6:	1000                	addi	s0,sp,32
204067b8:	fea42623          	sw	a0,-20(s0)
204067bc:	feb42423          	sw	a1,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/clock.h:148
    clk->_pre_rate_change_callback =
        _metal_clock_append_to_callbacks(clk->_pre_rate_change_callback, cb);
204067c0:	fec42783          	lw	a5,-20(s0)
204067c4:	43dc                	lw	a5,4(a5)
204067c6:	fe842583          	lw	a1,-24(s0)
204067ca:	853e                	mv	a0,a5
204067cc:	370d                	jal	204066ee <_metal_clock_append_to_callbacks>
204067ce:	872a                	mv	a4,a0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/clock.h:147
    clk->_pre_rate_change_callback =
204067d0:	fec42783          	lw	a5,-20(s0)
204067d4:	c3d8                	sw	a4,4(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/clock.h:149
}
204067d6:	0001                	nop
204067d8:	40f2                	lw	ra,28(sp)
204067da:	4462                	lw	s0,24(sp)
204067dc:	6105                	addi	sp,sp,32
204067de:	8082                	ret

204067e0 <metal_clock_register_post_rate_change_callback>:
metal_clock_register_post_rate_change_callback():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/clock.h:159
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void
metal_clock_register_post_rate_change_callback(struct metal_clock *clk,
                                               metal_clock_callback *cb) {
204067e0:	1101                	addi	sp,sp,-32
204067e2:	ce06                	sw	ra,28(sp)
204067e4:	cc22                	sw	s0,24(sp)
204067e6:	1000                	addi	s0,sp,32
204067e8:	fea42623          	sw	a0,-20(s0)
204067ec:	feb42423          	sw	a1,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/clock.h:161
    clk->_post_rate_change_callback =
        _metal_clock_append_to_callbacks(clk->_post_rate_change_callback, cb);
204067f0:	fec42783          	lw	a5,-20(s0)
204067f4:	479c                	lw	a5,8(a5)
204067f6:	fe842583          	lw	a1,-24(s0)
204067fa:	853e                	mv	a0,a5
204067fc:	3dcd                	jal	204066ee <_metal_clock_append_to_callbacks>
204067fe:	872a                	mv	a4,a0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/clock.h:160
    clk->_post_rate_change_callback =
20406800:	fec42783          	lw	a5,-20(s0)
20406804:	c798                	sw	a4,8(a5)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/clock.h:162
}
20406806:	0001                	nop
20406808:	40f2                	lw	ra,28(sp)
2040680a:	4462                	lw	s0,24(sp)
2040680c:	6105                	addi	sp,sp,32
2040680e:	8082                	ret

20406810 <metal_cpu_interrupt_controller>:
metal_cpu_interrupt_controller():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/cpu.h:224
 *
 * @param cpu The CPU device handle
 * @return The handle for the CPU interrupt controller
 */
__inline__ struct metal_interrupt *
metal_cpu_interrupt_controller(struct metal_cpu *cpu) {
20406810:	1101                	addi	sp,sp,-32
20406812:	ce06                	sw	ra,28(sp)
20406814:	cc22                	sw	s0,24(sp)
20406816:	1000                	addi	s0,sp,32
20406818:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/cpu.h:225
    return cpu->vtable->controller_interrupt(cpu);
2040681c:	fec42783          	lw	a5,-20(s0)
20406820:	439c                	lw	a5,0(a5)
20406822:	57dc                	lw	a5,44(a5)
20406824:	fec42503          	lw	a0,-20(s0)
20406828:	9782                	jalr	a5
2040682a:	87aa                	mv	a5,a0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/cpu.h:226
}
2040682c:	853e                	mv	a0,a5
2040682e:	40f2                	lw	ra,28(sp)
20406830:	4462                	lw	s0,24(sp)
20406832:	6105                	addi	sp,sp,32
20406834:	8082                	ret

20406836 <metal_cpu_get>:
metal_cpu_get():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/cpu.c:7
/* SPDX-License-Identifier: Apache-2.0 */

#include <metal/cpu.h>
#include <metal/machine.h>

struct metal_cpu *metal_cpu_get(unsigned int hartid) {
20406836:	1101                	addi	sp,sp,-32
20406838:	ce22                	sw	s0,28(sp)
2040683a:	1000                	addi	s0,sp,32
2040683c:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/cpu.c:8
    if (hartid < __METAL_DT_MAX_HARTS) {
20406840:	fec42783          	lw	a5,-20(s0)
20406844:	eb99                	bnez	a5,2040685a <metal_cpu_get+0x24>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/cpu.c:9
        return (struct metal_cpu *)__metal_cpu_table[hartid];
20406846:	800017b7          	lui	a5,0x80001
2040684a:	fec42703          	lw	a4,-20(s0)
2040684e:	070a                	slli	a4,a4,0x2
20406850:	e3878793          	addi	a5,a5,-456 # 80000e38 <metal_segment_heap_target_end+0xfffff338>
20406854:	97ba                	add	a5,a5,a4
20406856:	439c                	lw	a5,0(a5)
20406858:	a011                	j	2040685c <metal_cpu_get+0x26>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/cpu.c:11
    }
    return NULL;
2040685a:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/cpu.c:12
}
2040685c:	853e                	mv	a0,a5
2040685e:	4472                	lw	s0,28(sp)
20406860:	6105                	addi	sp,sp,32
20406862:	8082                	ret

20406864 <metal_cpu_get_current_hartid>:
metal_cpu_get_current_hartid():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/cpu.c:14

int metal_cpu_get_current_hartid() {
20406864:	1101                	addi	sp,sp,-32
20406866:	ce22                	sw	s0,28(sp)
20406868:	1000                	addi	s0,sp,32
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/cpu.c:17
#ifdef __riscv
    int mhartid;
    __asm__ volatile("csrr %0, mhartid" : "=r"(mhartid));
2040686a:	f14027f3          	csrr	a5,mhartid
2040686e:	fef42623          	sw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/cpu.c:18
    return mhartid;
20406872:	fec42783          	lw	a5,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/cpu.c:20
#endif
}
20406876:	853e                	mv	a0,a5
20406878:	4472                	lw	s0,28(sp)
2040687a:	6105                	addi	sp,sp,32
2040687c:	8082                	ret

2040687e <__metal_shutdown_exit>:
__metal_shutdown_exit():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/shutdown.h:26
};

__inline__ void __metal_shutdown_exit(const struct __metal_shutdown *sd,
                                      int code) __attribute__((noreturn));
__inline__ void __metal_shutdown_exit(const struct __metal_shutdown *sd,
                                      int code) {
2040687e:	1101                	addi	sp,sp,-32
20406880:	ce06                	sw	ra,28(sp)
20406882:	cc22                	sw	s0,24(sp)
20406884:	1000                	addi	s0,sp,32
20406886:	fea42623          	sw	a0,-20(s0)
2040688a:	feb42423          	sw	a1,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/metal/shutdown.h:27
    sd->vtable->exit(sd, code);
2040688e:	fec42783          	lw	a5,-20(s0)
20406892:	439c                	lw	a5,0(a5)
20406894:	439c                	lw	a5,0(a5)
20406896:	fe842583          	lw	a1,-24(s0)
2040689a:	fec42503          	lw	a0,-20(s0)
2040689e:	9782                	jalr	a5

204068a0 <metal_shutdown>:
metal_shutdown():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/shutdown.c:11

extern __inline__ void __metal_shutdown_exit(const struct __metal_shutdown *sd,
                                             int code);

#if defined(__METAL_DT_SHUTDOWN_HANDLE)
void metal_shutdown(int code) {
204068a0:	1101                	addi	sp,sp,-32
204068a2:	ce06                	sw	ra,28(sp)
204068a4:	cc22                	sw	s0,24(sp)
204068a6:	1000                	addi	s0,sp,32
204068a8:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/shutdown.c:12
    __metal_shutdown_exit(__METAL_DT_SHUTDOWN_HANDLE, code);
204068ac:	fec42583          	lw	a1,-20(s0)
204068b0:	82018513          	addi	a0,gp,-2016 # 80000e50 <__metal_dt_test_100000>
204068b4:	37e9                	jal	2040687e <__metal_shutdown_exit>
	...

20406900 <__metal_vector_table>:
IRQ_0():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/vector.S:96
#endif
.option norvc
.global __metal_vector_table
__metal_vector_table:
IRQ_0:
        j metal_interrupt_vector_handler
20406900:	c28fc06f          	j	20402d28 <metal_interrupt_vector_handler>

20406904 <IRQ_1>:
IRQ_1():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/vector.S:98
IRQ_1:
        j metal_interrupt_vector_handler
20406904:	c24fc06f          	j	20402d28 <metal_interrupt_vector_handler>

20406908 <IRQ_2>:
IRQ_2():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/vector.S:100
IRQ_2:
        j metal_interrupt_vector_handler
20406908:	c20fc06f          	j	20402d28 <metal_interrupt_vector_handler>

2040690c <IRQ_3>:
IRQ_3():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/vector.S:102
IRQ_3:
        j metal_software_interrupt_vector_handler
2040690c:	c4afc06f          	j	20402d56 <metal_software_interrupt_vector_handler>

20406910 <IRQ_4>:
IRQ_4():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/vector.S:104
IRQ_4:
        j metal_interrupt_vector_handler
20406910:	c18fc06f          	j	20402d28 <metal_interrupt_vector_handler>

20406914 <IRQ_5>:
IRQ_5():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/vector.S:106
IRQ_5:
        j metal_interrupt_vector_handler
20406914:	c14fc06f          	j	20402d28 <metal_interrupt_vector_handler>

20406918 <IRQ_6>:
IRQ_6():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/vector.S:108
IRQ_6:
        j metal_interrupt_vector_handler
20406918:	c10fc06f          	j	20402d28 <metal_interrupt_vector_handler>

2040691c <IRQ_7>:
IRQ_7():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/vector.S:110
IRQ_7:
        j metal_timer_interrupt_vector_handler
2040691c:	d34fc06f          	j	20402e50 <metal_timer_interrupt_vector_handler>

20406920 <IRQ_8>:
IRQ_8():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/vector.S:112
IRQ_8:
        j metal_interrupt_vector_handler
20406920:	c08fc06f          	j	20402d28 <metal_interrupt_vector_handler>

20406924 <IRQ_9>:
IRQ_9():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/vector.S:114
IRQ_9:
        j metal_interrupt_vector_handler
20406924:	c04fc06f          	j	20402d28 <metal_interrupt_vector_handler>

20406928 <IRQ_10>:
IRQ_10():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/vector.S:116
IRQ_10:
        j metal_interrupt_vector_handler
20406928:	c00fc06f          	j	20402d28 <metal_interrupt_vector_handler>

2040692c <IRQ_11>:
IRQ_11():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/vector.S:118
IRQ_11:
        j metal_interrupt_vector_handler
2040692c:	bfcfc06f          	j	20402d28 <metal_interrupt_vector_handler>

20406930 <IRQ_12>:
IRQ_12():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/vector.S:120
IRQ_12:
        j metal_interrupt_vector_handler
20406930:	bf8fc06f          	j	20402d28 <metal_interrupt_vector_handler>

20406934 <IRQ_13>:
IRQ_13():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/vector.S:122
IRQ_13:
        j metal_interrupt_vector_handler
20406934:	bf4fc06f          	j	20402d28 <metal_interrupt_vector_handler>

20406938 <IRQ_14>:
IRQ_14():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/vector.S:124
IRQ_14:
        j metal_interrupt_vector_handler
20406938:	bf0fc06f          	j	20402d28 <metal_interrupt_vector_handler>

2040693c <IRQ_15>:
IRQ_15():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/vector.S:126
IRQ_15:
        j metal_interrupt_vector_handler
2040693c:	becfc06f          	j	20402d28 <metal_interrupt_vector_handler>

20406940 <IRQ_LC0>:
IRQ_LC0():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/vector.S:128
IRQ_LC0:
        j metal_lc0_interrupt_vector_handler
20406940:	839fc06f          	j	20403178 <metal_lc0_interrupt_vector_handler>

20406944 <IRQ_LC1>:
IRQ_LC1():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/vector.S:130
IRQ_LC1:
        j metal_lc1_interrupt_vector_handler
20406944:	8cbfc06f          	j	2040320e <metal_lc1_interrupt_vector_handler>

20406948 <IRQ_LC2>:
IRQ_LC2():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/vector.S:132
IRQ_LC2:
        j metal_lc2_interrupt_vector_handler
20406948:	95dfc06f          	j	204032a4 <metal_lc2_interrupt_vector_handler>

2040694c <IRQ_LC3>:
IRQ_LC3():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/vector.S:134
IRQ_LC3:
        j metal_lc3_interrupt_vector_handler
2040694c:	9effc06f          	j	2040333a <metal_lc3_interrupt_vector_handler>

20406950 <IRQ_LC4>:
IRQ_LC4():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/vector.S:136
IRQ_LC4:
        j metal_lc4_interrupt_vector_handler
20406950:	a81fc06f          	j	204033d0 <metal_lc4_interrupt_vector_handler>

20406954 <IRQ_LC5>:
IRQ_LC5():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/vector.S:138
IRQ_LC5:
        j metal_lc5_interrupt_vector_handler
20406954:	b13fc06f          	j	20403466 <metal_lc5_interrupt_vector_handler>

20406958 <IRQ_LC6>:
IRQ_LC6():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/vector.S:140
IRQ_LC6:
        j metal_lc6_interrupt_vector_handler
20406958:	ba5fc06f          	j	204034fc <metal_lc6_interrupt_vector_handler>

2040695c <IRQ_LC7>:
IRQ_LC7():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/vector.S:142
IRQ_LC7:
        j metal_lc7_interrupt_vector_handler
2040695c:	c37fc06f          	j	20403592 <metal_lc7_interrupt_vector_handler>

20406960 <IRQ_LC8>:
IRQ_LC8():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/vector.S:144
IRQ_LC8:
        j metal_lc8_interrupt_vector_handler
20406960:	cc9fc06f          	j	20403628 <metal_lc8_interrupt_vector_handler>

20406964 <IRQ_LC9>:
IRQ_LC9():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/vector.S:146
IRQ_LC9:
        j metal_lc9_interrupt_vector_handler
20406964:	d5bfc06f          	j	204036be <metal_lc9_interrupt_vector_handler>

20406968 <IRQ_LC10>:
IRQ_LC10():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/vector.S:148
IRQ_LC10:
        j metal_lc10_interrupt_vector_handler
20406968:	dedfc06f          	j	20403754 <metal_lc10_interrupt_vector_handler>

2040696c <IRQ_LC11>:
IRQ_LC11():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/vector.S:150
IRQ_LC11:
        j metal_lc11_interrupt_vector_handler
2040696c:	e7ffc06f          	j	204037ea <metal_lc11_interrupt_vector_handler>

20406970 <IRQ_LC12>:
IRQ_LC12():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/vector.S:152
IRQ_LC12:
        j metal_lc12_interrupt_vector_handler
20406970:	f11fc06f          	j	20403880 <metal_lc12_interrupt_vector_handler>

20406974 <IRQ_LC13>:
IRQ_LC13():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/vector.S:154
IRQ_LC13:
        j metal_lc13_interrupt_vector_handler
20406974:	fa3fc06f          	j	20403916 <metal_lc13_interrupt_vector_handler>

20406978 <IRQ_LC14>:
IRQ_LC14():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/vector.S:156
IRQ_LC14:
        j metal_lc14_interrupt_vector_handler
20406978:	834fd06f          	j	204039ac <metal_lc14_interrupt_vector_handler>

2040697c <IRQ_LC15>:
IRQ_LC15():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/vector.S:158
IRQ_LC15:
        j metal_lc15_interrupt_vector_handler
2040697c:	8c6fd06f          	j	20403a42 <metal_lc15_interrupt_vector_handler>

20406980 <__metal_driver_fixed_clock_rate>:
__metal_driver_fixed_clock_rate():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:180
{
20406980:	1101                	addi	sp,sp,-32
20406982:	ce22                	sw	s0,28(sp)
20406984:	1000                	addi	s0,sp,32
20406986:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:181
	if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_0) {
2040698a:	fec42703          	lw	a4,-20(s0)
2040698e:	800007b7          	lui	a5,0x80000
20406992:	6f078793          	addi	a5,a5,1776 # 800006f0 <metal_segment_heap_target_end+0xffffebf0>
20406996:	00f71763          	bne	a4,a5,204069a4 <__metal_driver_fixed_clock_rate+0x24>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:182
		return METAL_FIXED_CLOCK_0_CLOCK_FREQUENCY;
2040699a:	00f427b7          	lui	a5,0xf42
2040699e:	40078793          	addi	a5,a5,1024 # f42400 <__heap_size+0xf41c00>
204069a2:	a825                	j	204069da <__metal_driver_fixed_clock_rate+0x5a>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:184
	else if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_2) {
204069a4:	fec42703          	lw	a4,-20(s0)
204069a8:	800007b7          	lui	a5,0x80000
204069ac:	6fc78793          	addi	a5,a5,1788 # 800006fc <metal_segment_heap_target_end+0xffffebfc>
204069b0:	00f71763          	bne	a4,a5,204069be <__metal_driver_fixed_clock_rate+0x3e>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:185
		return METAL_FIXED_CLOCK_2_CLOCK_FREQUENCY;
204069b4:	044aa7b7          	lui	a5,0x44aa
204069b8:	20078793          	addi	a5,a5,512 # 44aa200 <__heap_size+0x44a9a00>
204069bc:	a839                	j	204069da <__metal_driver_fixed_clock_rate+0x5a>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:187
	else if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_5) {
204069be:	fec42703          	lw	a4,-20(s0)
204069c2:	800007b7          	lui	a5,0x80000
204069c6:	70878793          	addi	a5,a5,1800 # 80000708 <metal_segment_heap_target_end+0xffffec08>
204069ca:	00f71763          	bne	a4,a5,204069d8 <__metal_driver_fixed_clock_rate+0x58>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:188
		return METAL_FIXED_CLOCK_5_CLOCK_FREQUENCY;
204069ce:	01e857b7          	lui	a5,0x1e85
204069d2:	80078793          	addi	a5,a5,-2048 # 1e84800 <__heap_size+0x1e84000>
204069d6:	a011                	j	204069da <__metal_driver_fixed_clock_rate+0x5a>
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:191
		return 0;
204069d8:	4781                	li	a5,0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/bsp/build/debug/./metal/machine.h:193
}
204069da:	853e                	mv	a0,a5
204069dc:	4472                	lw	s0,28(sp)
204069de:	6105                	addi	sp,sp,32
204069e0:	8082                	ret

204069e2 <__metal_driver_fixed_clock_get_rate_hz>:
__metal_driver_fixed_clock_get_rate_hz():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/fixed-clock.c:12

#include <metal/drivers/fixed-clock.h>
#include <metal/machine.h>
#include <stddef.h>

long __metal_driver_fixed_clock_get_rate_hz(const struct metal_clock *gclk) {
204069e2:	1101                	addi	sp,sp,-32
204069e4:	ce06                	sw	ra,28(sp)
204069e6:	cc22                	sw	s0,24(sp)
204069e8:	1000                	addi	s0,sp,32
204069ea:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/fixed-clock.c:13
    return __metal_driver_fixed_clock_rate(gclk);
204069ee:	fec42503          	lw	a0,-20(s0)
204069f2:	3779                	jal	20406980 <__metal_driver_fixed_clock_rate>
204069f4:	87aa                	mv	a5,a0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/fixed-clock.c:14
}
204069f6:	853e                	mv	a0,a5
204069f8:	40f2                	lw	ra,28(sp)
204069fa:	4462                	lw	s0,24(sp)
204069fc:	6105                	addi	sp,sp,32
204069fe:	8082                	ret

20406a00 <__metal_driver_fixed_clock_set_rate_hz>:
__metal_driver_fixed_clock_set_rate_hz():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/fixed-clock.c:17

long __metal_driver_fixed_clock_set_rate_hz(struct metal_clock *gclk,
                                            long target_hz) {
20406a00:	1101                	addi	sp,sp,-32
20406a02:	ce06                	sw	ra,28(sp)
20406a04:	cc22                	sw	s0,24(sp)
20406a06:	1000                	addi	s0,sp,32
20406a08:	fea42623          	sw	a0,-20(s0)
20406a0c:	feb42423          	sw	a1,-24(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/fixed-clock.c:18
    return __metal_driver_fixed_clock_get_rate_hz(gclk);
20406a10:	fec42503          	lw	a0,-20(s0)
20406a14:	37f9                	jal	204069e2 <__metal_driver_fixed_clock_get_rate_hz>
20406a16:	87aa                	mv	a5,a0
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/src/drivers/fixed-clock.c:19
}
20406a18:	853e                	mv	a0,a5
20406a1a:	40f2                	lw	ra,28(sp)
20406a1c:	4462                	lw	s0,24(sp)
20406a1e:	6105                	addi	sp,sp,32
20406a20:	8082                	ret

20406a22 <_exit>:
_exit():
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/sys_exit.c:3
#include <metal/shutdown.h>

void _exit(int exit_status) {
20406a22:	1101                	addi	sp,sp,-32
20406a24:	ce06                	sw	ra,28(sp)
20406a26:	cc22                	sw	s0,24(sp)
20406a28:	1000                	addi	s0,sp,32
20406a2a:	fea42623          	sw	a0,-20(s0)
/Users/sushmita/Work/Code/Crypto/A3-PRESENT/freedom-metal/gloss/sys_exit.c:4
    metal_shutdown(exit_status);
20406a2e:	fec42503          	lw	a0,-20(s0)
20406a32:	e6fff0ef          	jal	ra,204068a0 <metal_shutdown>
